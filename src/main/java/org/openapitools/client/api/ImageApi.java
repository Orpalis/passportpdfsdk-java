/*
 * PassportPDF API
 * Another brick in the cloud
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import org.openapitools.client.model.ImageAdjustParameters;
import org.openapitools.client.model.ImageAdjustResponse;
import org.openapitools.client.model.ImageAutoCropParameters;
import org.openapitools.client.model.ImageAutoCropResponse;
import org.openapitools.client.model.ImageCleanupDocumentParameters;
import org.openapitools.client.model.ImageCleanupDocumentResponse;
import org.openapitools.client.model.ImageCloneRegionsParameters;
import org.openapitools.client.model.ImageCloneRegionsResponse;
import org.openapitools.client.model.ImageCloseParameters;
import org.openapitools.client.model.ImageCloseResponse;
import org.openapitools.client.model.ImageConvertColorDepthParameters;
import org.openapitools.client.model.ImageConvertColorDepthResponse;
import org.openapitools.client.model.ImageCropParameters;
import org.openapitools.client.model.ImageCropResponse;
import org.openapitools.client.model.ImageDeletePageParameters;
import org.openapitools.client.model.ImageDeletePageResponse;
import org.openapitools.client.model.ImageDetectBlankPagesParameters;
import org.openapitools.client.model.ImageDetectBlankPagesResponse;
import org.openapitools.client.model.ImageDetectColorParameters;
import org.openapitools.client.model.ImageDetectColorResponse;
import org.openapitools.client.model.ImageDetectPageOrientationParameters;
import org.openapitools.client.model.ImageDetectPageOrientationResponse;
import org.openapitools.client.model.ImageFilterParameters;
import org.openapitools.client.model.ImageFilterResponse;
import org.openapitools.client.model.ImageGetPageThumbnailParameters;
import org.openapitools.client.model.ImageGetPageThumbnailResponse;
import org.openapitools.client.model.ImageLoadResponse;
import org.openapitools.client.model.ImageMICRParameters;
import org.openapitools.client.model.ImageMICRResponse;
import org.openapitools.client.model.ImageReadBarcodesParameters;
import org.openapitools.client.model.ImageResizeParameters;
import org.openapitools.client.model.ImageResizeResponse;
import org.openapitools.client.model.ImageRotateParameters;
import org.openapitools.client.model.ImageRotateResponse;
import org.openapitools.client.model.ImageSaveAsJPEGParameters;
import org.openapitools.client.model.ImageSaveAsJPEGResponse;
import org.openapitools.client.model.ImageSaveAsPDFMRCParameters;
import org.openapitools.client.model.ImageSaveAsPDFMRCResponse;
import org.openapitools.client.model.ImageSaveAsPDFParameters;
import org.openapitools.client.model.ImageSaveAsPDFResponse;
import org.openapitools.client.model.ImageSaveAsPNGParameters;
import org.openapitools.client.model.ImageSaveAsPNGResponse;
import org.openapitools.client.model.ImageSaveAsTIFFMultipageParameters;
import org.openapitools.client.model.ImageSaveAsTIFFMultipageResponse;
import org.openapitools.client.model.ImageSaveAsTIFFParameters;
import org.openapitools.client.model.ImageSaveAsTIFFResponse;
import org.openapitools.client.model.ImageSwapPagesParameters;
import org.openapitools.client.model.ImageSwapPagesResponse;
import org.openapitools.client.model.LoadImageFromByteArrayParameters;
import org.openapitools.client.model.LoadImageParameters;
import org.openapitools.client.model.ReadBarcodesResponse;
import org.openapitools.client.model.StringArrayResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ImageApi {
    private ApiClient localVarApiClient;

    public ImageApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ImageApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for imageAdjust
     * @param imageAdjustParameters An ImageAdjustParameters object specifying the parameters for the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageAdjustCall(ImageAdjustParameters imageAdjustParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = imageAdjustParameters;

        // create path and map variables
        String localVarPath = "/api/image/ImageAdjust";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imageAdjustValidateBeforeCall(ImageAdjustParameters imageAdjustParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'imageAdjustParameters' is set
        if (imageAdjustParameters == null) {
            throw new ApiException("Missing the required parameter 'imageAdjustParameters' when calling imageAdjust(Async)");
        }
        

        okhttp3.Call localVarCall = imageAdjustCall(imageAdjustParameters, _callback);
        return localVarCall;

    }

    /**
     * Adjusts a previously uploaded image.
     * 
     * @param imageAdjustParameters An ImageAdjustParameters object specifying the parameters for the action. (required)
     * @return ImageAdjustResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ImageAdjustResponse imageAdjust(ImageAdjustParameters imageAdjustParameters) throws ApiException {
        ApiResponse<ImageAdjustResponse> localVarResp = imageAdjustWithHttpInfo(imageAdjustParameters);
        return localVarResp.getData();
    }

    /**
     * Adjusts a previously uploaded image.
     * 
     * @param imageAdjustParameters An ImageAdjustParameters object specifying the parameters for the action. (required)
     * @return ApiResponse&lt;ImageAdjustResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImageAdjustResponse> imageAdjustWithHttpInfo(ImageAdjustParameters imageAdjustParameters) throws ApiException {
        okhttp3.Call localVarCall = imageAdjustValidateBeforeCall(imageAdjustParameters, null);
        Type localVarReturnType = new TypeToken<ImageAdjustResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adjusts a previously uploaded image. (asynchronously)
     * 
     * @param imageAdjustParameters An ImageAdjustParameters object specifying the parameters for the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageAdjustAsync(ImageAdjustParameters imageAdjustParameters, final ApiCallback<ImageAdjustResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = imageAdjustValidateBeforeCall(imageAdjustParameters, _callback);
        Type localVarReturnType = new TypeToken<ImageAdjustResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for imageAutoCrop
     * @param imageAutoCropParameters An ImageAutoCropParameters object specifying the parameters for the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageAutoCropCall(ImageAutoCropParameters imageAutoCropParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = imageAutoCropParameters;

        // create path and map variables
        String localVarPath = "/api/image/ImageAutoCrop";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imageAutoCropValidateBeforeCall(ImageAutoCropParameters imageAutoCropParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'imageAutoCropParameters' is set
        if (imageAutoCropParameters == null) {
            throw new ApiException("Missing the required parameter 'imageAutoCropParameters' when calling imageAutoCrop(Async)");
        }
        

        okhttp3.Call localVarCall = imageAutoCropCall(imageAutoCropParameters, _callback);
        return localVarCall;

    }

    /**
     * Automatically crops a previously uploaded image.
     * 
     * @param imageAutoCropParameters An ImageAutoCropParameters object specifying the parameters for the action. (required)
     * @return ImageAutoCropResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ImageAutoCropResponse imageAutoCrop(ImageAutoCropParameters imageAutoCropParameters) throws ApiException {
        ApiResponse<ImageAutoCropResponse> localVarResp = imageAutoCropWithHttpInfo(imageAutoCropParameters);
        return localVarResp.getData();
    }

    /**
     * Automatically crops a previously uploaded image.
     * 
     * @param imageAutoCropParameters An ImageAutoCropParameters object specifying the parameters for the action. (required)
     * @return ApiResponse&lt;ImageAutoCropResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImageAutoCropResponse> imageAutoCropWithHttpInfo(ImageAutoCropParameters imageAutoCropParameters) throws ApiException {
        okhttp3.Call localVarCall = imageAutoCropValidateBeforeCall(imageAutoCropParameters, null);
        Type localVarReturnType = new TypeToken<ImageAutoCropResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Automatically crops a previously uploaded image. (asynchronously)
     * 
     * @param imageAutoCropParameters An ImageAutoCropParameters object specifying the parameters for the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageAutoCropAsync(ImageAutoCropParameters imageAutoCropParameters, final ApiCallback<ImageAutoCropResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = imageAutoCropValidateBeforeCall(imageAutoCropParameters, _callback);
        Type localVarReturnType = new TypeToken<ImageAutoCropResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for imageCleanupDocument
     * @param imageCleanupDocumentParameters An ImageCleanupDocumentParameters object specifying the parameters for the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageCleanupDocumentCall(ImageCleanupDocumentParameters imageCleanupDocumentParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = imageCleanupDocumentParameters;

        // create path and map variables
        String localVarPath = "/api/image/ImageCleanupDocument";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imageCleanupDocumentValidateBeforeCall(ImageCleanupDocumentParameters imageCleanupDocumentParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'imageCleanupDocumentParameters' is set
        if (imageCleanupDocumentParameters == null) {
            throw new ApiException("Missing the required parameter 'imageCleanupDocumentParameters' when calling imageCleanupDocument(Async)");
        }
        

        okhttp3.Call localVarCall = imageCleanupDocumentCall(imageCleanupDocumentParameters, _callback);
        return localVarCall;

    }

    /**
     * Cleanup a previously uploaded image.
     * 
     * @param imageCleanupDocumentParameters An ImageCleanupDocumentParameters object specifying the parameters for the action. (required)
     * @return ImageCleanupDocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ImageCleanupDocumentResponse imageCleanupDocument(ImageCleanupDocumentParameters imageCleanupDocumentParameters) throws ApiException {
        ApiResponse<ImageCleanupDocumentResponse> localVarResp = imageCleanupDocumentWithHttpInfo(imageCleanupDocumentParameters);
        return localVarResp.getData();
    }

    /**
     * Cleanup a previously uploaded image.
     * 
     * @param imageCleanupDocumentParameters An ImageCleanupDocumentParameters object specifying the parameters for the action. (required)
     * @return ApiResponse&lt;ImageCleanupDocumentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImageCleanupDocumentResponse> imageCleanupDocumentWithHttpInfo(ImageCleanupDocumentParameters imageCleanupDocumentParameters) throws ApiException {
        okhttp3.Call localVarCall = imageCleanupDocumentValidateBeforeCall(imageCleanupDocumentParameters, null);
        Type localVarReturnType = new TypeToken<ImageCleanupDocumentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cleanup a previously uploaded image. (asynchronously)
     * 
     * @param imageCleanupDocumentParameters An ImageCleanupDocumentParameters object specifying the parameters for the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageCleanupDocumentAsync(ImageCleanupDocumentParameters imageCleanupDocumentParameters, final ApiCallback<ImageCleanupDocumentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = imageCleanupDocumentValidateBeforeCall(imageCleanupDocumentParameters, _callback);
        Type localVarReturnType = new TypeToken<ImageCleanupDocumentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for imageCloneRegions
     * @param imageCloneRegionsParameters An ImageCloneRegionsParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageCloneRegionsCall(ImageCloneRegionsParameters imageCloneRegionsParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = imageCloneRegionsParameters;

        // create path and map variables
        String localVarPath = "/api/image/ImageCloneRegions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imageCloneRegionsValidateBeforeCall(ImageCloneRegionsParameters imageCloneRegionsParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'imageCloneRegionsParameters' is set
        if (imageCloneRegionsParameters == null) {
            throw new ApiException("Missing the required parameter 'imageCloneRegionsParameters' when calling imageCloneRegions(Async)");
        }
        

        okhttp3.Call localVarCall = imageCloneRegionsCall(imageCloneRegionsParameters, _callback);
        return localVarCall;

    }

    /**
     * Clones regions from a previously uploaded image into new images.
     * 
     * @param imageCloneRegionsParameters An ImageCloneRegionsParameters object specifying the parameters of the action. (required)
     * @return ImageCloneRegionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ImageCloneRegionsResponse imageCloneRegions(ImageCloneRegionsParameters imageCloneRegionsParameters) throws ApiException {
        ApiResponse<ImageCloneRegionsResponse> localVarResp = imageCloneRegionsWithHttpInfo(imageCloneRegionsParameters);
        return localVarResp.getData();
    }

    /**
     * Clones regions from a previously uploaded image into new images.
     * 
     * @param imageCloneRegionsParameters An ImageCloneRegionsParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;ImageCloneRegionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImageCloneRegionsResponse> imageCloneRegionsWithHttpInfo(ImageCloneRegionsParameters imageCloneRegionsParameters) throws ApiException {
        okhttp3.Call localVarCall = imageCloneRegionsValidateBeforeCall(imageCloneRegionsParameters, null);
        Type localVarReturnType = new TypeToken<ImageCloneRegionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Clones regions from a previously uploaded image into new images. (asynchronously)
     * 
     * @param imageCloneRegionsParameters An ImageCloneRegionsParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageCloneRegionsAsync(ImageCloneRegionsParameters imageCloneRegionsParameters, final ApiCallback<ImageCloneRegionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = imageCloneRegionsValidateBeforeCall(imageCloneRegionsParameters, _callback);
        Type localVarReturnType = new TypeToken<ImageCloneRegionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for imageClose
     * @param imageCloseParameters An ImageCloseParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageCloseCall(ImageCloseParameters imageCloseParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = imageCloseParameters;

        // create path and map variables
        String localVarPath = "/api/image/ImageClose";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imageCloseValidateBeforeCall(ImageCloseParameters imageCloseParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'imageCloseParameters' is set
        if (imageCloseParameters == null) {
            throw new ApiException("Missing the required parameter 'imageCloseParameters' when calling imageClose(Async)");
        }
        

        okhttp3.Call localVarCall = imageCloseCall(imageCloseParameters, _callback);
        return localVarCall;

    }

    /**
     * Closes a previously uploaded image.
     * 
     * @param imageCloseParameters An ImageCloseParameters object specifying the parameters of the action. (required)
     * @return ImageCloseResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ImageCloseResponse imageClose(ImageCloseParameters imageCloseParameters) throws ApiException {
        ApiResponse<ImageCloseResponse> localVarResp = imageCloseWithHttpInfo(imageCloseParameters);
        return localVarResp.getData();
    }

    /**
     * Closes a previously uploaded image.
     * 
     * @param imageCloseParameters An ImageCloseParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;ImageCloseResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImageCloseResponse> imageCloseWithHttpInfo(ImageCloseParameters imageCloseParameters) throws ApiException {
        okhttp3.Call localVarCall = imageCloseValidateBeforeCall(imageCloseParameters, null);
        Type localVarReturnType = new TypeToken<ImageCloseResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Closes a previously uploaded image. (asynchronously)
     * 
     * @param imageCloseParameters An ImageCloseParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageCloseAsync(ImageCloseParameters imageCloseParameters, final ApiCallback<ImageCloseResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = imageCloseValidateBeforeCall(imageCloseParameters, _callback);
        Type localVarReturnType = new TypeToken<ImageCloseResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for imageConvertColorDepth
     * @param imageConvertColorDepthParameters An ImageConvertColorDepthParameters object specifying the parameters for the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageConvertColorDepthCall(ImageConvertColorDepthParameters imageConvertColorDepthParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = imageConvertColorDepthParameters;

        // create path and map variables
        String localVarPath = "/api/image/ImageConvertColorDepth";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imageConvertColorDepthValidateBeforeCall(ImageConvertColorDepthParameters imageConvertColorDepthParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'imageConvertColorDepthParameters' is set
        if (imageConvertColorDepthParameters == null) {
            throw new ApiException("Missing the required parameter 'imageConvertColorDepthParameters' when calling imageConvertColorDepth(Async)");
        }
        

        okhttp3.Call localVarCall = imageConvertColorDepthCall(imageConvertColorDepthParameters, _callback);
        return localVarCall;

    }

    /**
     * Converts the color depth of a previously uploaded image.
     * 
     * @param imageConvertColorDepthParameters An ImageConvertColorDepthParameters object specifying the parameters for the action. (required)
     * @return ImageConvertColorDepthResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ImageConvertColorDepthResponse imageConvertColorDepth(ImageConvertColorDepthParameters imageConvertColorDepthParameters) throws ApiException {
        ApiResponse<ImageConvertColorDepthResponse> localVarResp = imageConvertColorDepthWithHttpInfo(imageConvertColorDepthParameters);
        return localVarResp.getData();
    }

    /**
     * Converts the color depth of a previously uploaded image.
     * 
     * @param imageConvertColorDepthParameters An ImageConvertColorDepthParameters object specifying the parameters for the action. (required)
     * @return ApiResponse&lt;ImageConvertColorDepthResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImageConvertColorDepthResponse> imageConvertColorDepthWithHttpInfo(ImageConvertColorDepthParameters imageConvertColorDepthParameters) throws ApiException {
        okhttp3.Call localVarCall = imageConvertColorDepthValidateBeforeCall(imageConvertColorDepthParameters, null);
        Type localVarReturnType = new TypeToken<ImageConvertColorDepthResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Converts the color depth of a previously uploaded image. (asynchronously)
     * 
     * @param imageConvertColorDepthParameters An ImageConvertColorDepthParameters object specifying the parameters for the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageConvertColorDepthAsync(ImageConvertColorDepthParameters imageConvertColorDepthParameters, final ApiCallback<ImageConvertColorDepthResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = imageConvertColorDepthValidateBeforeCall(imageConvertColorDepthParameters, _callback);
        Type localVarReturnType = new TypeToken<ImageConvertColorDepthResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for imageCrop
     * @param imageCropParameters An ImageCropParameters object specifying the parameters for the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageCropCall(ImageCropParameters imageCropParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = imageCropParameters;

        // create path and map variables
        String localVarPath = "/api/image/ImageCrop";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imageCropValidateBeforeCall(ImageCropParameters imageCropParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'imageCropParameters' is set
        if (imageCropParameters == null) {
            throw new ApiException("Missing the required parameter 'imageCropParameters' when calling imageCrop(Async)");
        }
        

        okhttp3.Call localVarCall = imageCropCall(imageCropParameters, _callback);
        return localVarCall;

    }

    /**
     * Crops a previously uploaded image.
     * 
     * @param imageCropParameters An ImageCropParameters object specifying the parameters for the action. (required)
     * @return ImageCropResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ImageCropResponse imageCrop(ImageCropParameters imageCropParameters) throws ApiException {
        ApiResponse<ImageCropResponse> localVarResp = imageCropWithHttpInfo(imageCropParameters);
        return localVarResp.getData();
    }

    /**
     * Crops a previously uploaded image.
     * 
     * @param imageCropParameters An ImageCropParameters object specifying the parameters for the action. (required)
     * @return ApiResponse&lt;ImageCropResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImageCropResponse> imageCropWithHttpInfo(ImageCropParameters imageCropParameters) throws ApiException {
        okhttp3.Call localVarCall = imageCropValidateBeforeCall(imageCropParameters, null);
        Type localVarReturnType = new TypeToken<ImageCropResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Crops a previously uploaded image. (asynchronously)
     * 
     * @param imageCropParameters An ImageCropParameters object specifying the parameters for the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageCropAsync(ImageCropParameters imageCropParameters, final ApiCallback<ImageCropResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = imageCropValidateBeforeCall(imageCropParameters, _callback);
        Type localVarReturnType = new TypeToken<ImageCropResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for imageDeletePage
     * @param imageDeletePageParameters An ImageDeletePageParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageDeletePageCall(ImageDeletePageParameters imageDeletePageParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = imageDeletePageParameters;

        // create path and map variables
        String localVarPath = "/api/image/ImageDeletePage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imageDeletePageValidateBeforeCall(ImageDeletePageParameters imageDeletePageParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'imageDeletePageParameters' is set
        if (imageDeletePageParameters == null) {
            throw new ApiException("Missing the required parameter 'imageDeletePageParameters' when calling imageDeletePage(Async)");
        }
        

        okhttp3.Call localVarCall = imageDeletePageCall(imageDeletePageParameters, _callback);
        return localVarCall;

    }

    /**
     * Deletes a page range from a previously uploaded image.
     * 
     * @param imageDeletePageParameters An ImageDeletePageParameters object specifying the parameters of the action. (required)
     * @return ImageDeletePageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ImageDeletePageResponse imageDeletePage(ImageDeletePageParameters imageDeletePageParameters) throws ApiException {
        ApiResponse<ImageDeletePageResponse> localVarResp = imageDeletePageWithHttpInfo(imageDeletePageParameters);
        return localVarResp.getData();
    }

    /**
     * Deletes a page range from a previously uploaded image.
     * 
     * @param imageDeletePageParameters An ImageDeletePageParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;ImageDeletePageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImageDeletePageResponse> imageDeletePageWithHttpInfo(ImageDeletePageParameters imageDeletePageParameters) throws ApiException {
        okhttp3.Call localVarCall = imageDeletePageValidateBeforeCall(imageDeletePageParameters, null);
        Type localVarReturnType = new TypeToken<ImageDeletePageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes a page range from a previously uploaded image. (asynchronously)
     * 
     * @param imageDeletePageParameters An ImageDeletePageParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageDeletePageAsync(ImageDeletePageParameters imageDeletePageParameters, final ApiCallback<ImageDeletePageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = imageDeletePageValidateBeforeCall(imageDeletePageParameters, _callback);
        Type localVarReturnType = new TypeToken<ImageDeletePageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for imageDetectBlankPages
     * @param imageDetectBlankPagesParameters An ImageDetectBlankPagesParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageDetectBlankPagesCall(ImageDetectBlankPagesParameters imageDetectBlankPagesParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = imageDetectBlankPagesParameters;

        // create path and map variables
        String localVarPath = "/api/image/ImageDetectBlankPages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imageDetectBlankPagesValidateBeforeCall(ImageDetectBlankPagesParameters imageDetectBlankPagesParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'imageDetectBlankPagesParameters' is set
        if (imageDetectBlankPagesParameters == null) {
            throw new ApiException("Missing the required parameter 'imageDetectBlankPagesParameters' when calling imageDetectBlankPages(Async)");
        }
        

        okhttp3.Call localVarCall = imageDetectBlankPagesCall(imageDetectBlankPagesParameters, _callback);
        return localVarCall;

    }

    /**
     * Detects the blank page(s) from a previously uploaded image and offers to remove them.
     * 
     * @param imageDetectBlankPagesParameters An ImageDetectBlankPagesParameters object specifying the parameters of the action. (required)
     * @return ImageDetectBlankPagesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ImageDetectBlankPagesResponse imageDetectBlankPages(ImageDetectBlankPagesParameters imageDetectBlankPagesParameters) throws ApiException {
        ApiResponse<ImageDetectBlankPagesResponse> localVarResp = imageDetectBlankPagesWithHttpInfo(imageDetectBlankPagesParameters);
        return localVarResp.getData();
    }

    /**
     * Detects the blank page(s) from a previously uploaded image and offers to remove them.
     * 
     * @param imageDetectBlankPagesParameters An ImageDetectBlankPagesParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;ImageDetectBlankPagesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImageDetectBlankPagesResponse> imageDetectBlankPagesWithHttpInfo(ImageDetectBlankPagesParameters imageDetectBlankPagesParameters) throws ApiException {
        okhttp3.Call localVarCall = imageDetectBlankPagesValidateBeforeCall(imageDetectBlankPagesParameters, null);
        Type localVarReturnType = new TypeToken<ImageDetectBlankPagesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Detects the blank page(s) from a previously uploaded image and offers to remove them. (asynchronously)
     * 
     * @param imageDetectBlankPagesParameters An ImageDetectBlankPagesParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageDetectBlankPagesAsync(ImageDetectBlankPagesParameters imageDetectBlankPagesParameters, final ApiCallback<ImageDetectBlankPagesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = imageDetectBlankPagesValidateBeforeCall(imageDetectBlankPagesParameters, _callback);
        Type localVarReturnType = new TypeToken<ImageDetectBlankPagesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for imageDetectColor
     * @param imageDetectColorParameters An ImageDetectColorParameters object specifying the parameters for the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageDetectColorCall(ImageDetectColorParameters imageDetectColorParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = imageDetectColorParameters;

        // create path and map variables
        String localVarPath = "/api/image/ImageDetectColor";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imageDetectColorValidateBeforeCall(ImageDetectColorParameters imageDetectColorParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'imageDetectColorParameters' is set
        if (imageDetectColorParameters == null) {
            throw new ApiException("Missing the required parameter 'imageDetectColorParameters' when calling imageDetectColor(Async)");
        }
        

        okhttp3.Call localVarCall = imageDetectColorCall(imageDetectColorParameters, _callback);
        return localVarCall;

    }

    /**
     * Performs color detection  on a previously uploaded image.
     * 
     * @param imageDetectColorParameters An ImageDetectColorParameters object specifying the parameters for the action. (required)
     * @return ImageDetectColorResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ImageDetectColorResponse imageDetectColor(ImageDetectColorParameters imageDetectColorParameters) throws ApiException {
        ApiResponse<ImageDetectColorResponse> localVarResp = imageDetectColorWithHttpInfo(imageDetectColorParameters);
        return localVarResp.getData();
    }

    /**
     * Performs color detection  on a previously uploaded image.
     * 
     * @param imageDetectColorParameters An ImageDetectColorParameters object specifying the parameters for the action. (required)
     * @return ApiResponse&lt;ImageDetectColorResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImageDetectColorResponse> imageDetectColorWithHttpInfo(ImageDetectColorParameters imageDetectColorParameters) throws ApiException {
        okhttp3.Call localVarCall = imageDetectColorValidateBeforeCall(imageDetectColorParameters, null);
        Type localVarReturnType = new TypeToken<ImageDetectColorResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Performs color detection  on a previously uploaded image. (asynchronously)
     * 
     * @param imageDetectColorParameters An ImageDetectColorParameters object specifying the parameters for the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageDetectColorAsync(ImageDetectColorParameters imageDetectColorParameters, final ApiCallback<ImageDetectColorResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = imageDetectColorValidateBeforeCall(imageDetectColorParameters, _callback);
        Type localVarReturnType = new TypeToken<ImageDetectColorResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for imageDetectPageOrientation
     * @param imageDetectPageOrientationParameters An ImagedetectPageOrientationParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageDetectPageOrientationCall(ImageDetectPageOrientationParameters imageDetectPageOrientationParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = imageDetectPageOrientationParameters;

        // create path and map variables
        String localVarPath = "/api/image/ImageDetectPageOrientation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imageDetectPageOrientationValidateBeforeCall(ImageDetectPageOrientationParameters imageDetectPageOrientationParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'imageDetectPageOrientationParameters' is set
        if (imageDetectPageOrientationParameters == null) {
            throw new ApiException("Missing the required parameter 'imageDetectPageOrientationParameters' when calling imageDetectPageOrientation(Async)");
        }
        

        okhttp3.Call localVarCall = imageDetectPageOrientationCall(imageDetectPageOrientationParameters, _callback);
        return localVarCall;

    }

    /**
     * Detects the orientation of the page(s) of a previously uploaded image and offers to automatically rotate them.
     * 
     * @param imageDetectPageOrientationParameters An ImagedetectPageOrientationParameters object specifying the parameters of the action. (required)
     * @return ImageDetectPageOrientationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ImageDetectPageOrientationResponse imageDetectPageOrientation(ImageDetectPageOrientationParameters imageDetectPageOrientationParameters) throws ApiException {
        ApiResponse<ImageDetectPageOrientationResponse> localVarResp = imageDetectPageOrientationWithHttpInfo(imageDetectPageOrientationParameters);
        return localVarResp.getData();
    }

    /**
     * Detects the orientation of the page(s) of a previously uploaded image and offers to automatically rotate them.
     * 
     * @param imageDetectPageOrientationParameters An ImagedetectPageOrientationParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;ImageDetectPageOrientationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImageDetectPageOrientationResponse> imageDetectPageOrientationWithHttpInfo(ImageDetectPageOrientationParameters imageDetectPageOrientationParameters) throws ApiException {
        okhttp3.Call localVarCall = imageDetectPageOrientationValidateBeforeCall(imageDetectPageOrientationParameters, null);
        Type localVarReturnType = new TypeToken<ImageDetectPageOrientationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Detects the orientation of the page(s) of a previously uploaded image and offers to automatically rotate them. (asynchronously)
     * 
     * @param imageDetectPageOrientationParameters An ImagedetectPageOrientationParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageDetectPageOrientationAsync(ImageDetectPageOrientationParameters imageDetectPageOrientationParameters, final ApiCallback<ImageDetectPageOrientationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = imageDetectPageOrientationValidateBeforeCall(imageDetectPageOrientationParameters, _callback);
        Type localVarReturnType = new TypeToken<ImageDetectPageOrientationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for imageFilter
     * @param imageFilterParameters An ImageFilterParameters object specifying the parameters for the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageFilterCall(ImageFilterParameters imageFilterParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = imageFilterParameters;

        // create path and map variables
        String localVarPath = "/api/image/ImageFilter";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imageFilterValidateBeforeCall(ImageFilterParameters imageFilterParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'imageFilterParameters' is set
        if (imageFilterParameters == null) {
            throw new ApiException("Missing the required parameter 'imageFilterParameters' when calling imageFilter(Async)");
        }
        

        okhttp3.Call localVarCall = imageFilterCall(imageFilterParameters, _callback);
        return localVarCall;

    }

    /**
     * Applies filters to a previously uploaded image.
     * 
     * @param imageFilterParameters An ImageFilterParameters object specifying the parameters for the action. (required)
     * @return ImageFilterResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ImageFilterResponse imageFilter(ImageFilterParameters imageFilterParameters) throws ApiException {
        ApiResponse<ImageFilterResponse> localVarResp = imageFilterWithHttpInfo(imageFilterParameters);
        return localVarResp.getData();
    }

    /**
     * Applies filters to a previously uploaded image.
     * 
     * @param imageFilterParameters An ImageFilterParameters object specifying the parameters for the action. (required)
     * @return ApiResponse&lt;ImageFilterResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImageFilterResponse> imageFilterWithHttpInfo(ImageFilterParameters imageFilterParameters) throws ApiException {
        okhttp3.Call localVarCall = imageFilterValidateBeforeCall(imageFilterParameters, null);
        Type localVarReturnType = new TypeToken<ImageFilterResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Applies filters to a previously uploaded image. (asynchronously)
     * 
     * @param imageFilterParameters An ImageFilterParameters object specifying the parameters for the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageFilterAsync(ImageFilterParameters imageFilterParameters, final ApiCallback<ImageFilterResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = imageFilterValidateBeforeCall(imageFilterParameters, _callback);
        Type localVarReturnType = new TypeToken<ImageFilterResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for imageGetPageThumbnail
     * @param imageGetPageThumbnailParameters A PDFGetPageThumbnailParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageGetPageThumbnailCall(ImageGetPageThumbnailParameters imageGetPageThumbnailParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = imageGetPageThumbnailParameters;

        // create path and map variables
        String localVarPath = "/api/image/ImageGetPageThumbnail";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imageGetPageThumbnailValidateBeforeCall(ImageGetPageThumbnailParameters imageGetPageThumbnailParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'imageGetPageThumbnailParameters' is set
        if (imageGetPageThumbnailParameters == null) {
            throw new ApiException("Missing the required parameter 'imageGetPageThumbnailParameters' when calling imageGetPageThumbnail(Async)");
        }
        

        okhttp3.Call localVarCall = imageGetPageThumbnailCall(imageGetPageThumbnailParameters, _callback);
        return localVarCall;

    }

    /**
     * Gets a thumbnail of each page within the provided page range from a previously uploaded image.
     * 
     * @param imageGetPageThumbnailParameters A PDFGetPageThumbnailParameters object specifying the parameters of the action. (required)
     * @return ImageGetPageThumbnailResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ImageGetPageThumbnailResponse imageGetPageThumbnail(ImageGetPageThumbnailParameters imageGetPageThumbnailParameters) throws ApiException {
        ApiResponse<ImageGetPageThumbnailResponse> localVarResp = imageGetPageThumbnailWithHttpInfo(imageGetPageThumbnailParameters);
        return localVarResp.getData();
    }

    /**
     * Gets a thumbnail of each page within the provided page range from a previously uploaded image.
     * 
     * @param imageGetPageThumbnailParameters A PDFGetPageThumbnailParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;ImageGetPageThumbnailResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImageGetPageThumbnailResponse> imageGetPageThumbnailWithHttpInfo(ImageGetPageThumbnailParameters imageGetPageThumbnailParameters) throws ApiException {
        okhttp3.Call localVarCall = imageGetPageThumbnailValidateBeforeCall(imageGetPageThumbnailParameters, null);
        Type localVarReturnType = new TypeToken<ImageGetPageThumbnailResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a thumbnail of each page within the provided page range from a previously uploaded image. (asynchronously)
     * 
     * @param imageGetPageThumbnailParameters A PDFGetPageThumbnailParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageGetPageThumbnailAsync(ImageGetPageThumbnailParameters imageGetPageThumbnailParameters, final ApiCallback<ImageGetPageThumbnailResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = imageGetPageThumbnailValidateBeforeCall(imageGetPageThumbnailParameters, _callback);
        Type localVarReturnType = new TypeToken<ImageGetPageThumbnailResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for imageGetSupportedFileExtensions
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageGetSupportedFileExtensionsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/image/ImageGetSupportedFileExtensions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imageGetSupportedFileExtensionsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = imageGetSupportedFileExtensionsCall(_callback);
        return localVarCall;

    }

    /**
     * Gets the supported file extensions by the image loading actions.
     * 
     * @return StringArrayResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public StringArrayResponse imageGetSupportedFileExtensions() throws ApiException {
        ApiResponse<StringArrayResponse> localVarResp = imageGetSupportedFileExtensionsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Gets the supported file extensions by the image loading actions.
     * 
     * @return ApiResponse&lt;StringArrayResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StringArrayResponse> imageGetSupportedFileExtensionsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = imageGetSupportedFileExtensionsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<StringArrayResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the supported file extensions by the image loading actions. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageGetSupportedFileExtensionsAsync(final ApiCallback<StringArrayResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = imageGetSupportedFileExtensionsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<StringArrayResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for imageLoad
     * @param loadImageFromByteArrayParameters A LoadImageFromByteArrayParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageLoadCall(LoadImageFromByteArrayParameters loadImageFromByteArrayParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = loadImageFromByteArrayParameters;

        // create path and map variables
        String localVarPath = "/api/image/ImageLoad";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imageLoadValidateBeforeCall(LoadImageFromByteArrayParameters loadImageFromByteArrayParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'loadImageFromByteArrayParameters' is set
        if (loadImageFromByteArrayParameters == null) {
            throw new ApiException("Missing the required parameter 'loadImageFromByteArrayParameters' when calling imageLoad(Async)");
        }
        

        okhttp3.Call localVarCall = imageLoadCall(loadImageFromByteArrayParameters, _callback);
        return localVarCall;

    }

    /**
     * Loads the provided image file.  Supported image formats can be retrieved by the GetSupportedImageFileExtensions action.
     * 
     * @param loadImageFromByteArrayParameters A LoadImageFromByteArrayParameters object specifying the parameters of the action. (required)
     * @return ImageLoadResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ImageLoadResponse imageLoad(LoadImageFromByteArrayParameters loadImageFromByteArrayParameters) throws ApiException {
        ApiResponse<ImageLoadResponse> localVarResp = imageLoadWithHttpInfo(loadImageFromByteArrayParameters);
        return localVarResp.getData();
    }

    /**
     * Loads the provided image file.  Supported image formats can be retrieved by the GetSupportedImageFileExtensions action.
     * 
     * @param loadImageFromByteArrayParameters A LoadImageFromByteArrayParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;ImageLoadResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImageLoadResponse> imageLoadWithHttpInfo(LoadImageFromByteArrayParameters loadImageFromByteArrayParameters) throws ApiException {
        okhttp3.Call localVarCall = imageLoadValidateBeforeCall(loadImageFromByteArrayParameters, null);
        Type localVarReturnType = new TypeToken<ImageLoadResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Loads the provided image file.  Supported image formats can be retrieved by the GetSupportedImageFileExtensions action. (asynchronously)
     * 
     * @param loadImageFromByteArrayParameters A LoadImageFromByteArrayParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageLoadAsync(LoadImageFromByteArrayParameters loadImageFromByteArrayParameters, final ApiCallback<ImageLoadResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = imageLoadValidateBeforeCall(loadImageFromByteArrayParameters, _callback);
        Type localVarReturnType = new TypeToken<ImageLoadResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for imageLoadMultipart
     * @param fileData The data of the document. (required)
     * @param loadImageParameters  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageLoadMultipartCall(File fileData, LoadImageParameters loadImageParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/image/ImageLoadMultipart";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (fileData != null) {
            localVarFormParams.put("fileData", fileData);
        }

        if (loadImageParameters != null) {
            localVarFormParams.put("loadImageParameters", loadImageParameters);
        }

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imageLoadMultipartValidateBeforeCall(File fileData, LoadImageParameters loadImageParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fileData' is set
        if (fileData == null) {
            throw new ApiException("Missing the required parameter 'fileData' when calling imageLoadMultipart(Async)");
        }
        

        okhttp3.Call localVarCall = imageLoadMultipartCall(fileData, loadImageParameters, _callback);
        return localVarCall;

    }

    /**
     * Loads the provided image file using Multipart Upload.  Supported image formats can be retrieved by the GetSupportedImageFileExtensions action.
     * 
     * @param fileData The data of the document. (required)
     * @param loadImageParameters  (optional)
     * @return ImageLoadResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ImageLoadResponse imageLoadMultipart(File fileData, LoadImageParameters loadImageParameters) throws ApiException {
        ApiResponse<ImageLoadResponse> localVarResp = imageLoadMultipartWithHttpInfo(fileData, loadImageParameters);
        return localVarResp.getData();
    }

    /**
     * Loads the provided image file using Multipart Upload.  Supported image formats can be retrieved by the GetSupportedImageFileExtensions action.
     * 
     * @param fileData The data of the document. (required)
     * @param loadImageParameters  (optional)
     * @return ApiResponse&lt;ImageLoadResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImageLoadResponse> imageLoadMultipartWithHttpInfo(File fileData, LoadImageParameters loadImageParameters) throws ApiException {
        okhttp3.Call localVarCall = imageLoadMultipartValidateBeforeCall(fileData, loadImageParameters, null);
        Type localVarReturnType = new TypeToken<ImageLoadResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Loads the provided image file using Multipart Upload.  Supported image formats can be retrieved by the GetSupportedImageFileExtensions action. (asynchronously)
     * 
     * @param fileData The data of the document. (required)
     * @param loadImageParameters  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageLoadMultipartAsync(File fileData, LoadImageParameters loadImageParameters, final ApiCallback<ImageLoadResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = imageLoadMultipartValidateBeforeCall(fileData, loadImageParameters, _callback);
        Type localVarReturnType = new TypeToken<ImageLoadResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for imageMICR
     * @param imageMICRParameters An ImageMICRParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageMICRCall(ImageMICRParameters imageMICRParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = imageMICRParameters;

        // create path and map variables
        String localVarPath = "/api/image/ImageMICR";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imageMICRValidateBeforeCall(ImageMICRParameters imageMICRParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'imageMICRParameters' is set
        if (imageMICRParameters == null) {
            throw new ApiException("Missing the required parameter 'imageMICRParameters' when calling imageMICR(Async)");
        }
        

        okhttp3.Call localVarCall = imageMICRCall(imageMICRParameters, _callback);
        return localVarCall;

    }

    /**
     * Performs MICR (Magnetic Ink Character Recognition) on a previously uploaded image.
     * 
     * @param imageMICRParameters An ImageMICRParameters object specifying the parameters of the action. (required)
     * @return ImageMICRResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ImageMICRResponse imageMICR(ImageMICRParameters imageMICRParameters) throws ApiException {
        ApiResponse<ImageMICRResponse> localVarResp = imageMICRWithHttpInfo(imageMICRParameters);
        return localVarResp.getData();
    }

    /**
     * Performs MICR (Magnetic Ink Character Recognition) on a previously uploaded image.
     * 
     * @param imageMICRParameters An ImageMICRParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;ImageMICRResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImageMICRResponse> imageMICRWithHttpInfo(ImageMICRParameters imageMICRParameters) throws ApiException {
        okhttp3.Call localVarCall = imageMICRValidateBeforeCall(imageMICRParameters, null);
        Type localVarReturnType = new TypeToken<ImageMICRResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Performs MICR (Magnetic Ink Character Recognition) on a previously uploaded image. (asynchronously)
     * 
     * @param imageMICRParameters An ImageMICRParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageMICRAsync(ImageMICRParameters imageMICRParameters, final ApiCallback<ImageMICRResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = imageMICRValidateBeforeCall(imageMICRParameters, _callback);
        Type localVarReturnType = new TypeToken<ImageMICRResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for imageReadBarcodes
     * @param imageReadBarcodesParameters An ImageReadBarcodesParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageReadBarcodesCall(ImageReadBarcodesParameters imageReadBarcodesParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = imageReadBarcodesParameters;

        // create path and map variables
        String localVarPath = "/api/image/ImageReadBarcodes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imageReadBarcodesValidateBeforeCall(ImageReadBarcodesParameters imageReadBarcodesParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'imageReadBarcodesParameters' is set
        if (imageReadBarcodesParameters == null) {
            throw new ApiException("Missing the required parameter 'imageReadBarcodesParameters' when calling imageReadBarcodes(Async)");
        }
        

        okhttp3.Call localVarCall = imageReadBarcodesCall(imageReadBarcodesParameters, _callback);
        return localVarCall;

    }

    /**
     * Reads barcodes from a previously uploaded image.
     * 
     * @param imageReadBarcodesParameters An ImageReadBarcodesParameters object specifying the parameters of the action. (required)
     * @return ReadBarcodesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ReadBarcodesResponse imageReadBarcodes(ImageReadBarcodesParameters imageReadBarcodesParameters) throws ApiException {
        ApiResponse<ReadBarcodesResponse> localVarResp = imageReadBarcodesWithHttpInfo(imageReadBarcodesParameters);
        return localVarResp.getData();
    }

    /**
     * Reads barcodes from a previously uploaded image.
     * 
     * @param imageReadBarcodesParameters An ImageReadBarcodesParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;ReadBarcodesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReadBarcodesResponse> imageReadBarcodesWithHttpInfo(ImageReadBarcodesParameters imageReadBarcodesParameters) throws ApiException {
        okhttp3.Call localVarCall = imageReadBarcodesValidateBeforeCall(imageReadBarcodesParameters, null);
        Type localVarReturnType = new TypeToken<ReadBarcodesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reads barcodes from a previously uploaded image. (asynchronously)
     * 
     * @param imageReadBarcodesParameters An ImageReadBarcodesParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageReadBarcodesAsync(ImageReadBarcodesParameters imageReadBarcodesParameters, final ApiCallback<ReadBarcodesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = imageReadBarcodesValidateBeforeCall(imageReadBarcodesParameters, _callback);
        Type localVarReturnType = new TypeToken<ReadBarcodesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for imageResize
     * @param imageResizeParameters An ImageResizeParameters object specifying the parameters for the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageResizeCall(ImageResizeParameters imageResizeParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = imageResizeParameters;

        // create path and map variables
        String localVarPath = "/api/image/ImageResize";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imageResizeValidateBeforeCall(ImageResizeParameters imageResizeParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'imageResizeParameters' is set
        if (imageResizeParameters == null) {
            throw new ApiException("Missing the required parameter 'imageResizeParameters' when calling imageResize(Async)");
        }
        

        okhttp3.Call localVarCall = imageResizeCall(imageResizeParameters, _callback);
        return localVarCall;

    }

    /**
     * Resizes a previously uploaded image.
     * 
     * @param imageResizeParameters An ImageResizeParameters object specifying the parameters for the action. (required)
     * @return ImageResizeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ImageResizeResponse imageResize(ImageResizeParameters imageResizeParameters) throws ApiException {
        ApiResponse<ImageResizeResponse> localVarResp = imageResizeWithHttpInfo(imageResizeParameters);
        return localVarResp.getData();
    }

    /**
     * Resizes a previously uploaded image.
     * 
     * @param imageResizeParameters An ImageResizeParameters object specifying the parameters for the action. (required)
     * @return ApiResponse&lt;ImageResizeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImageResizeResponse> imageResizeWithHttpInfo(ImageResizeParameters imageResizeParameters) throws ApiException {
        okhttp3.Call localVarCall = imageResizeValidateBeforeCall(imageResizeParameters, null);
        Type localVarReturnType = new TypeToken<ImageResizeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Resizes a previously uploaded image. (asynchronously)
     * 
     * @param imageResizeParameters An ImageResizeParameters object specifying the parameters for the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageResizeAsync(ImageResizeParameters imageResizeParameters, final ApiCallback<ImageResizeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = imageResizeValidateBeforeCall(imageResizeParameters, _callback);
        Type localVarReturnType = new TypeToken<ImageResizeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for imageRotate
     * @param imageRotateParameters An ImageRotateParameters object specifying the parameters for the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageRotateCall(ImageRotateParameters imageRotateParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = imageRotateParameters;

        // create path and map variables
        String localVarPath = "/api/image/ImageRotate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imageRotateValidateBeforeCall(ImageRotateParameters imageRotateParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'imageRotateParameters' is set
        if (imageRotateParameters == null) {
            throw new ApiException("Missing the required parameter 'imageRotateParameters' when calling imageRotate(Async)");
        }
        

        okhttp3.Call localVarCall = imageRotateCall(imageRotateParameters, _callback);
        return localVarCall;

    }

    /**
     * Rotates and/or flips a previously uploaded image.
     * 
     * @param imageRotateParameters An ImageRotateParameters object specifying the parameters for the action. (required)
     * @return ImageRotateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ImageRotateResponse imageRotate(ImageRotateParameters imageRotateParameters) throws ApiException {
        ApiResponse<ImageRotateResponse> localVarResp = imageRotateWithHttpInfo(imageRotateParameters);
        return localVarResp.getData();
    }

    /**
     * Rotates and/or flips a previously uploaded image.
     * 
     * @param imageRotateParameters An ImageRotateParameters object specifying the parameters for the action. (required)
     * @return ApiResponse&lt;ImageRotateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImageRotateResponse> imageRotateWithHttpInfo(ImageRotateParameters imageRotateParameters) throws ApiException {
        okhttp3.Call localVarCall = imageRotateValidateBeforeCall(imageRotateParameters, null);
        Type localVarReturnType = new TypeToken<ImageRotateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Rotates and/or flips a previously uploaded image. (asynchronously)
     * 
     * @param imageRotateParameters An ImageRotateParameters object specifying the parameters for the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageRotateAsync(ImageRotateParameters imageRotateParameters, final ApiCallback<ImageRotateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = imageRotateValidateBeforeCall(imageRotateParameters, _callback);
        Type localVarReturnType = new TypeToken<ImageRotateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for imageSaveAsJPEG
     * @param imageSaveAsJPEGParameters An ImageSaveAsJPEGParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageSaveAsJPEGCall(ImageSaveAsJPEGParameters imageSaveAsJPEGParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = imageSaveAsJPEGParameters;

        // create path and map variables
        String localVarPath = "/api/image/ImageSaveAsJPEG";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imageSaveAsJPEGValidateBeforeCall(ImageSaveAsJPEGParameters imageSaveAsJPEGParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'imageSaveAsJPEGParameters' is set
        if (imageSaveAsJPEGParameters == null) {
            throw new ApiException("Missing the required parameter 'imageSaveAsJPEGParameters' when calling imageSaveAsJPEG(Async)");
        }
        

        okhttp3.Call localVarCall = imageSaveAsJPEGCall(imageSaveAsJPEGParameters, _callback);
        return localVarCall;

    }

    /**
     * Saves a previously uploaded image as JPEG, and sends the file data in a JSON-serialized object.
     * 
     * @param imageSaveAsJPEGParameters An ImageSaveAsJPEGParameters object specifying the parameters of the action. (required)
     * @return ImageSaveAsJPEGResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ImageSaveAsJPEGResponse imageSaveAsJPEG(ImageSaveAsJPEGParameters imageSaveAsJPEGParameters) throws ApiException {
        ApiResponse<ImageSaveAsJPEGResponse> localVarResp = imageSaveAsJPEGWithHttpInfo(imageSaveAsJPEGParameters);
        return localVarResp.getData();
    }

    /**
     * Saves a previously uploaded image as JPEG, and sends the file data in a JSON-serialized object.
     * 
     * @param imageSaveAsJPEGParameters An ImageSaveAsJPEGParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;ImageSaveAsJPEGResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImageSaveAsJPEGResponse> imageSaveAsJPEGWithHttpInfo(ImageSaveAsJPEGParameters imageSaveAsJPEGParameters) throws ApiException {
        okhttp3.Call localVarCall = imageSaveAsJPEGValidateBeforeCall(imageSaveAsJPEGParameters, null);
        Type localVarReturnType = new TypeToken<ImageSaveAsJPEGResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Saves a previously uploaded image as JPEG, and sends the file data in a JSON-serialized object. (asynchronously)
     * 
     * @param imageSaveAsJPEGParameters An ImageSaveAsJPEGParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageSaveAsJPEGAsync(ImageSaveAsJPEGParameters imageSaveAsJPEGParameters, final ApiCallback<ImageSaveAsJPEGResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = imageSaveAsJPEGValidateBeforeCall(imageSaveAsJPEGParameters, _callback);
        Type localVarReturnType = new TypeToken<ImageSaveAsJPEGResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for imageSaveAsJPEGFile
     * @param imageSaveAsJPEGParameters An ImageSaveAsJPEGParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageSaveAsJPEGFileCall(ImageSaveAsJPEGParameters imageSaveAsJPEGParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = imageSaveAsJPEGParameters;

        // create path and map variables
        String localVarPath = "/api/image/ImageSaveAsJPEGFile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imageSaveAsJPEGFileValidateBeforeCall(ImageSaveAsJPEGParameters imageSaveAsJPEGParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'imageSaveAsJPEGParameters' is set
        if (imageSaveAsJPEGParameters == null) {
            throw new ApiException("Missing the required parameter 'imageSaveAsJPEGParameters' when calling imageSaveAsJPEGFile(Async)");
        }
        

        okhttp3.Call localVarCall = imageSaveAsJPEGFileCall(imageSaveAsJPEGParameters, _callback);
        return localVarCall;

    }

    /**
     * Saves a previously uploaded image as JPEG, and streams the file binary data to the response (this is the most efficient download method).
     * 
     * @param imageSaveAsJPEGParameters An ImageSaveAsJPEGParameters object specifying the parameters of the action. (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public File imageSaveAsJPEGFile(ImageSaveAsJPEGParameters imageSaveAsJPEGParameters) throws ApiException {
        ApiResponse<File> localVarResp = imageSaveAsJPEGFileWithHttpInfo(imageSaveAsJPEGParameters);
        return localVarResp.getData();
    }

    /**
     * Saves a previously uploaded image as JPEG, and streams the file binary data to the response (this is the most efficient download method).
     * 
     * @param imageSaveAsJPEGParameters An ImageSaveAsJPEGParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> imageSaveAsJPEGFileWithHttpInfo(ImageSaveAsJPEGParameters imageSaveAsJPEGParameters) throws ApiException {
        okhttp3.Call localVarCall = imageSaveAsJPEGFileValidateBeforeCall(imageSaveAsJPEGParameters, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Saves a previously uploaded image as JPEG, and streams the file binary data to the response (this is the most efficient download method). (asynchronously)
     * 
     * @param imageSaveAsJPEGParameters An ImageSaveAsJPEGParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageSaveAsJPEGFileAsync(ImageSaveAsJPEGParameters imageSaveAsJPEGParameters, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = imageSaveAsJPEGFileValidateBeforeCall(imageSaveAsJPEGParameters, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for imageSaveAsPDF
     * @param imageSaveAsPDFParameters An ImagesaveAsPDFParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageSaveAsPDFCall(ImageSaveAsPDFParameters imageSaveAsPDFParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = imageSaveAsPDFParameters;

        // create path and map variables
        String localVarPath = "/api/image/ImageSaveAsPDF";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imageSaveAsPDFValidateBeforeCall(ImageSaveAsPDFParameters imageSaveAsPDFParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'imageSaveAsPDFParameters' is set
        if (imageSaveAsPDFParameters == null) {
            throw new ApiException("Missing the required parameter 'imageSaveAsPDFParameters' when calling imageSaveAsPDF(Async)");
        }
        

        okhttp3.Call localVarCall = imageSaveAsPDFCall(imageSaveAsPDFParameters, _callback);
        return localVarCall;

    }

    /**
     * Saves a previously uploaded image as PDF, and sends the file data in a JSON-serialized object.
     * 
     * @param imageSaveAsPDFParameters An ImagesaveAsPDFParameters object specifying the parameters of the action. (required)
     * @return ImageSaveAsPDFResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ImageSaveAsPDFResponse imageSaveAsPDF(ImageSaveAsPDFParameters imageSaveAsPDFParameters) throws ApiException {
        ApiResponse<ImageSaveAsPDFResponse> localVarResp = imageSaveAsPDFWithHttpInfo(imageSaveAsPDFParameters);
        return localVarResp.getData();
    }

    /**
     * Saves a previously uploaded image as PDF, and sends the file data in a JSON-serialized object.
     * 
     * @param imageSaveAsPDFParameters An ImagesaveAsPDFParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;ImageSaveAsPDFResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImageSaveAsPDFResponse> imageSaveAsPDFWithHttpInfo(ImageSaveAsPDFParameters imageSaveAsPDFParameters) throws ApiException {
        okhttp3.Call localVarCall = imageSaveAsPDFValidateBeforeCall(imageSaveAsPDFParameters, null);
        Type localVarReturnType = new TypeToken<ImageSaveAsPDFResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Saves a previously uploaded image as PDF, and sends the file data in a JSON-serialized object. (asynchronously)
     * 
     * @param imageSaveAsPDFParameters An ImagesaveAsPDFParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageSaveAsPDFAsync(ImageSaveAsPDFParameters imageSaveAsPDFParameters, final ApiCallback<ImageSaveAsPDFResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = imageSaveAsPDFValidateBeforeCall(imageSaveAsPDFParameters, _callback);
        Type localVarReturnType = new TypeToken<ImageSaveAsPDFResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for imageSaveAsPDFFile
     * @param imageSaveAsPDFParameters An ImagesaveAsPDFParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageSaveAsPDFFileCall(ImageSaveAsPDFParameters imageSaveAsPDFParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = imageSaveAsPDFParameters;

        // create path and map variables
        String localVarPath = "/api/image/ImageSaveAsPDFFile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imageSaveAsPDFFileValidateBeforeCall(ImageSaveAsPDFParameters imageSaveAsPDFParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'imageSaveAsPDFParameters' is set
        if (imageSaveAsPDFParameters == null) {
            throw new ApiException("Missing the required parameter 'imageSaveAsPDFParameters' when calling imageSaveAsPDFFile(Async)");
        }
        

        okhttp3.Call localVarCall = imageSaveAsPDFFileCall(imageSaveAsPDFParameters, _callback);
        return localVarCall;

    }

    /**
     * Saves a previously uploaded image as PDF, and streams the file binary data to the response (this is the most efficient download method).
     * 
     * @param imageSaveAsPDFParameters An ImagesaveAsPDFParameters object specifying the parameters of the action. (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public File imageSaveAsPDFFile(ImageSaveAsPDFParameters imageSaveAsPDFParameters) throws ApiException {
        ApiResponse<File> localVarResp = imageSaveAsPDFFileWithHttpInfo(imageSaveAsPDFParameters);
        return localVarResp.getData();
    }

    /**
     * Saves a previously uploaded image as PDF, and streams the file binary data to the response (this is the most efficient download method).
     * 
     * @param imageSaveAsPDFParameters An ImagesaveAsPDFParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> imageSaveAsPDFFileWithHttpInfo(ImageSaveAsPDFParameters imageSaveAsPDFParameters) throws ApiException {
        okhttp3.Call localVarCall = imageSaveAsPDFFileValidateBeforeCall(imageSaveAsPDFParameters, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Saves a previously uploaded image as PDF, and streams the file binary data to the response (this is the most efficient download method). (asynchronously)
     * 
     * @param imageSaveAsPDFParameters An ImagesaveAsPDFParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageSaveAsPDFFileAsync(ImageSaveAsPDFParameters imageSaveAsPDFParameters, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = imageSaveAsPDFFileValidateBeforeCall(imageSaveAsPDFParameters, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for imageSaveAsPDFMRC
     * @param imageSaveAsPDFMRCParameters An ImagesaveAsPDFMRCParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageSaveAsPDFMRCCall(ImageSaveAsPDFMRCParameters imageSaveAsPDFMRCParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = imageSaveAsPDFMRCParameters;

        // create path and map variables
        String localVarPath = "/api/image/ImageSaveAsPDFMRC";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imageSaveAsPDFMRCValidateBeforeCall(ImageSaveAsPDFMRCParameters imageSaveAsPDFMRCParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'imageSaveAsPDFMRCParameters' is set
        if (imageSaveAsPDFMRCParameters == null) {
            throw new ApiException("Missing the required parameter 'imageSaveAsPDFMRCParameters' when calling imageSaveAsPDFMRC(Async)");
        }
        

        okhttp3.Call localVarCall = imageSaveAsPDFMRCCall(imageSaveAsPDFMRCParameters, _callback);
        return localVarCall;

    }

    /**
     * Saves a previously uploaded image as PDF using MRC compression, and sends the file data in a JSON-serialized object.
     * 
     * @param imageSaveAsPDFMRCParameters An ImagesaveAsPDFMRCParameters object specifying the parameters of the action. (required)
     * @return ImageSaveAsPDFMRCResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ImageSaveAsPDFMRCResponse imageSaveAsPDFMRC(ImageSaveAsPDFMRCParameters imageSaveAsPDFMRCParameters) throws ApiException {
        ApiResponse<ImageSaveAsPDFMRCResponse> localVarResp = imageSaveAsPDFMRCWithHttpInfo(imageSaveAsPDFMRCParameters);
        return localVarResp.getData();
    }

    /**
     * Saves a previously uploaded image as PDF using MRC compression, and sends the file data in a JSON-serialized object.
     * 
     * @param imageSaveAsPDFMRCParameters An ImagesaveAsPDFMRCParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;ImageSaveAsPDFMRCResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImageSaveAsPDFMRCResponse> imageSaveAsPDFMRCWithHttpInfo(ImageSaveAsPDFMRCParameters imageSaveAsPDFMRCParameters) throws ApiException {
        okhttp3.Call localVarCall = imageSaveAsPDFMRCValidateBeforeCall(imageSaveAsPDFMRCParameters, null);
        Type localVarReturnType = new TypeToken<ImageSaveAsPDFMRCResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Saves a previously uploaded image as PDF using MRC compression, and sends the file data in a JSON-serialized object. (asynchronously)
     * 
     * @param imageSaveAsPDFMRCParameters An ImagesaveAsPDFMRCParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageSaveAsPDFMRCAsync(ImageSaveAsPDFMRCParameters imageSaveAsPDFMRCParameters, final ApiCallback<ImageSaveAsPDFMRCResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = imageSaveAsPDFMRCValidateBeforeCall(imageSaveAsPDFMRCParameters, _callback);
        Type localVarReturnType = new TypeToken<ImageSaveAsPDFMRCResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for imageSaveAsPDFMRCFile
     * @param imageSaveAsPDFMRCParameters An ImagesaveAsPDFMRCParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageSaveAsPDFMRCFileCall(ImageSaveAsPDFMRCParameters imageSaveAsPDFMRCParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = imageSaveAsPDFMRCParameters;

        // create path and map variables
        String localVarPath = "/api/image/ImageSaveAsPDFMRCFile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imageSaveAsPDFMRCFileValidateBeforeCall(ImageSaveAsPDFMRCParameters imageSaveAsPDFMRCParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'imageSaveAsPDFMRCParameters' is set
        if (imageSaveAsPDFMRCParameters == null) {
            throw new ApiException("Missing the required parameter 'imageSaveAsPDFMRCParameters' when calling imageSaveAsPDFMRCFile(Async)");
        }
        

        okhttp3.Call localVarCall = imageSaveAsPDFMRCFileCall(imageSaveAsPDFMRCParameters, _callback);
        return localVarCall;

    }

    /**
     * Saves a previously uploaded image as PDF using MRC compression, and streams the file binary data to the response (this is the most efficient download method).
     * 
     * @param imageSaveAsPDFMRCParameters An ImagesaveAsPDFMRCParameters object specifying the parameters of the action. (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public File imageSaveAsPDFMRCFile(ImageSaveAsPDFMRCParameters imageSaveAsPDFMRCParameters) throws ApiException {
        ApiResponse<File> localVarResp = imageSaveAsPDFMRCFileWithHttpInfo(imageSaveAsPDFMRCParameters);
        return localVarResp.getData();
    }

    /**
     * Saves a previously uploaded image as PDF using MRC compression, and streams the file binary data to the response (this is the most efficient download method).
     * 
     * @param imageSaveAsPDFMRCParameters An ImagesaveAsPDFMRCParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> imageSaveAsPDFMRCFileWithHttpInfo(ImageSaveAsPDFMRCParameters imageSaveAsPDFMRCParameters) throws ApiException {
        okhttp3.Call localVarCall = imageSaveAsPDFMRCFileValidateBeforeCall(imageSaveAsPDFMRCParameters, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Saves a previously uploaded image as PDF using MRC compression, and streams the file binary data to the response (this is the most efficient download method). (asynchronously)
     * 
     * @param imageSaveAsPDFMRCParameters An ImagesaveAsPDFMRCParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageSaveAsPDFMRCFileAsync(ImageSaveAsPDFMRCParameters imageSaveAsPDFMRCParameters, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = imageSaveAsPDFMRCFileValidateBeforeCall(imageSaveAsPDFMRCParameters, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for imageSaveAsPNG
     * @param imageSaveAsPNGParameters An ImageSaveAsPNGParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageSaveAsPNGCall(ImageSaveAsPNGParameters imageSaveAsPNGParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = imageSaveAsPNGParameters;

        // create path and map variables
        String localVarPath = "/api/image/ImageSaveAsPNG";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imageSaveAsPNGValidateBeforeCall(ImageSaveAsPNGParameters imageSaveAsPNGParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'imageSaveAsPNGParameters' is set
        if (imageSaveAsPNGParameters == null) {
            throw new ApiException("Missing the required parameter 'imageSaveAsPNGParameters' when calling imageSaveAsPNG(Async)");
        }
        

        okhttp3.Call localVarCall = imageSaveAsPNGCall(imageSaveAsPNGParameters, _callback);
        return localVarCall;

    }

    /**
     * Saves a previously uploaded image as PNG, and sends the file data in a JSON-serialized object.
     * 
     * @param imageSaveAsPNGParameters An ImageSaveAsPNGParameters object specifying the parameters of the action. (required)
     * @return ImageSaveAsPNGResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ImageSaveAsPNGResponse imageSaveAsPNG(ImageSaveAsPNGParameters imageSaveAsPNGParameters) throws ApiException {
        ApiResponse<ImageSaveAsPNGResponse> localVarResp = imageSaveAsPNGWithHttpInfo(imageSaveAsPNGParameters);
        return localVarResp.getData();
    }

    /**
     * Saves a previously uploaded image as PNG, and sends the file data in a JSON-serialized object.
     * 
     * @param imageSaveAsPNGParameters An ImageSaveAsPNGParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;ImageSaveAsPNGResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImageSaveAsPNGResponse> imageSaveAsPNGWithHttpInfo(ImageSaveAsPNGParameters imageSaveAsPNGParameters) throws ApiException {
        okhttp3.Call localVarCall = imageSaveAsPNGValidateBeforeCall(imageSaveAsPNGParameters, null);
        Type localVarReturnType = new TypeToken<ImageSaveAsPNGResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Saves a previously uploaded image as PNG, and sends the file data in a JSON-serialized object. (asynchronously)
     * 
     * @param imageSaveAsPNGParameters An ImageSaveAsPNGParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageSaveAsPNGAsync(ImageSaveAsPNGParameters imageSaveAsPNGParameters, final ApiCallback<ImageSaveAsPNGResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = imageSaveAsPNGValidateBeforeCall(imageSaveAsPNGParameters, _callback);
        Type localVarReturnType = new TypeToken<ImageSaveAsPNGResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for imageSaveAsPNGFile
     * @param imageSaveAsPNGParameters An ImageSaveAsPNGParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageSaveAsPNGFileCall(ImageSaveAsPNGParameters imageSaveAsPNGParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = imageSaveAsPNGParameters;

        // create path and map variables
        String localVarPath = "/api/image/ImageSaveAsPNGFile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imageSaveAsPNGFileValidateBeforeCall(ImageSaveAsPNGParameters imageSaveAsPNGParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'imageSaveAsPNGParameters' is set
        if (imageSaveAsPNGParameters == null) {
            throw new ApiException("Missing the required parameter 'imageSaveAsPNGParameters' when calling imageSaveAsPNGFile(Async)");
        }
        

        okhttp3.Call localVarCall = imageSaveAsPNGFileCall(imageSaveAsPNGParameters, _callback);
        return localVarCall;

    }

    /**
     * Saves a previously uploaded image as PNG, and streams the file binary data to the response (this is the most efficient download method).
     * 
     * @param imageSaveAsPNGParameters An ImageSaveAsPNGParameters object specifying the parameters of the action. (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public File imageSaveAsPNGFile(ImageSaveAsPNGParameters imageSaveAsPNGParameters) throws ApiException {
        ApiResponse<File> localVarResp = imageSaveAsPNGFileWithHttpInfo(imageSaveAsPNGParameters);
        return localVarResp.getData();
    }

    /**
     * Saves a previously uploaded image as PNG, and streams the file binary data to the response (this is the most efficient download method).
     * 
     * @param imageSaveAsPNGParameters An ImageSaveAsPNGParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> imageSaveAsPNGFileWithHttpInfo(ImageSaveAsPNGParameters imageSaveAsPNGParameters) throws ApiException {
        okhttp3.Call localVarCall = imageSaveAsPNGFileValidateBeforeCall(imageSaveAsPNGParameters, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Saves a previously uploaded image as PNG, and streams the file binary data to the response (this is the most efficient download method). (asynchronously)
     * 
     * @param imageSaveAsPNGParameters An ImageSaveAsPNGParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageSaveAsPNGFileAsync(ImageSaveAsPNGParameters imageSaveAsPNGParameters, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = imageSaveAsPNGFileValidateBeforeCall(imageSaveAsPNGParameters, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for imageSaveAsTIFF
     * @param imageSaveAsTIFFParameters An ImageSaveAsTIFFParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageSaveAsTIFFCall(ImageSaveAsTIFFParameters imageSaveAsTIFFParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = imageSaveAsTIFFParameters;

        // create path and map variables
        String localVarPath = "/api/image/ImageSaveAsTIFF";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imageSaveAsTIFFValidateBeforeCall(ImageSaveAsTIFFParameters imageSaveAsTIFFParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'imageSaveAsTIFFParameters' is set
        if (imageSaveAsTIFFParameters == null) {
            throw new ApiException("Missing the required parameter 'imageSaveAsTIFFParameters' when calling imageSaveAsTIFF(Async)");
        }
        

        okhttp3.Call localVarCall = imageSaveAsTIFFCall(imageSaveAsTIFFParameters, _callback);
        return localVarCall;

    }

    /**
     * Saves a previously uploaded image as TIFF, and sends the file data in a JSON-serialized object.
     * 
     * @param imageSaveAsTIFFParameters An ImageSaveAsTIFFParameters object specifying the parameters of the action. (required)
     * @return ImageSaveAsTIFFResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ImageSaveAsTIFFResponse imageSaveAsTIFF(ImageSaveAsTIFFParameters imageSaveAsTIFFParameters) throws ApiException {
        ApiResponse<ImageSaveAsTIFFResponse> localVarResp = imageSaveAsTIFFWithHttpInfo(imageSaveAsTIFFParameters);
        return localVarResp.getData();
    }

    /**
     * Saves a previously uploaded image as TIFF, and sends the file data in a JSON-serialized object.
     * 
     * @param imageSaveAsTIFFParameters An ImageSaveAsTIFFParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;ImageSaveAsTIFFResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImageSaveAsTIFFResponse> imageSaveAsTIFFWithHttpInfo(ImageSaveAsTIFFParameters imageSaveAsTIFFParameters) throws ApiException {
        okhttp3.Call localVarCall = imageSaveAsTIFFValidateBeforeCall(imageSaveAsTIFFParameters, null);
        Type localVarReturnType = new TypeToken<ImageSaveAsTIFFResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Saves a previously uploaded image as TIFF, and sends the file data in a JSON-serialized object. (asynchronously)
     * 
     * @param imageSaveAsTIFFParameters An ImageSaveAsTIFFParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageSaveAsTIFFAsync(ImageSaveAsTIFFParameters imageSaveAsTIFFParameters, final ApiCallback<ImageSaveAsTIFFResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = imageSaveAsTIFFValidateBeforeCall(imageSaveAsTIFFParameters, _callback);
        Type localVarReturnType = new TypeToken<ImageSaveAsTIFFResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for imageSaveAsTIFFFile
     * @param imageSaveAsTIFFParameters An ImageSaveAsTIFFParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageSaveAsTIFFFileCall(ImageSaveAsTIFFParameters imageSaveAsTIFFParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = imageSaveAsTIFFParameters;

        // create path and map variables
        String localVarPath = "/api/image/ImageSaveAsTIFFFile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imageSaveAsTIFFFileValidateBeforeCall(ImageSaveAsTIFFParameters imageSaveAsTIFFParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'imageSaveAsTIFFParameters' is set
        if (imageSaveAsTIFFParameters == null) {
            throw new ApiException("Missing the required parameter 'imageSaveAsTIFFParameters' when calling imageSaveAsTIFFFile(Async)");
        }
        

        okhttp3.Call localVarCall = imageSaveAsTIFFFileCall(imageSaveAsTIFFParameters, _callback);
        return localVarCall;

    }

    /**
     * Saves a previously uploaded image as TIFF, and streams the file binary data to the response (this is the most efficient download method).
     * 
     * @param imageSaveAsTIFFParameters An ImageSaveAsTIFFParameters object specifying the parameters of the action. (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public File imageSaveAsTIFFFile(ImageSaveAsTIFFParameters imageSaveAsTIFFParameters) throws ApiException {
        ApiResponse<File> localVarResp = imageSaveAsTIFFFileWithHttpInfo(imageSaveAsTIFFParameters);
        return localVarResp.getData();
    }

    /**
     * Saves a previously uploaded image as TIFF, and streams the file binary data to the response (this is the most efficient download method).
     * 
     * @param imageSaveAsTIFFParameters An ImageSaveAsTIFFParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> imageSaveAsTIFFFileWithHttpInfo(ImageSaveAsTIFFParameters imageSaveAsTIFFParameters) throws ApiException {
        okhttp3.Call localVarCall = imageSaveAsTIFFFileValidateBeforeCall(imageSaveAsTIFFParameters, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Saves a previously uploaded image as TIFF, and streams the file binary data to the response (this is the most efficient download method). (asynchronously)
     * 
     * @param imageSaveAsTIFFParameters An ImageSaveAsTIFFParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageSaveAsTIFFFileAsync(ImageSaveAsTIFFParameters imageSaveAsTIFFParameters, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = imageSaveAsTIFFFileValidateBeforeCall(imageSaveAsTIFFParameters, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for imageSaveAsTIFFMultipage
     * @param imageSaveAsTIFFMultipageParameters An ImageSaveAsTIFFMultipageParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageSaveAsTIFFMultipageCall(ImageSaveAsTIFFMultipageParameters imageSaveAsTIFFMultipageParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = imageSaveAsTIFFMultipageParameters;

        // create path and map variables
        String localVarPath = "/api/image/ImageSaveAsTIFFMultipage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imageSaveAsTIFFMultipageValidateBeforeCall(ImageSaveAsTIFFMultipageParameters imageSaveAsTIFFMultipageParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'imageSaveAsTIFFMultipageParameters' is set
        if (imageSaveAsTIFFMultipageParameters == null) {
            throw new ApiException("Missing the required parameter 'imageSaveAsTIFFMultipageParameters' when calling imageSaveAsTIFFMultipage(Async)");
        }
        

        okhttp3.Call localVarCall = imageSaveAsTIFFMultipageCall(imageSaveAsTIFFMultipageParameters, _callback);
        return localVarCall;

    }

    /**
     * Saves a previously uploaded image as multipage TIFF, and sends the file data in a JSON-serialized object.
     * 
     * @param imageSaveAsTIFFMultipageParameters An ImageSaveAsTIFFMultipageParameters object specifying the parameters of the action. (required)
     * @return ImageSaveAsTIFFMultipageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ImageSaveAsTIFFMultipageResponse imageSaveAsTIFFMultipage(ImageSaveAsTIFFMultipageParameters imageSaveAsTIFFMultipageParameters) throws ApiException {
        ApiResponse<ImageSaveAsTIFFMultipageResponse> localVarResp = imageSaveAsTIFFMultipageWithHttpInfo(imageSaveAsTIFFMultipageParameters);
        return localVarResp.getData();
    }

    /**
     * Saves a previously uploaded image as multipage TIFF, and sends the file data in a JSON-serialized object.
     * 
     * @param imageSaveAsTIFFMultipageParameters An ImageSaveAsTIFFMultipageParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;ImageSaveAsTIFFMultipageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImageSaveAsTIFFMultipageResponse> imageSaveAsTIFFMultipageWithHttpInfo(ImageSaveAsTIFFMultipageParameters imageSaveAsTIFFMultipageParameters) throws ApiException {
        okhttp3.Call localVarCall = imageSaveAsTIFFMultipageValidateBeforeCall(imageSaveAsTIFFMultipageParameters, null);
        Type localVarReturnType = new TypeToken<ImageSaveAsTIFFMultipageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Saves a previously uploaded image as multipage TIFF, and sends the file data in a JSON-serialized object. (asynchronously)
     * 
     * @param imageSaveAsTIFFMultipageParameters An ImageSaveAsTIFFMultipageParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageSaveAsTIFFMultipageAsync(ImageSaveAsTIFFMultipageParameters imageSaveAsTIFFMultipageParameters, final ApiCallback<ImageSaveAsTIFFMultipageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = imageSaveAsTIFFMultipageValidateBeforeCall(imageSaveAsTIFFMultipageParameters, _callback);
        Type localVarReturnType = new TypeToken<ImageSaveAsTIFFMultipageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for imageSaveAsTIFFMultipageFile
     * @param imageSaveAsTIFFMultipageParameters An ImageSaveAsTIFFMultipageParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageSaveAsTIFFMultipageFileCall(ImageSaveAsTIFFMultipageParameters imageSaveAsTIFFMultipageParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = imageSaveAsTIFFMultipageParameters;

        // create path and map variables
        String localVarPath = "/api/image/ImageSaveAsTIFFMultipageFile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imageSaveAsTIFFMultipageFileValidateBeforeCall(ImageSaveAsTIFFMultipageParameters imageSaveAsTIFFMultipageParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'imageSaveAsTIFFMultipageParameters' is set
        if (imageSaveAsTIFFMultipageParameters == null) {
            throw new ApiException("Missing the required parameter 'imageSaveAsTIFFMultipageParameters' when calling imageSaveAsTIFFMultipageFile(Async)");
        }
        

        okhttp3.Call localVarCall = imageSaveAsTIFFMultipageFileCall(imageSaveAsTIFFMultipageParameters, _callback);
        return localVarCall;

    }

    /**
     * Saves a previously uploaded image as multipage TIFF, and streams the file binary data to the response (this is the most efficient download method).
     * 
     * @param imageSaveAsTIFFMultipageParameters An ImageSaveAsTIFFMultipageParameters object specifying the parameters of the action. (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public File imageSaveAsTIFFMultipageFile(ImageSaveAsTIFFMultipageParameters imageSaveAsTIFFMultipageParameters) throws ApiException {
        ApiResponse<File> localVarResp = imageSaveAsTIFFMultipageFileWithHttpInfo(imageSaveAsTIFFMultipageParameters);
        return localVarResp.getData();
    }

    /**
     * Saves a previously uploaded image as multipage TIFF, and streams the file binary data to the response (this is the most efficient download method).
     * 
     * @param imageSaveAsTIFFMultipageParameters An ImageSaveAsTIFFMultipageParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> imageSaveAsTIFFMultipageFileWithHttpInfo(ImageSaveAsTIFFMultipageParameters imageSaveAsTIFFMultipageParameters) throws ApiException {
        okhttp3.Call localVarCall = imageSaveAsTIFFMultipageFileValidateBeforeCall(imageSaveAsTIFFMultipageParameters, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Saves a previously uploaded image as multipage TIFF, and streams the file binary data to the response (this is the most efficient download method). (asynchronously)
     * 
     * @param imageSaveAsTIFFMultipageParameters An ImageSaveAsTIFFMultipageParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageSaveAsTIFFMultipageFileAsync(ImageSaveAsTIFFMultipageParameters imageSaveAsTIFFMultipageParameters, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = imageSaveAsTIFFMultipageFileValidateBeforeCall(imageSaveAsTIFFMultipageParameters, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for imageSwapPages
     * @param imageSwapPagesParameters An ImageSwapPagesParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageSwapPagesCall(ImageSwapPagesParameters imageSwapPagesParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = imageSwapPagesParameters;

        // create path and map variables
        String localVarPath = "/api/image/ImageSwapPages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imageSwapPagesValidateBeforeCall(ImageSwapPagesParameters imageSwapPagesParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'imageSwapPagesParameters' is set
        if (imageSwapPagesParameters == null) {
            throw new ApiException("Missing the required parameter 'imageSwapPagesParameters' when calling imageSwapPages(Async)");
        }
        

        okhttp3.Call localVarCall = imageSwapPagesCall(imageSwapPagesParameters, _callback);
        return localVarCall;

    }

    /**
     * Swaps two pages from a previously uploaded image.
     * 
     * @param imageSwapPagesParameters An ImageSwapPagesParameters object specifying the parameters of the action. (required)
     * @return ImageSwapPagesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ImageSwapPagesResponse imageSwapPages(ImageSwapPagesParameters imageSwapPagesParameters) throws ApiException {
        ApiResponse<ImageSwapPagesResponse> localVarResp = imageSwapPagesWithHttpInfo(imageSwapPagesParameters);
        return localVarResp.getData();
    }

    /**
     * Swaps two pages from a previously uploaded image.
     * 
     * @param imageSwapPagesParameters An ImageSwapPagesParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;ImageSwapPagesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImageSwapPagesResponse> imageSwapPagesWithHttpInfo(ImageSwapPagesParameters imageSwapPagesParameters) throws ApiException {
        okhttp3.Call localVarCall = imageSwapPagesValidateBeforeCall(imageSwapPagesParameters, null);
        Type localVarReturnType = new TypeToken<ImageSwapPagesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Swaps two pages from a previously uploaded image. (asynchronously)
     * 
     * @param imageSwapPagesParameters An ImageSwapPagesParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageSwapPagesAsync(ImageSwapPagesParameters imageSwapPagesParameters, final ApiCallback<ImageSwapPagesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = imageSwapPagesValidateBeforeCall(imageSwapPagesParameters, _callback);
        Type localVarReturnType = new TypeToken<ImageSwapPagesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}

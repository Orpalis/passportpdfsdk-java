/*
 * PassportPDF API
 * Another brick in the cloud
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.IntegerResponse;
import org.openapitools.client.model.StringResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PassportPdfApplicationManagerApi {
    private ApiClient localVarApiClient;

    public PassportPdfApplicationManagerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PassportPdfApplicationManagerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for passportPDFApplicationManagerGetApplicationDownloadLink
     * @param applicationId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call passportPDFApplicationManagerGetApplicationDownloadLinkCall(String applicationId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/passportpdfapplicationmanager/PassportPDFApplicationManagerGetApplicationDownloadLink";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (applicationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("applicationId", applicationId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call passportPDFApplicationManagerGetApplicationDownloadLinkValidateBeforeCall(String applicationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling passportPDFApplicationManagerGetApplicationDownloadLink(Async)");
        }
        

        okhttp3.Call localVarCall = passportPDFApplicationManagerGetApplicationDownloadLinkCall(applicationId, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param applicationId  (required)
     * @return StringResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public StringResponse passportPDFApplicationManagerGetApplicationDownloadLink(String applicationId) throws ApiException {
        ApiResponse<StringResponse> localVarResp = passportPDFApplicationManagerGetApplicationDownloadLinkWithHttpInfo(applicationId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param applicationId  (required)
     * @return ApiResponse&lt;StringResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StringResponse> passportPDFApplicationManagerGetApplicationDownloadLinkWithHttpInfo(String applicationId) throws ApiException {
        okhttp3.Call localVarCall = passportPDFApplicationManagerGetApplicationDownloadLinkValidateBeforeCall(applicationId, null);
        Type localVarReturnType = new TypeToken<StringResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param applicationId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call passportPDFApplicationManagerGetApplicationDownloadLinkAsync(String applicationId, final ApiCallback<StringResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = passportPDFApplicationManagerGetApplicationDownloadLinkValidateBeforeCall(applicationId, _callback);
        Type localVarReturnType = new TypeToken<StringResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for passportPDFApplicationManagerGetApplicationLatestVersion
     * @param applicationId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call passportPDFApplicationManagerGetApplicationLatestVersionCall(String applicationId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/passportpdfapplicationmanager/PassportPDFApplicationManagerGetApplicationLatestVersion";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (applicationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("applicationId", applicationId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call passportPDFApplicationManagerGetApplicationLatestVersionValidateBeforeCall(String applicationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling passportPDFApplicationManagerGetApplicationLatestVersion(Async)");
        }
        

        okhttp3.Call localVarCall = passportPDFApplicationManagerGetApplicationLatestVersionCall(applicationId, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param applicationId  (required)
     * @return StringResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public StringResponse passportPDFApplicationManagerGetApplicationLatestVersion(String applicationId) throws ApiException {
        ApiResponse<StringResponse> localVarResp = passportPDFApplicationManagerGetApplicationLatestVersionWithHttpInfo(applicationId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param applicationId  (required)
     * @return ApiResponse&lt;StringResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StringResponse> passportPDFApplicationManagerGetApplicationLatestVersionWithHttpInfo(String applicationId) throws ApiException {
        okhttp3.Call localVarCall = passportPDFApplicationManagerGetApplicationLatestVersionValidateBeforeCall(applicationId, null);
        Type localVarReturnType = new TypeToken<StringResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param applicationId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call passportPDFApplicationManagerGetApplicationLatestVersionAsync(String applicationId, final ApiCallback<StringResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = passportPDFApplicationManagerGetApplicationLatestVersionValidateBeforeCall(applicationId, _callback);
        Type localVarReturnType = new TypeToken<StringResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for passportPDFApplicationManagerGetApplicationMinimumSupportedVersion
     * @param applicationId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call passportPDFApplicationManagerGetApplicationMinimumSupportedVersionCall(String applicationId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/passportpdfapplicationmanager/PassportPDFApplicationManagerGetApplicationMinimumSupportedVersion";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (applicationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("applicationId", applicationId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call passportPDFApplicationManagerGetApplicationMinimumSupportedVersionValidateBeforeCall(String applicationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling passportPDFApplicationManagerGetApplicationMinimumSupportedVersion(Async)");
        }
        

        okhttp3.Call localVarCall = passportPDFApplicationManagerGetApplicationMinimumSupportedVersionCall(applicationId, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param applicationId  (required)
     * @return StringResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public StringResponse passportPDFApplicationManagerGetApplicationMinimumSupportedVersion(String applicationId) throws ApiException {
        ApiResponse<StringResponse> localVarResp = passportPDFApplicationManagerGetApplicationMinimumSupportedVersionWithHttpInfo(applicationId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param applicationId  (required)
     * @return ApiResponse&lt;StringResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StringResponse> passportPDFApplicationManagerGetApplicationMinimumSupportedVersionWithHttpInfo(String applicationId) throws ApiException {
        okhttp3.Call localVarCall = passportPDFApplicationManagerGetApplicationMinimumSupportedVersionValidateBeforeCall(applicationId, null);
        Type localVarReturnType = new TypeToken<StringResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param applicationId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call passportPDFApplicationManagerGetApplicationMinimumSupportedVersionAsync(String applicationId, final ApiCallback<StringResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = passportPDFApplicationManagerGetApplicationMinimumSupportedVersionValidateBeforeCall(applicationId, _callback);
        Type localVarReturnType = new TypeToken<StringResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for passportPDFApplicationManagerGetMaxClientThreads
     * @param applicationId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call passportPDFApplicationManagerGetMaxClientThreadsCall(String applicationId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/passportpdfapplicationmanager/PassportPDFApplicationManagerGetMaxClientThreads";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (applicationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("applicationId", applicationId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call passportPDFApplicationManagerGetMaxClientThreadsValidateBeforeCall(String applicationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling passportPDFApplicationManagerGetMaxClientThreads(Async)");
        }
        

        okhttp3.Call localVarCall = passportPDFApplicationManagerGetMaxClientThreadsCall(applicationId, _callback);
        return localVarCall;

    }

    /**
     * Gets the maximum number of threads to be used simultaneously by a client application.
     * 
     * @param applicationId  (required)
     * @return IntegerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public IntegerResponse passportPDFApplicationManagerGetMaxClientThreads(String applicationId) throws ApiException {
        ApiResponse<IntegerResponse> localVarResp = passportPDFApplicationManagerGetMaxClientThreadsWithHttpInfo(applicationId);
        return localVarResp.getData();
    }

    /**
     * Gets the maximum number of threads to be used simultaneously by a client application.
     * 
     * @param applicationId  (required)
     * @return ApiResponse&lt;IntegerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IntegerResponse> passportPDFApplicationManagerGetMaxClientThreadsWithHttpInfo(String applicationId) throws ApiException {
        okhttp3.Call localVarCall = passportPDFApplicationManagerGetMaxClientThreadsValidateBeforeCall(applicationId, null);
        Type localVarReturnType = new TypeToken<IntegerResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the maximum number of threads to be used simultaneously by a client application. (asynchronously)
     * 
     * @param applicationId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call passportPDFApplicationManagerGetMaxClientThreadsAsync(String applicationId, final ApiCallback<IntegerResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = passportPDFApplicationManagerGetMaxClientThreadsValidateBeforeCall(applicationId, _callback);
        Type localVarReturnType = new TypeToken<IntegerResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}

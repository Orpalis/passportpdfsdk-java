/*
 * PassportPDF API
 *       Introduction:    PassportPDF API is a REST API that lets you perform complex operations on documents and images easily.  You may consume the API by using our.NET SDK (other platforms / languages are soon to come), or any REST client by sending your requests to the appropriate endpoints.   A list of all the available endpoints can be found on the API reference page at https://passportpdfapi.com/references/api/index.html        Authentication:    Each available operation has a predefined cost, expressed as a number of tokens.  These tokens are deducted from your \"passport,\" which has a unique identifier that acts as an API key. This key is, therefore, required to be provided with each request for the latter to be honored(except if the operation does not have a cost, typically when you request a simple data with a GET).  Your key must be included in the header of the request, under the name \"X-PassportPdf-API-Key.\"  If you are using the.NET SDK, you can either set your key in the ApiKey property of your API instance(PdfApi or ImageApi, for example) or set it globally in the GlobalConfiguration instance if you want to set it once for the whole life cycle of your application.          Communication with the API:    All the available actions are listed on the API reference page, as previously mentioned.  There are several different controllers, i.e., routes, which categorize the actions.For example, you may use the PDF controller(\"/api/pdf\" route) to perform PDF - related operations, and the Image controller(\"/api/image\") for images.  Each action defines what kind of parameters(if any) is expected, and what kind of response is served.Parameters and responses are represented using data models, or \"schemas,\" and are listed in the \"Schemas\" section of the reference.   Parameters and response models of a given action are both prefixed by the controller name, the action name, and \"Parameters\" / \"Response,\" e.g. \"api/pdf/reduce\" respectively receives and serves a PdfReduceParameters and PdfReduceResponse models.  Using the .NET SDK, you will find the objects to interact with the different controllers in the PassportPDF.Api namespace and all the schemas in the PassportPDF.Model namespace.        Processing documents:    Each document manipulation starts with importing the file onto the API.  The LoadDocument action of the PDF controller lets you import your document as a PDF.  Note that the GetPDFImportSupportedFileExtensions action of the same controller will let you know all the different types of files that you may import as a PDF. LoadDocument responds with a JSON-serialized PdfLoadDocumentResponse model, which contains a \"FileId\" property.This identifier is required for the API to know about your document for further manipulations, hence the presence of a \"FileId\" property in the PdfReduceParameters schema (and many other parameters schemas). To download the changes made to a file, you need, of course, to download the new version of the file from the API.  To save your document as a PDF, you will need to use the SaveDocument action of the PDF controller and provide a PdfSaveDocumentParameters data model that contains the identifier of your file.        Errors:    Conventional HTTP response codes are used to indicate the success or failure of an API request.   The Error data model also defines some information about an error that occurred on the API.   Each response model has an Error in its definition, and its sole existence in the serialized response - which should thus always be checked - indicates that something went wrong.  Among the information given by the Error schema, \"ResultCode\" specifies a value of the \"PassportPDFStatus\" enumeration, that defines a first level of error information. \"InternalErrorId\" defines a unique identifier for the error, which comes very handy for us to troubleshoot any issue you may encounter quickly.        Efficiency considerations:    Multipart upload/download is available and lets you directly stream a file to/from the API.  In the PDF controller, LoadDocument/LoadDocumentMultipart and SaveDocument/SaveDocumentToFile may be used to upload/download a document using respectively binary data serialization and streaming multipart HTTP requests.  The second approach should be favored when dealing with large files, as it will be much more efficient in that context.  
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import org.openapitools.client.model.PdfAnnotateParameters;
import org.openapitools.client.model.PdfAnnotateResponse;
import org.openapitools.client.model.PdfAutoDeskewParameters;
import org.openapitools.client.model.PdfAutoDeskewResponse;
import org.openapitools.client.model.PdfClearPageParameters;
import org.openapitools.client.model.PdfClearPageResponse;
import org.openapitools.client.model.PdfClonePageParameters;
import org.openapitools.client.model.PdfClonePageResponse;
import org.openapitools.client.model.PdfCloseDocumentParameters;
import org.openapitools.client.model.PdfCloseDocumentResponse;
import org.openapitools.client.model.PdfConvertToPDFAParameters;
import org.openapitools.client.model.PdfConvertToPDFAResponse;
import org.openapitools.client.model.PdfDeletePageParameters;
import org.openapitools.client.model.PdfDeletePageResponse;
import org.openapitools.client.model.PdfDetectPageOrientationParameters;
import org.openapitools.client.model.PdfDetectPageOrientationResponse;
import org.openapitools.client.model.PdfDigiSignParameters;
import org.openapitools.client.model.PdfDigiSignResponse;
import org.openapitools.client.model.PdfDrawImageParameters;
import org.openapitools.client.model.PdfDrawImageResponse;
import org.openapitools.client.model.PdfExtractPageParameters;
import org.openapitools.client.model.PdfExtractPageResponse;
import org.openapitools.client.model.PdfExtractTextParameters;
import org.openapitools.client.model.PdfExtractTextResponse;
import org.openapitools.client.model.PdfFlattenParameters;
import org.openapitools.client.model.PdfFlattenResponse;
import org.openapitools.client.model.PdfGetInfoParameters;
import org.openapitools.client.model.PdfGetInfoResponse;
import org.openapitools.client.model.PdfGetPageThumbnailParameters;
import org.openapitools.client.model.PdfGetPageThumbnailResponse;
import org.openapitools.client.model.PdfInsertImageParameters;
import org.openapitools.client.model.PdfInsertImageResponse;
import org.openapitools.client.model.PdfInsertNewPageParameters;
import org.openapitools.client.model.PdfInsertNewPageResponse;
import org.openapitools.client.model.PdfInsertPageNumberParameters;
import org.openapitools.client.model.PdfInsertPageNumberResponse;
import org.openapitools.client.model.PdfInsertTextParameters;
import org.openapitools.client.model.PdfInsertTextResponse;
import org.openapitools.client.model.PdfLinearizeParameters;
import org.openapitools.client.model.PdfLinearizeResponse;
import org.openapitools.client.model.PdfLoadDocumentFromByteArrayParameters;
import org.openapitools.client.model.PdfLoadDocumentParameters;
import org.openapitools.client.model.PdfLoadDocumentResponse;
import org.openapitools.client.model.PdfMergePagesParameters;
import org.openapitools.client.model.PdfMergePagesResponse;
import org.openapitools.client.model.PdfMergeParameters;
import org.openapitools.client.model.PdfMergeResponse;
import org.openapitools.client.model.PdfMovePageParameters;
import org.openapitools.client.model.PdfMovePageResponse;
import org.openapitools.client.model.PdfOCRParameters;
import org.openapitools.client.model.PdfOCRResponse;
import org.openapitools.client.model.PdfProtectParameters;
import org.openapitools.client.model.PdfProtectResponse;
import org.openapitools.client.model.PdfReadBarcodesParameters;
import org.openapitools.client.model.PdfReduceParameters;
import org.openapitools.client.model.PdfReduceResponse;
import org.openapitools.client.model.PdfRemovePageFormFieldsParameters;
import org.openapitools.client.model.PdfRemovePageFormFieldsResponse;
import org.openapitools.client.model.PdfReorderPagesParameters;
import org.openapitools.client.model.PdfReorderPagesResponse;
import org.openapitools.client.model.PdfRepairDocumentParameters;
import org.openapitools.client.model.PdfRepairDocumentResponse;
import org.openapitools.client.model.PdfRotatePageStandardParameters;
import org.openapitools.client.model.PdfRotatePageStandardResponse;
import org.openapitools.client.model.PdfSaveAsJPEGParameters;
import org.openapitools.client.model.PdfSaveAsJPEGResponse;
import org.openapitools.client.model.PdfSaveAsPNGParameters;
import org.openapitools.client.model.PdfSaveAsPNGResponse;
import org.openapitools.client.model.PdfSaveAsTIFFMultipageParameters;
import org.openapitools.client.model.PdfSaveAsTIFFMultipageResponse;
import org.openapitools.client.model.PdfSaveAsTIFFParameters;
import org.openapitools.client.model.PdfSaveAsTIFFResponse;
import org.openapitools.client.model.PdfSaveDocumentParameters;
import org.openapitools.client.model.PdfSaveDocumentResponse;
import org.openapitools.client.model.PdfScalePageParameters;
import org.openapitools.client.model.PdfScalePageResponse;
import org.openapitools.client.model.PdfSetInfoParameters;
import org.openapitools.client.model.PdfSetInfoResponse;
import org.openapitools.client.model.PdfSetInitialViewParameters;
import org.openapitools.client.model.PdfSetInitialViewResponse;
import org.openapitools.client.model.PdfSetPageBoxParameters;
import org.openapitools.client.model.PdfSetPageBoxResponse;
import org.openapitools.client.model.PdfSetPasswordParameters;
import org.openapitools.client.model.PdfSetPasswordResponse;
import org.openapitools.client.model.PdfSplitParameters;
import org.openapitools.client.model.PdfSplitResponse;
import org.openapitools.client.model.PdfSwapPagesParameters;
import org.openapitools.client.model.PdfSwapPagesResponse;
import org.openapitools.client.model.PdfUnprotectParameters;
import org.openapitools.client.model.PdfUnprotectResponse;
import org.openapitools.client.model.ReadBarcodesResponse;
import org.openapitools.client.model.StringArrayResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PdfApi {
    private ApiClient localVarApiClient;

    public PdfApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PdfApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for annotate
     * @param pdfAnnotateParameters A PdfAnnotateParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call annotateCall(PdfAnnotateParameters pdfAnnotateParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = pdfAnnotateParameters;

        // create path and map variables
        String localVarPath = "/api/pdf/Annotate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call annotateValidateBeforeCall(PdfAnnotateParameters pdfAnnotateParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pdfAnnotateParameters' is set
        if (pdfAnnotateParameters == null) {
            throw new ApiException("Missing the required parameter 'pdfAnnotateParameters' when calling annotate(Async)");
        }
        

        okhttp3.Call localVarCall = annotateCall(pdfAnnotateParameters, _callback);
        return localVarCall;

    }

    /**
     * Annotates a previously uploaded document.
     * 
     * @param pdfAnnotateParameters A PdfAnnotateParameters object specifying the parameters of the action. (required)
     * @return PdfAnnotateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PdfAnnotateResponse annotate(PdfAnnotateParameters pdfAnnotateParameters) throws ApiException {
        ApiResponse<PdfAnnotateResponse> localVarResp = annotateWithHttpInfo(pdfAnnotateParameters);
        return localVarResp.getData();
    }

    /**
     * Annotates a previously uploaded document.
     * 
     * @param pdfAnnotateParameters A PdfAnnotateParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;PdfAnnotateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PdfAnnotateResponse> annotateWithHttpInfo(PdfAnnotateParameters pdfAnnotateParameters) throws ApiException {
        okhttp3.Call localVarCall = annotateValidateBeforeCall(pdfAnnotateParameters, null);
        Type localVarReturnType = new TypeToken<PdfAnnotateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Annotates a previously uploaded document. (asynchronously)
     * 
     * @param pdfAnnotateParameters A PdfAnnotateParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call annotateAsync(PdfAnnotateParameters pdfAnnotateParameters, final ApiCallback<PdfAnnotateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = annotateValidateBeforeCall(pdfAnnotateParameters, _callback);
        Type localVarReturnType = new TypeToken<PdfAnnotateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for autoDeskew
     * @param pdfAutoDeskewParameters A PdfAutoDeskewParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call autoDeskewCall(PdfAutoDeskewParameters pdfAutoDeskewParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = pdfAutoDeskewParameters;

        // create path and map variables
        String localVarPath = "/api/pdf/AutoDeskew";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call autoDeskewValidateBeforeCall(PdfAutoDeskewParameters pdfAutoDeskewParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pdfAutoDeskewParameters' is set
        if (pdfAutoDeskewParameters == null) {
            throw new ApiException("Missing the required parameter 'pdfAutoDeskewParameters' when calling autoDeskew(Async)");
        }
        

        okhttp3.Call localVarCall = autoDeskewCall(pdfAutoDeskewParameters, _callback);
        return localVarCall;

    }

    /**
     * Performs auto deskew on a page range of a previously uploaded document.
     * 
     * @param pdfAutoDeskewParameters A PdfAutoDeskewParameters object specifying the parameters of the action. (required)
     * @return PdfAutoDeskewResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PdfAutoDeskewResponse autoDeskew(PdfAutoDeskewParameters pdfAutoDeskewParameters) throws ApiException {
        ApiResponse<PdfAutoDeskewResponse> localVarResp = autoDeskewWithHttpInfo(pdfAutoDeskewParameters);
        return localVarResp.getData();
    }

    /**
     * Performs auto deskew on a page range of a previously uploaded document.
     * 
     * @param pdfAutoDeskewParameters A PdfAutoDeskewParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;PdfAutoDeskewResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PdfAutoDeskewResponse> autoDeskewWithHttpInfo(PdfAutoDeskewParameters pdfAutoDeskewParameters) throws ApiException {
        okhttp3.Call localVarCall = autoDeskewValidateBeforeCall(pdfAutoDeskewParameters, null);
        Type localVarReturnType = new TypeToken<PdfAutoDeskewResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Performs auto deskew on a page range of a previously uploaded document. (asynchronously)
     * 
     * @param pdfAutoDeskewParameters A PdfAutoDeskewParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call autoDeskewAsync(PdfAutoDeskewParameters pdfAutoDeskewParameters, final ApiCallback<PdfAutoDeskewResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = autoDeskewValidateBeforeCall(pdfAutoDeskewParameters, _callback);
        Type localVarReturnType = new TypeToken<PdfAutoDeskewResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clearPage
     * @param pdfClearPageParameters A PdfClearPageParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clearPageCall(PdfClearPageParameters pdfClearPageParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = pdfClearPageParameters;

        // create path and map variables
        String localVarPath = "/api/pdf/ClearPage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clearPageValidateBeforeCall(PdfClearPageParameters pdfClearPageParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pdfClearPageParameters' is set
        if (pdfClearPageParameters == null) {
            throw new ApiException("Missing the required parameter 'pdfClearPageParameters' when calling clearPage(Async)");
        }
        

        okhttp3.Call localVarCall = clearPageCall(pdfClearPageParameters, _callback);
        return localVarCall;

    }

    /**
     * Clears a page range from a previously uploaded document.
     * 
     * @param pdfClearPageParameters A PdfClearPageParameters object specifying the parameters of the action. (required)
     * @return PdfClearPageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PdfClearPageResponse clearPage(PdfClearPageParameters pdfClearPageParameters) throws ApiException {
        ApiResponse<PdfClearPageResponse> localVarResp = clearPageWithHttpInfo(pdfClearPageParameters);
        return localVarResp.getData();
    }

    /**
     * Clears a page range from a previously uploaded document.
     * 
     * @param pdfClearPageParameters A PdfClearPageParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;PdfClearPageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PdfClearPageResponse> clearPageWithHttpInfo(PdfClearPageParameters pdfClearPageParameters) throws ApiException {
        okhttp3.Call localVarCall = clearPageValidateBeforeCall(pdfClearPageParameters, null);
        Type localVarReturnType = new TypeToken<PdfClearPageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Clears a page range from a previously uploaded document. (asynchronously)
     * 
     * @param pdfClearPageParameters A PdfClearPageParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clearPageAsync(PdfClearPageParameters pdfClearPageParameters, final ApiCallback<PdfClearPageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = clearPageValidateBeforeCall(pdfClearPageParameters, _callback);
        Type localVarReturnType = new TypeToken<PdfClearPageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clonePage
     * @param pdfClonePageParameters A PdfClonePageParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clonePageCall(PdfClonePageParameters pdfClonePageParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = pdfClonePageParameters;

        // create path and map variables
        String localVarPath = "/api/pdf/ClonePage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clonePageValidateBeforeCall(PdfClonePageParameters pdfClonePageParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pdfClonePageParameters' is set
        if (pdfClonePageParameters == null) {
            throw new ApiException("Missing the required parameter 'pdfClonePageParameters' when calling clonePage(Async)");
        }
        

        okhttp3.Call localVarCall = clonePageCall(pdfClonePageParameters, _callback);
        return localVarCall;

    }

    /**
     * Clones specific pages from a previously uploaded document to another previously uploaded document.
     * 
     * @param pdfClonePageParameters A PdfClonePageParameters object specifying the parameters of the action. (required)
     * @return PdfClonePageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PdfClonePageResponse clonePage(PdfClonePageParameters pdfClonePageParameters) throws ApiException {
        ApiResponse<PdfClonePageResponse> localVarResp = clonePageWithHttpInfo(pdfClonePageParameters);
        return localVarResp.getData();
    }

    /**
     * Clones specific pages from a previously uploaded document to another previously uploaded document.
     * 
     * @param pdfClonePageParameters A PdfClonePageParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;PdfClonePageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PdfClonePageResponse> clonePageWithHttpInfo(PdfClonePageParameters pdfClonePageParameters) throws ApiException {
        okhttp3.Call localVarCall = clonePageValidateBeforeCall(pdfClonePageParameters, null);
        Type localVarReturnType = new TypeToken<PdfClonePageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Clones specific pages from a previously uploaded document to another previously uploaded document. (asynchronously)
     * 
     * @param pdfClonePageParameters A PdfClonePageParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clonePageAsync(PdfClonePageParameters pdfClonePageParameters, final ApiCallback<PdfClonePageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = clonePageValidateBeforeCall(pdfClonePageParameters, _callback);
        Type localVarReturnType = new TypeToken<PdfClonePageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for closePDF
     * @param pdfCloseDocumentParameters A PdfCloseDocumentParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call closePDFCall(PdfCloseDocumentParameters pdfCloseDocumentParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = pdfCloseDocumentParameters;

        // create path and map variables
        String localVarPath = "/api/pdf/ClosePDF";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call closePDFValidateBeforeCall(PdfCloseDocumentParameters pdfCloseDocumentParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pdfCloseDocumentParameters' is set
        if (pdfCloseDocumentParameters == null) {
            throw new ApiException("Missing the required parameter 'pdfCloseDocumentParameters' when calling closePDF(Async)");
        }
        

        okhttp3.Call localVarCall = closePDFCall(pdfCloseDocumentParameters, _callback);
        return localVarCall;

    }

    /**
     * Closes a previously uploaded document.
     * 
     * @param pdfCloseDocumentParameters A PdfCloseDocumentParameters object specifying the parameters of the action. (required)
     * @return PdfCloseDocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PdfCloseDocumentResponse closePDF(PdfCloseDocumentParameters pdfCloseDocumentParameters) throws ApiException {
        ApiResponse<PdfCloseDocumentResponse> localVarResp = closePDFWithHttpInfo(pdfCloseDocumentParameters);
        return localVarResp.getData();
    }

    /**
     * Closes a previously uploaded document.
     * 
     * @param pdfCloseDocumentParameters A PdfCloseDocumentParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;PdfCloseDocumentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PdfCloseDocumentResponse> closePDFWithHttpInfo(PdfCloseDocumentParameters pdfCloseDocumentParameters) throws ApiException {
        okhttp3.Call localVarCall = closePDFValidateBeforeCall(pdfCloseDocumentParameters, null);
        Type localVarReturnType = new TypeToken<PdfCloseDocumentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Closes a previously uploaded document. (asynchronously)
     * 
     * @param pdfCloseDocumentParameters A PdfCloseDocumentParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call closePDFAsync(PdfCloseDocumentParameters pdfCloseDocumentParameters, final ApiCallback<PdfCloseDocumentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = closePDFValidateBeforeCall(pdfCloseDocumentParameters, _callback);
        Type localVarReturnType = new TypeToken<PdfCloseDocumentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for convertToPDFA
     * @param pdfConvertToPDFAParameters A PdfConvertToPDFAParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call convertToPDFACall(PdfConvertToPDFAParameters pdfConvertToPDFAParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = pdfConvertToPDFAParameters;

        // create path and map variables
        String localVarPath = "/api/pdf/ConvertToPDFA";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call convertToPDFAValidateBeforeCall(PdfConvertToPDFAParameters pdfConvertToPDFAParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pdfConvertToPDFAParameters' is set
        if (pdfConvertToPDFAParameters == null) {
            throw new ApiException("Missing the required parameter 'pdfConvertToPDFAParameters' when calling convertToPDFA(Async)");
        }
        

        okhttp3.Call localVarCall = convertToPDFACall(pdfConvertToPDFAParameters, _callback);
        return localVarCall;

    }

    /**
     * Converts a previously uploaded document to PDF/A.
     * 
     * @param pdfConvertToPDFAParameters A PdfConvertToPDFAParameters object specifying the parameters of the action. (required)
     * @return PdfConvertToPDFAResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PdfConvertToPDFAResponse convertToPDFA(PdfConvertToPDFAParameters pdfConvertToPDFAParameters) throws ApiException {
        ApiResponse<PdfConvertToPDFAResponse> localVarResp = convertToPDFAWithHttpInfo(pdfConvertToPDFAParameters);
        return localVarResp.getData();
    }

    /**
     * Converts a previously uploaded document to PDF/A.
     * 
     * @param pdfConvertToPDFAParameters A PdfConvertToPDFAParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;PdfConvertToPDFAResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PdfConvertToPDFAResponse> convertToPDFAWithHttpInfo(PdfConvertToPDFAParameters pdfConvertToPDFAParameters) throws ApiException {
        okhttp3.Call localVarCall = convertToPDFAValidateBeforeCall(pdfConvertToPDFAParameters, null);
        Type localVarReturnType = new TypeToken<PdfConvertToPDFAResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Converts a previously uploaded document to PDF/A. (asynchronously)
     * 
     * @param pdfConvertToPDFAParameters A PdfConvertToPDFAParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call convertToPDFAAsync(PdfConvertToPDFAParameters pdfConvertToPDFAParameters, final ApiCallback<PdfConvertToPDFAResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = convertToPDFAValidateBeforeCall(pdfConvertToPDFAParameters, _callback);
        Type localVarReturnType = new TypeToken<PdfConvertToPDFAResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePage
     * @param pdfDeletePageParameters A PdfDeletePageParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePageCall(PdfDeletePageParameters pdfDeletePageParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = pdfDeletePageParameters;

        // create path and map variables
        String localVarPath = "/api/pdf/DeletePage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePageValidateBeforeCall(PdfDeletePageParameters pdfDeletePageParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pdfDeletePageParameters' is set
        if (pdfDeletePageParameters == null) {
            throw new ApiException("Missing the required parameter 'pdfDeletePageParameters' when calling deletePage(Async)");
        }
        

        okhttp3.Call localVarCall = deletePageCall(pdfDeletePageParameters, _callback);
        return localVarCall;

    }

    /**
     * Deletes a page range from a previously uploaded document.
     * 
     * @param pdfDeletePageParameters A PdfDeletePageParameters object specifying the parameters of the action. (required)
     * @return PdfDeletePageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PdfDeletePageResponse deletePage(PdfDeletePageParameters pdfDeletePageParameters) throws ApiException {
        ApiResponse<PdfDeletePageResponse> localVarResp = deletePageWithHttpInfo(pdfDeletePageParameters);
        return localVarResp.getData();
    }

    /**
     * Deletes a page range from a previously uploaded document.
     * 
     * @param pdfDeletePageParameters A PdfDeletePageParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;PdfDeletePageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PdfDeletePageResponse> deletePageWithHttpInfo(PdfDeletePageParameters pdfDeletePageParameters) throws ApiException {
        okhttp3.Call localVarCall = deletePageValidateBeforeCall(pdfDeletePageParameters, null);
        Type localVarReturnType = new TypeToken<PdfDeletePageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes a page range from a previously uploaded document. (asynchronously)
     * 
     * @param pdfDeletePageParameters A PdfDeletePageParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePageAsync(PdfDeletePageParameters pdfDeletePageParameters, final ApiCallback<PdfDeletePageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePageValidateBeforeCall(pdfDeletePageParameters, _callback);
        Type localVarReturnType = new TypeToken<PdfDeletePageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for detectPageOrientation
     * @param pdfDetectPageOrientationParameters A PdfDetectPageOrientationParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call detectPageOrientationCall(PdfDetectPageOrientationParameters pdfDetectPageOrientationParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = pdfDetectPageOrientationParameters;

        // create path and map variables
        String localVarPath = "/api/pdf/DetectPageOrientation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call detectPageOrientationValidateBeforeCall(PdfDetectPageOrientationParameters pdfDetectPageOrientationParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pdfDetectPageOrientationParameters' is set
        if (pdfDetectPageOrientationParameters == null) {
            throw new ApiException("Missing the required parameter 'pdfDetectPageOrientationParameters' when calling detectPageOrientation(Async)");
        }
        

        okhttp3.Call localVarCall = detectPageOrientationCall(pdfDetectPageOrientationParameters, _callback);
        return localVarCall;

    }

    /**
     * Detects the orientation of the page(s) of a previously uploaded document and offers to automatically rotate them.
     * 
     * @param pdfDetectPageOrientationParameters A PdfDetectPageOrientationParameters object specifying the parameters of the action. (required)
     * @return PdfDetectPageOrientationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PdfDetectPageOrientationResponse detectPageOrientation(PdfDetectPageOrientationParameters pdfDetectPageOrientationParameters) throws ApiException {
        ApiResponse<PdfDetectPageOrientationResponse> localVarResp = detectPageOrientationWithHttpInfo(pdfDetectPageOrientationParameters);
        return localVarResp.getData();
    }

    /**
     * Detects the orientation of the page(s) of a previously uploaded document and offers to automatically rotate them.
     * 
     * @param pdfDetectPageOrientationParameters A PdfDetectPageOrientationParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;PdfDetectPageOrientationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PdfDetectPageOrientationResponse> detectPageOrientationWithHttpInfo(PdfDetectPageOrientationParameters pdfDetectPageOrientationParameters) throws ApiException {
        okhttp3.Call localVarCall = detectPageOrientationValidateBeforeCall(pdfDetectPageOrientationParameters, null);
        Type localVarReturnType = new TypeToken<PdfDetectPageOrientationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Detects the orientation of the page(s) of a previously uploaded document and offers to automatically rotate them. (asynchronously)
     * 
     * @param pdfDetectPageOrientationParameters A PdfDetectPageOrientationParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call detectPageOrientationAsync(PdfDetectPageOrientationParameters pdfDetectPageOrientationParameters, final ApiCallback<PdfDetectPageOrientationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = detectPageOrientationValidateBeforeCall(pdfDetectPageOrientationParameters, _callback);
        Type localVarReturnType = new TypeToken<PdfDetectPageOrientationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for digiSign
     * @param pdfDigiSignParameters A PdfDigiSignParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call digiSignCall(PdfDigiSignParameters pdfDigiSignParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = pdfDigiSignParameters;

        // create path and map variables
        String localVarPath = "/api/pdf/DigiSign";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call digiSignValidateBeforeCall(PdfDigiSignParameters pdfDigiSignParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pdfDigiSignParameters' is set
        if (pdfDigiSignParameters == null) {
            throw new ApiException("Missing the required parameter 'pdfDigiSignParameters' when calling digiSign(Async)");
        }
        

        okhttp3.Call localVarCall = digiSignCall(pdfDigiSignParameters, _callback);
        return localVarCall;

    }

    /**
     * Signs a previously uploaded document digitally.
     * 
     * @param pdfDigiSignParameters A PdfDigiSignParameters object specifying the parameters of the action. (required)
     * @return PdfDigiSignResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PdfDigiSignResponse digiSign(PdfDigiSignParameters pdfDigiSignParameters) throws ApiException {
        ApiResponse<PdfDigiSignResponse> localVarResp = digiSignWithHttpInfo(pdfDigiSignParameters);
        return localVarResp.getData();
    }

    /**
     * Signs a previously uploaded document digitally.
     * 
     * @param pdfDigiSignParameters A PdfDigiSignParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;PdfDigiSignResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PdfDigiSignResponse> digiSignWithHttpInfo(PdfDigiSignParameters pdfDigiSignParameters) throws ApiException {
        okhttp3.Call localVarCall = digiSignValidateBeforeCall(pdfDigiSignParameters, null);
        Type localVarReturnType = new TypeToken<PdfDigiSignResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Signs a previously uploaded document digitally. (asynchronously)
     * 
     * @param pdfDigiSignParameters A PdfDigiSignParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call digiSignAsync(PdfDigiSignParameters pdfDigiSignParameters, final ApiCallback<PdfDigiSignResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = digiSignValidateBeforeCall(pdfDigiSignParameters, _callback);
        Type localVarReturnType = new TypeToken<PdfDigiSignResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for drawImage
     * @param pdfDrawImageParameters A PdfDrawImageParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call drawImageCall(PdfDrawImageParameters pdfDrawImageParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = pdfDrawImageParameters;

        // create path and map variables
        String localVarPath = "/api/pdf/DrawImage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call drawImageValidateBeforeCall(PdfDrawImageParameters pdfDrawImageParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pdfDrawImageParameters' is set
        if (pdfDrawImageParameters == null) {
            throw new ApiException("Missing the required parameter 'pdfDrawImageParameters' when calling drawImage(Async)");
        }
        

        okhttp3.Call localVarCall = drawImageCall(pdfDrawImageParameters, _callback);
        return localVarCall;

    }

    /**
     * Draws an image on a page range of a previously uploaded document.
     * 
     * @param pdfDrawImageParameters A PdfDrawImageParameters object specifying the parameters of the action. (required)
     * @return PdfDrawImageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PdfDrawImageResponse drawImage(PdfDrawImageParameters pdfDrawImageParameters) throws ApiException {
        ApiResponse<PdfDrawImageResponse> localVarResp = drawImageWithHttpInfo(pdfDrawImageParameters);
        return localVarResp.getData();
    }

    /**
     * Draws an image on a page range of a previously uploaded document.
     * 
     * @param pdfDrawImageParameters A PdfDrawImageParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;PdfDrawImageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PdfDrawImageResponse> drawImageWithHttpInfo(PdfDrawImageParameters pdfDrawImageParameters) throws ApiException {
        okhttp3.Call localVarCall = drawImageValidateBeforeCall(pdfDrawImageParameters, null);
        Type localVarReturnType = new TypeToken<PdfDrawImageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Draws an image on a page range of a previously uploaded document. (asynchronously)
     * 
     * @param pdfDrawImageParameters A PdfDrawImageParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call drawImageAsync(PdfDrawImageParameters pdfDrawImageParameters, final ApiCallback<PdfDrawImageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = drawImageValidateBeforeCall(pdfDrawImageParameters, _callback);
        Type localVarReturnType = new TypeToken<PdfDrawImageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extractPage
     * @param pdfExtractPageParameters A PdfExtractPageParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extractPageCall(PdfExtractPageParameters pdfExtractPageParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = pdfExtractPageParameters;

        // create path and map variables
        String localVarPath = "/api/pdf/ExtractPage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extractPageValidateBeforeCall(PdfExtractPageParameters pdfExtractPageParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pdfExtractPageParameters' is set
        if (pdfExtractPageParameters == null) {
            throw new ApiException("Missing the required parameter 'pdfExtractPageParameters' when calling extractPage(Async)");
        }
        

        okhttp3.Call localVarCall = extractPageCall(pdfExtractPageParameters, _callback);
        return localVarCall;

    }

    /**
     * Extracts a page range from a previously uploaded document into one or several new documents.
     * 
     * @param pdfExtractPageParameters A PdfExtractPageParameters object specifying the parameters of the action. (required)
     * @return PdfExtractPageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PdfExtractPageResponse extractPage(PdfExtractPageParameters pdfExtractPageParameters) throws ApiException {
        ApiResponse<PdfExtractPageResponse> localVarResp = extractPageWithHttpInfo(pdfExtractPageParameters);
        return localVarResp.getData();
    }

    /**
     * Extracts a page range from a previously uploaded document into one or several new documents.
     * 
     * @param pdfExtractPageParameters A PdfExtractPageParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;PdfExtractPageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PdfExtractPageResponse> extractPageWithHttpInfo(PdfExtractPageParameters pdfExtractPageParameters) throws ApiException {
        okhttp3.Call localVarCall = extractPageValidateBeforeCall(pdfExtractPageParameters, null);
        Type localVarReturnType = new TypeToken<PdfExtractPageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Extracts a page range from a previously uploaded document into one or several new documents. (asynchronously)
     * 
     * @param pdfExtractPageParameters A PdfExtractPageParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extractPageAsync(PdfExtractPageParameters pdfExtractPageParameters, final ApiCallback<PdfExtractPageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = extractPageValidateBeforeCall(pdfExtractPageParameters, _callback);
        Type localVarReturnType = new TypeToken<PdfExtractPageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extractText
     * @param pdfExtractTextParameters A PdfExtractTextParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extractTextCall(PdfExtractTextParameters pdfExtractTextParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = pdfExtractTextParameters;

        // create path and map variables
        String localVarPath = "/api/pdf/ExtractText";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extractTextValidateBeforeCall(PdfExtractTextParameters pdfExtractTextParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pdfExtractTextParameters' is set
        if (pdfExtractTextParameters == null) {
            throw new ApiException("Missing the required parameter 'pdfExtractTextParameters' when calling extractText(Async)");
        }
        

        okhttp3.Call localVarCall = extractTextCall(pdfExtractTextParameters, _callback);
        return localVarCall;

    }

    /**
     * Extracts text from the document pages.
     * 
     * @param pdfExtractTextParameters A PdfExtractTextParameters object specifying the parameters of the action. (required)
     * @return PdfExtractTextResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PdfExtractTextResponse extractText(PdfExtractTextParameters pdfExtractTextParameters) throws ApiException {
        ApiResponse<PdfExtractTextResponse> localVarResp = extractTextWithHttpInfo(pdfExtractTextParameters);
        return localVarResp.getData();
    }

    /**
     * Extracts text from the document pages.
     * 
     * @param pdfExtractTextParameters A PdfExtractTextParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;PdfExtractTextResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PdfExtractTextResponse> extractTextWithHttpInfo(PdfExtractTextParameters pdfExtractTextParameters) throws ApiException {
        okhttp3.Call localVarCall = extractTextValidateBeforeCall(pdfExtractTextParameters, null);
        Type localVarReturnType = new TypeToken<PdfExtractTextResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Extracts text from the document pages. (asynchronously)
     * 
     * @param pdfExtractTextParameters A PdfExtractTextParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extractTextAsync(PdfExtractTextParameters pdfExtractTextParameters, final ApiCallback<PdfExtractTextResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = extractTextValidateBeforeCall(pdfExtractTextParameters, _callback);
        Type localVarReturnType = new TypeToken<PdfExtractTextResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for flatten
     * @param pdfFlattenParameters A PdfFlatten object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call flattenCall(PdfFlattenParameters pdfFlattenParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = pdfFlattenParameters;

        // create path and map variables
        String localVarPath = "/api/pdf/Flatten";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call flattenValidateBeforeCall(PdfFlattenParameters pdfFlattenParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pdfFlattenParameters' is set
        if (pdfFlattenParameters == null) {
            throw new ApiException("Missing the required parameter 'pdfFlattenParameters' when calling flatten(Async)");
        }
        

        okhttp3.Call localVarCall = flattenCall(pdfFlattenParameters, _callback);
        return localVarCall;

    }

    /**
     * Flattens the form-fields, annotations, and/or the layers of a previously uploaded document.
     * 
     * @param pdfFlattenParameters A PdfFlatten object specifying the parameters of the action. (required)
     * @return PdfFlattenResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PdfFlattenResponse flatten(PdfFlattenParameters pdfFlattenParameters) throws ApiException {
        ApiResponse<PdfFlattenResponse> localVarResp = flattenWithHttpInfo(pdfFlattenParameters);
        return localVarResp.getData();
    }

    /**
     * Flattens the form-fields, annotations, and/or the layers of a previously uploaded document.
     * 
     * @param pdfFlattenParameters A PdfFlatten object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;PdfFlattenResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PdfFlattenResponse> flattenWithHttpInfo(PdfFlattenParameters pdfFlattenParameters) throws ApiException {
        okhttp3.Call localVarCall = flattenValidateBeforeCall(pdfFlattenParameters, null);
        Type localVarReturnType = new TypeToken<PdfFlattenResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Flattens the form-fields, annotations, and/or the layers of a previously uploaded document. (asynchronously)
     * 
     * @param pdfFlattenParameters A PdfFlatten object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call flattenAsync(PdfFlattenParameters pdfFlattenParameters, final ApiCallback<PdfFlattenResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = flattenValidateBeforeCall(pdfFlattenParameters, _callback);
        Type localVarReturnType = new TypeToken<PdfFlattenResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getInfo
     * @param pdfGetInfoParameters A PdfGetInfoParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInfoCall(PdfGetInfoParameters pdfGetInfoParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = pdfGetInfoParameters;

        // create path and map variables
        String localVarPath = "/api/pdf/GetInfo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInfoValidateBeforeCall(PdfGetInfoParameters pdfGetInfoParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pdfGetInfoParameters' is set
        if (pdfGetInfoParameters == null) {
            throw new ApiException("Missing the required parameter 'pdfGetInfoParameters' when calling getInfo(Async)");
        }
        

        okhttp3.Call localVarCall = getInfoCall(pdfGetInfoParameters, _callback);
        return localVarCall;

    }

    /**
     * Gets information about a previously uploaded document.
     * 
     * @param pdfGetInfoParameters A PdfGetInfoParameters object specifying the parameters of the action. (required)
     * @return PdfGetInfoResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PdfGetInfoResponse getInfo(PdfGetInfoParameters pdfGetInfoParameters) throws ApiException {
        ApiResponse<PdfGetInfoResponse> localVarResp = getInfoWithHttpInfo(pdfGetInfoParameters);
        return localVarResp.getData();
    }

    /**
     * Gets information about a previously uploaded document.
     * 
     * @param pdfGetInfoParameters A PdfGetInfoParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;PdfGetInfoResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PdfGetInfoResponse> getInfoWithHttpInfo(PdfGetInfoParameters pdfGetInfoParameters) throws ApiException {
        okhttp3.Call localVarCall = getInfoValidateBeforeCall(pdfGetInfoParameters, null);
        Type localVarReturnType = new TypeToken<PdfGetInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets information about a previously uploaded document. (asynchronously)
     * 
     * @param pdfGetInfoParameters A PdfGetInfoParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInfoAsync(PdfGetInfoParameters pdfGetInfoParameters, final ApiCallback<PdfGetInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInfoValidateBeforeCall(pdfGetInfoParameters, _callback);
        Type localVarReturnType = new TypeToken<PdfGetInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPDFImportSupportedFileExtensions
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPDFImportSupportedFileExtensionsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/pdf/GetPDFImportSupportedFileExtensions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPDFImportSupportedFileExtensionsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getPDFImportSupportedFileExtensionsCall(_callback);
        return localVarCall;

    }

    /**
     * Gets the supported file extensions by the LoadDocumentAsPDF action.
     * 
     * @return StringArrayResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public StringArrayResponse getPDFImportSupportedFileExtensions() throws ApiException {
        ApiResponse<StringArrayResponse> localVarResp = getPDFImportSupportedFileExtensionsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Gets the supported file extensions by the LoadDocumentAsPDF action.
     * 
     * @return ApiResponse&lt;StringArrayResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StringArrayResponse> getPDFImportSupportedFileExtensionsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getPDFImportSupportedFileExtensionsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<StringArrayResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the supported file extensions by the LoadDocumentAsPDF action. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPDFImportSupportedFileExtensionsAsync(final ApiCallback<StringArrayResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPDFImportSupportedFileExtensionsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<StringArrayResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPageThumbnail
     * @param pdfGetPageThumbnailParameters A PdfGetPageThumbnailParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPageThumbnailCall(PdfGetPageThumbnailParameters pdfGetPageThumbnailParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = pdfGetPageThumbnailParameters;

        // create path and map variables
        String localVarPath = "/api/pdf/GetPageThumbnail";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPageThumbnailValidateBeforeCall(PdfGetPageThumbnailParameters pdfGetPageThumbnailParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pdfGetPageThumbnailParameters' is set
        if (pdfGetPageThumbnailParameters == null) {
            throw new ApiException("Missing the required parameter 'pdfGetPageThumbnailParameters' when calling getPageThumbnail(Async)");
        }
        

        okhttp3.Call localVarCall = getPageThumbnailCall(pdfGetPageThumbnailParameters, _callback);
        return localVarCall;

    }

    /**
     * Gets a thumbnail of each page within the provided page range from a previously uploaded document.
     * 
     * @param pdfGetPageThumbnailParameters A PdfGetPageThumbnailParameters object specifying the parameters of the action. (required)
     * @return PdfGetPageThumbnailResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PdfGetPageThumbnailResponse getPageThumbnail(PdfGetPageThumbnailParameters pdfGetPageThumbnailParameters) throws ApiException {
        ApiResponse<PdfGetPageThumbnailResponse> localVarResp = getPageThumbnailWithHttpInfo(pdfGetPageThumbnailParameters);
        return localVarResp.getData();
    }

    /**
     * Gets a thumbnail of each page within the provided page range from a previously uploaded document.
     * 
     * @param pdfGetPageThumbnailParameters A PdfGetPageThumbnailParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;PdfGetPageThumbnailResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PdfGetPageThumbnailResponse> getPageThumbnailWithHttpInfo(PdfGetPageThumbnailParameters pdfGetPageThumbnailParameters) throws ApiException {
        okhttp3.Call localVarCall = getPageThumbnailValidateBeforeCall(pdfGetPageThumbnailParameters, null);
        Type localVarReturnType = new TypeToken<PdfGetPageThumbnailResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a thumbnail of each page within the provided page range from a previously uploaded document. (asynchronously)
     * 
     * @param pdfGetPageThumbnailParameters A PdfGetPageThumbnailParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPageThumbnailAsync(PdfGetPageThumbnailParameters pdfGetPageThumbnailParameters, final ApiCallback<PdfGetPageThumbnailResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPageThumbnailValidateBeforeCall(pdfGetPageThumbnailParameters, _callback);
        Type localVarReturnType = new TypeToken<PdfGetPageThumbnailResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for insertImage
     * @param pdfInsertImageParameters A PdfInsertImageParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call insertImageCall(PdfInsertImageParameters pdfInsertImageParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = pdfInsertImageParameters;

        // create path and map variables
        String localVarPath = "/api/pdf/InsertImage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call insertImageValidateBeforeCall(PdfInsertImageParameters pdfInsertImageParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pdfInsertImageParameters' is set
        if (pdfInsertImageParameters == null) {
            throw new ApiException("Missing the required parameter 'pdfInsertImageParameters' when calling insertImage(Async)");
        }
        

        okhttp3.Call localVarCall = insertImageCall(pdfInsertImageParameters, _callback);
        return localVarCall;

    }

    /**
     * Inserts an image on a new page of a previously uploaded document.
     * 
     * @param pdfInsertImageParameters A PdfInsertImageParameters object specifying the parameters of the action. (required)
     * @return PdfInsertImageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PdfInsertImageResponse insertImage(PdfInsertImageParameters pdfInsertImageParameters) throws ApiException {
        ApiResponse<PdfInsertImageResponse> localVarResp = insertImageWithHttpInfo(pdfInsertImageParameters);
        return localVarResp.getData();
    }

    /**
     * Inserts an image on a new page of a previously uploaded document.
     * 
     * @param pdfInsertImageParameters A PdfInsertImageParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;PdfInsertImageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PdfInsertImageResponse> insertImageWithHttpInfo(PdfInsertImageParameters pdfInsertImageParameters) throws ApiException {
        okhttp3.Call localVarCall = insertImageValidateBeforeCall(pdfInsertImageParameters, null);
        Type localVarReturnType = new TypeToken<PdfInsertImageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Inserts an image on a new page of a previously uploaded document. (asynchronously)
     * 
     * @param pdfInsertImageParameters A PdfInsertImageParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call insertImageAsync(PdfInsertImageParameters pdfInsertImageParameters, final ApiCallback<PdfInsertImageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = insertImageValidateBeforeCall(pdfInsertImageParameters, _callback);
        Type localVarReturnType = new TypeToken<PdfInsertImageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for insertNewPage
     * @param pdfInsertNewPageParameters A PdfInsertNewPageParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call insertNewPageCall(PdfInsertNewPageParameters pdfInsertNewPageParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = pdfInsertNewPageParameters;

        // create path and map variables
        String localVarPath = "/api/pdf/InsertNewPage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call insertNewPageValidateBeforeCall(PdfInsertNewPageParameters pdfInsertNewPageParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pdfInsertNewPageParameters' is set
        if (pdfInsertNewPageParameters == null) {
            throw new ApiException("Missing the required parameter 'pdfInsertNewPageParameters' when calling insertNewPage(Async)");
        }
        

        okhttp3.Call localVarCall = insertNewPageCall(pdfInsertNewPageParameters, _callback);
        return localVarCall;

    }

    /**
     * Inserts one or more new blank pages to a specific position in a previously uploaded document.
     * 
     * @param pdfInsertNewPageParameters A PdfInsertNewPageParameters object specifying the parameters of the action. (required)
     * @return PdfInsertNewPageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PdfInsertNewPageResponse insertNewPage(PdfInsertNewPageParameters pdfInsertNewPageParameters) throws ApiException {
        ApiResponse<PdfInsertNewPageResponse> localVarResp = insertNewPageWithHttpInfo(pdfInsertNewPageParameters);
        return localVarResp.getData();
    }

    /**
     * Inserts one or more new blank pages to a specific position in a previously uploaded document.
     * 
     * @param pdfInsertNewPageParameters A PdfInsertNewPageParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;PdfInsertNewPageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PdfInsertNewPageResponse> insertNewPageWithHttpInfo(PdfInsertNewPageParameters pdfInsertNewPageParameters) throws ApiException {
        okhttp3.Call localVarCall = insertNewPageValidateBeforeCall(pdfInsertNewPageParameters, null);
        Type localVarReturnType = new TypeToken<PdfInsertNewPageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Inserts one or more new blank pages to a specific position in a previously uploaded document. (asynchronously)
     * 
     * @param pdfInsertNewPageParameters A PdfInsertNewPageParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call insertNewPageAsync(PdfInsertNewPageParameters pdfInsertNewPageParameters, final ApiCallback<PdfInsertNewPageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = insertNewPageValidateBeforeCall(pdfInsertNewPageParameters, _callback);
        Type localVarReturnType = new TypeToken<PdfInsertNewPageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for insertPageNumber
     * @param pdfInsertPageNumberParameters A PdfInsertPageNumberParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call insertPageNumberCall(PdfInsertPageNumberParameters pdfInsertPageNumberParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = pdfInsertPageNumberParameters;

        // create path and map variables
        String localVarPath = "/api/pdf/InsertPageNumber";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call insertPageNumberValidateBeforeCall(PdfInsertPageNumberParameters pdfInsertPageNumberParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pdfInsertPageNumberParameters' is set
        if (pdfInsertPageNumberParameters == null) {
            throw new ApiException("Missing the required parameter 'pdfInsertPageNumberParameters' when calling insertPageNumber(Async)");
        }
        

        okhttp3.Call localVarCall = insertPageNumberCall(pdfInsertPageNumberParameters, _callback);
        return localVarCall;

    }

    /**
     * Inserts page number(s) on a document.
     * 
     * @param pdfInsertPageNumberParameters A PdfInsertPageNumberParameters object specifying the parameters of the action. (required)
     * @return PdfInsertPageNumberResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PdfInsertPageNumberResponse insertPageNumber(PdfInsertPageNumberParameters pdfInsertPageNumberParameters) throws ApiException {
        ApiResponse<PdfInsertPageNumberResponse> localVarResp = insertPageNumberWithHttpInfo(pdfInsertPageNumberParameters);
        return localVarResp.getData();
    }

    /**
     * Inserts page number(s) on a document.
     * 
     * @param pdfInsertPageNumberParameters A PdfInsertPageNumberParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;PdfInsertPageNumberResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PdfInsertPageNumberResponse> insertPageNumberWithHttpInfo(PdfInsertPageNumberParameters pdfInsertPageNumberParameters) throws ApiException {
        okhttp3.Call localVarCall = insertPageNumberValidateBeforeCall(pdfInsertPageNumberParameters, null);
        Type localVarReturnType = new TypeToken<PdfInsertPageNumberResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Inserts page number(s) on a document. (asynchronously)
     * 
     * @param pdfInsertPageNumberParameters A PdfInsertPageNumberParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call insertPageNumberAsync(PdfInsertPageNumberParameters pdfInsertPageNumberParameters, final ApiCallback<PdfInsertPageNumberResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = insertPageNumberValidateBeforeCall(pdfInsertPageNumberParameters, _callback);
        Type localVarReturnType = new TypeToken<PdfInsertPageNumberResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for insertText
     * @param pdfInsertTextParameters A PdfInsertTextParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call insertTextCall(PdfInsertTextParameters pdfInsertTextParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = pdfInsertTextParameters;

        // create path and map variables
        String localVarPath = "/api/pdf/InsertText";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call insertTextValidateBeforeCall(PdfInsertTextParameters pdfInsertTextParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pdfInsertTextParameters' is set
        if (pdfInsertTextParameters == null) {
            throw new ApiException("Missing the required parameter 'pdfInsertTextParameters' when calling insertText(Async)");
        }
        

        okhttp3.Call localVarCall = insertTextCall(pdfInsertTextParameters, _callback);
        return localVarCall;

    }

    /**
     * Inserts text on a document.
     * 
     * @param pdfInsertTextParameters A PdfInsertTextParameters object specifying the parameters of the action. (required)
     * @return PdfInsertTextResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PdfInsertTextResponse insertText(PdfInsertTextParameters pdfInsertTextParameters) throws ApiException {
        ApiResponse<PdfInsertTextResponse> localVarResp = insertTextWithHttpInfo(pdfInsertTextParameters);
        return localVarResp.getData();
    }

    /**
     * Inserts text on a document.
     * 
     * @param pdfInsertTextParameters A PdfInsertTextParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;PdfInsertTextResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PdfInsertTextResponse> insertTextWithHttpInfo(PdfInsertTextParameters pdfInsertTextParameters) throws ApiException {
        okhttp3.Call localVarCall = insertTextValidateBeforeCall(pdfInsertTextParameters, null);
        Type localVarReturnType = new TypeToken<PdfInsertTextResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Inserts text on a document. (asynchronously)
     * 
     * @param pdfInsertTextParameters A PdfInsertTextParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call insertTextAsync(PdfInsertTextParameters pdfInsertTextParameters, final ApiCallback<PdfInsertTextResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = insertTextValidateBeforeCall(pdfInsertTextParameters, _callback);
        Type localVarReturnType = new TypeToken<PdfInsertTextResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for linearize
     * @param pdfLinearizeParameters A PdfLinearizeParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call linearizeCall(PdfLinearizeParameters pdfLinearizeParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = pdfLinearizeParameters;

        // create path and map variables
        String localVarPath = "/api/pdf/Linearize";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call linearizeValidateBeforeCall(PdfLinearizeParameters pdfLinearizeParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pdfLinearizeParameters' is set
        if (pdfLinearizeParameters == null) {
            throw new ApiException("Missing the required parameter 'pdfLinearizeParameters' when calling linearize(Async)");
        }
        

        okhttp3.Call localVarCall = linearizeCall(pdfLinearizeParameters, _callback);
        return localVarCall;

    }

    /**
     * Linearizes a previously uploaded document.
     * 
     * @param pdfLinearizeParameters A PdfLinearizeParameters object specifying the parameters of the action. (required)
     * @return PdfLinearizeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PdfLinearizeResponse linearize(PdfLinearizeParameters pdfLinearizeParameters) throws ApiException {
        ApiResponse<PdfLinearizeResponse> localVarResp = linearizeWithHttpInfo(pdfLinearizeParameters);
        return localVarResp.getData();
    }

    /**
     * Linearizes a previously uploaded document.
     * 
     * @param pdfLinearizeParameters A PdfLinearizeParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;PdfLinearizeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PdfLinearizeResponse> linearizeWithHttpInfo(PdfLinearizeParameters pdfLinearizeParameters) throws ApiException {
        okhttp3.Call localVarCall = linearizeValidateBeforeCall(pdfLinearizeParameters, null);
        Type localVarReturnType = new TypeToken<PdfLinearizeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Linearizes a previously uploaded document. (asynchronously)
     * 
     * @param pdfLinearizeParameters A PdfLinearizeParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call linearizeAsync(PdfLinearizeParameters pdfLinearizeParameters, final ApiCallback<PdfLinearizeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = linearizeValidateBeforeCall(pdfLinearizeParameters, _callback);
        Type localVarReturnType = new TypeToken<PdfLinearizeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for loadDocumentAsPDF
     * @param pdfLoadDocumentFromByteArrayParameters A PdfLoadDocumentFromByteArrayParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loadDocumentAsPDFCall(PdfLoadDocumentFromByteArrayParameters pdfLoadDocumentFromByteArrayParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = pdfLoadDocumentFromByteArrayParameters;

        // create path and map variables
        String localVarPath = "/api/pdf/LoadDocument";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call loadDocumentAsPDFValidateBeforeCall(PdfLoadDocumentFromByteArrayParameters pdfLoadDocumentFromByteArrayParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pdfLoadDocumentFromByteArrayParameters' is set
        if (pdfLoadDocumentFromByteArrayParameters == null) {
            throw new ApiException("Missing the required parameter 'pdfLoadDocumentFromByteArrayParameters' when calling loadDocumentAsPDF(Async)");
        }
        

        okhttp3.Call localVarCall = loadDocumentAsPDFCall(pdfLoadDocumentFromByteArrayParameters, _callback);
        return localVarCall;

    }

    /**
     * Imports the provided document as PDF.  Supported document formats can be retrieved by the GetPDFImportSupportedFileExtensions action.
     * 
     * @param pdfLoadDocumentFromByteArrayParameters A PdfLoadDocumentFromByteArrayParameters object specifying the parameters of the action. (required)
     * @return PdfLoadDocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PdfLoadDocumentResponse loadDocumentAsPDF(PdfLoadDocumentFromByteArrayParameters pdfLoadDocumentFromByteArrayParameters) throws ApiException {
        ApiResponse<PdfLoadDocumentResponse> localVarResp = loadDocumentAsPDFWithHttpInfo(pdfLoadDocumentFromByteArrayParameters);
        return localVarResp.getData();
    }

    /**
     * Imports the provided document as PDF.  Supported document formats can be retrieved by the GetPDFImportSupportedFileExtensions action.
     * 
     * @param pdfLoadDocumentFromByteArrayParameters A PdfLoadDocumentFromByteArrayParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;PdfLoadDocumentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PdfLoadDocumentResponse> loadDocumentAsPDFWithHttpInfo(PdfLoadDocumentFromByteArrayParameters pdfLoadDocumentFromByteArrayParameters) throws ApiException {
        okhttp3.Call localVarCall = loadDocumentAsPDFValidateBeforeCall(pdfLoadDocumentFromByteArrayParameters, null);
        Type localVarReturnType = new TypeToken<PdfLoadDocumentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Imports the provided document as PDF.  Supported document formats can be retrieved by the GetPDFImportSupportedFileExtensions action. (asynchronously)
     * 
     * @param pdfLoadDocumentFromByteArrayParameters A PdfLoadDocumentFromByteArrayParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loadDocumentAsPDFAsync(PdfLoadDocumentFromByteArrayParameters pdfLoadDocumentFromByteArrayParameters, final ApiCallback<PdfLoadDocumentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = loadDocumentAsPDFValidateBeforeCall(pdfLoadDocumentFromByteArrayParameters, _callback);
        Type localVarReturnType = new TypeToken<PdfLoadDocumentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for loadDocumentAsPDFMultipart
     * @param fileData The data of the document. (required)
     * @param loadDocumentParameters  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loadDocumentAsPDFMultipartCall(File fileData, PdfLoadDocumentParameters loadDocumentParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/pdf/LoadDocumentAsPDFMultipart";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (fileData != null) {
            localVarFormParams.put("fileData", fileData);
        }

        if (loadDocumentParameters != null) {
            localVarFormParams.put("loadDocumentParameters", loadDocumentParameters);
        }

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call loadDocumentAsPDFMultipartValidateBeforeCall(File fileData, PdfLoadDocumentParameters loadDocumentParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fileData' is set
        if (fileData == null) {
            throw new ApiException("Missing the required parameter 'fileData' when calling loadDocumentAsPDFMultipart(Async)");
        }
        

        okhttp3.Call localVarCall = loadDocumentAsPDFMultipartCall(fileData, loadDocumentParameters, _callback);
        return localVarCall;

    }

    /**
     * Imports the provided document as PDF using Multipart Upload.  Supported document formats can be retrieved by the GetPDFImportSupportedFileExtensions action.
     * 
     * @param fileData The data of the document. (required)
     * @param loadDocumentParameters  (optional)
     * @return PdfLoadDocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PdfLoadDocumentResponse loadDocumentAsPDFMultipart(File fileData, PdfLoadDocumentParameters loadDocumentParameters) throws ApiException {
        ApiResponse<PdfLoadDocumentResponse> localVarResp = loadDocumentAsPDFMultipartWithHttpInfo(fileData, loadDocumentParameters);
        return localVarResp.getData();
    }

    /**
     * Imports the provided document as PDF using Multipart Upload.  Supported document formats can be retrieved by the GetPDFImportSupportedFileExtensions action.
     * 
     * @param fileData The data of the document. (required)
     * @param loadDocumentParameters  (optional)
     * @return ApiResponse&lt;PdfLoadDocumentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PdfLoadDocumentResponse> loadDocumentAsPDFMultipartWithHttpInfo(File fileData, PdfLoadDocumentParameters loadDocumentParameters) throws ApiException {
        okhttp3.Call localVarCall = loadDocumentAsPDFMultipartValidateBeforeCall(fileData, loadDocumentParameters, null);
        Type localVarReturnType = new TypeToken<PdfLoadDocumentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Imports the provided document as PDF using Multipart Upload.  Supported document formats can be retrieved by the GetPDFImportSupportedFileExtensions action. (asynchronously)
     * 
     * @param fileData The data of the document. (required)
     * @param loadDocumentParameters  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loadDocumentAsPDFMultipartAsync(File fileData, PdfLoadDocumentParameters loadDocumentParameters, final ApiCallback<PdfLoadDocumentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = loadDocumentAsPDFMultipartValidateBeforeCall(fileData, loadDocumentParameters, _callback);
        Type localVarReturnType = new TypeToken<PdfLoadDocumentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for merge
     * @param pdfMergeParameters A PdfMergeParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mergeCall(PdfMergeParameters pdfMergeParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = pdfMergeParameters;

        // create path and map variables
        String localVarPath = "/api/pdf/Merge";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mergeValidateBeforeCall(PdfMergeParameters pdfMergeParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pdfMergeParameters' is set
        if (pdfMergeParameters == null) {
            throw new ApiException("Missing the required parameter 'pdfMergeParameters' when calling merge(Async)");
        }
        

        okhttp3.Call localVarCall = mergeCall(pdfMergeParameters, _callback);
        return localVarCall;

    }

    /**
     * Merges several previously uploaded documents into a new PDF.
     * 
     * @param pdfMergeParameters A PdfMergeParameters object specifying the parameters of the action. (required)
     * @return PdfMergeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PdfMergeResponse merge(PdfMergeParameters pdfMergeParameters) throws ApiException {
        ApiResponse<PdfMergeResponse> localVarResp = mergeWithHttpInfo(pdfMergeParameters);
        return localVarResp.getData();
    }

    /**
     * Merges several previously uploaded documents into a new PDF.
     * 
     * @param pdfMergeParameters A PdfMergeParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;PdfMergeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PdfMergeResponse> mergeWithHttpInfo(PdfMergeParameters pdfMergeParameters) throws ApiException {
        okhttp3.Call localVarCall = mergeValidateBeforeCall(pdfMergeParameters, null);
        Type localVarReturnType = new TypeToken<PdfMergeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Merges several previously uploaded documents into a new PDF. (asynchronously)
     * 
     * @param pdfMergeParameters A PdfMergeParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mergeAsync(PdfMergeParameters pdfMergeParameters, final ApiCallback<PdfMergeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = mergeValidateBeforeCall(pdfMergeParameters, _callback);
        Type localVarReturnType = new TypeToken<PdfMergeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mergePages
     * @param pdfMergePagesParameters A PdfMergePages object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mergePagesCall(PdfMergePagesParameters pdfMergePagesParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = pdfMergePagesParameters;

        // create path and map variables
        String localVarPath = "/api/pdf/MergePages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mergePagesValidateBeforeCall(PdfMergePagesParameters pdfMergePagesParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pdfMergePagesParameters' is set
        if (pdfMergePagesParameters == null) {
            throw new ApiException("Missing the required parameter 'pdfMergePagesParameters' when calling mergePages(Async)");
        }
        

        okhttp3.Call localVarCall = mergePagesCall(pdfMergePagesParameters, _callback);
        return localVarCall;

    }

    /**
     * Merges multiple pages, vertically, within a previously uploaded document into one single page.
     * 
     * @param pdfMergePagesParameters A PdfMergePages object specifying the parameters of the action. (required)
     * @return PdfMergePagesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PdfMergePagesResponse mergePages(PdfMergePagesParameters pdfMergePagesParameters) throws ApiException {
        ApiResponse<PdfMergePagesResponse> localVarResp = mergePagesWithHttpInfo(pdfMergePagesParameters);
        return localVarResp.getData();
    }

    /**
     * Merges multiple pages, vertically, within a previously uploaded document into one single page.
     * 
     * @param pdfMergePagesParameters A PdfMergePages object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;PdfMergePagesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PdfMergePagesResponse> mergePagesWithHttpInfo(PdfMergePagesParameters pdfMergePagesParameters) throws ApiException {
        okhttp3.Call localVarCall = mergePagesValidateBeforeCall(pdfMergePagesParameters, null);
        Type localVarReturnType = new TypeToken<PdfMergePagesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Merges multiple pages, vertically, within a previously uploaded document into one single page. (asynchronously)
     * 
     * @param pdfMergePagesParameters A PdfMergePages object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mergePagesAsync(PdfMergePagesParameters pdfMergePagesParameters, final ApiCallback<PdfMergePagesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = mergePagesValidateBeforeCall(pdfMergePagesParameters, _callback);
        Type localVarReturnType = new TypeToken<PdfMergePagesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for movePage
     * @param pdfMovePageParameters A PdfMovePageParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call movePageCall(PdfMovePageParameters pdfMovePageParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = pdfMovePageParameters;

        // create path and map variables
        String localVarPath = "/api/pdf/MovePage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call movePageValidateBeforeCall(PdfMovePageParameters pdfMovePageParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pdfMovePageParameters' is set
        if (pdfMovePageParameters == null) {
            throw new ApiException("Missing the required parameter 'pdfMovePageParameters' when calling movePage(Async)");
        }
        

        okhttp3.Call localVarCall = movePageCall(pdfMovePageParameters, _callback);
        return localVarCall;

    }

    /**
     * Moves a page range from a previously uploaded document.
     * 
     * @param pdfMovePageParameters A PdfMovePageParameters object specifying the parameters of the action. (required)
     * @return PdfMovePageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PdfMovePageResponse movePage(PdfMovePageParameters pdfMovePageParameters) throws ApiException {
        ApiResponse<PdfMovePageResponse> localVarResp = movePageWithHttpInfo(pdfMovePageParameters);
        return localVarResp.getData();
    }

    /**
     * Moves a page range from a previously uploaded document.
     * 
     * @param pdfMovePageParameters A PdfMovePageParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;PdfMovePageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PdfMovePageResponse> movePageWithHttpInfo(PdfMovePageParameters pdfMovePageParameters) throws ApiException {
        okhttp3.Call localVarCall = movePageValidateBeforeCall(pdfMovePageParameters, null);
        Type localVarReturnType = new TypeToken<PdfMovePageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Moves a page range from a previously uploaded document. (asynchronously)
     * 
     * @param pdfMovePageParameters A PdfMovePageParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call movePageAsync(PdfMovePageParameters pdfMovePageParameters, final ApiCallback<PdfMovePageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = movePageValidateBeforeCall(pdfMovePageParameters, _callback);
        Type localVarReturnType = new TypeToken<PdfMovePageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for oCR
     * @param pdfOCRParameters A PdfOCRParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call oCRCall(PdfOCRParameters pdfOCRParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = pdfOCRParameters;

        // create path and map variables
        String localVarPath = "/api/pdf/OCR";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call oCRValidateBeforeCall(PdfOCRParameters pdfOCRParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pdfOCRParameters' is set
        if (pdfOCRParameters == null) {
            throw new ApiException("Missing the required parameter 'pdfOCRParameters' when calling oCR(Async)");
        }
        

        okhttp3.Call localVarCall = oCRCall(pdfOCRParameters, _callback);
        return localVarCall;

    }

    /**
     * Performs optical character recognition on a page range of a previously uploaded document.  The recognized text is added as invisible text on each processed page.  No token is charged for blank pages.
     * 
     * @param pdfOCRParameters A PdfOCRParameters object specifying the parameters of the action. (required)
     * @return PdfOCRResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PdfOCRResponse oCR(PdfOCRParameters pdfOCRParameters) throws ApiException {
        ApiResponse<PdfOCRResponse> localVarResp = oCRWithHttpInfo(pdfOCRParameters);
        return localVarResp.getData();
    }

    /**
     * Performs optical character recognition on a page range of a previously uploaded document.  The recognized text is added as invisible text on each processed page.  No token is charged for blank pages.
     * 
     * @param pdfOCRParameters A PdfOCRParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;PdfOCRResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PdfOCRResponse> oCRWithHttpInfo(PdfOCRParameters pdfOCRParameters) throws ApiException {
        okhttp3.Call localVarCall = oCRValidateBeforeCall(pdfOCRParameters, null);
        Type localVarReturnType = new TypeToken<PdfOCRResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Performs optical character recognition on a page range of a previously uploaded document.  The recognized text is added as invisible text on each processed page.  No token is charged for blank pages. (asynchronously)
     * 
     * @param pdfOCRParameters A PdfOCRParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call oCRAsync(PdfOCRParameters pdfOCRParameters, final ApiCallback<PdfOCRResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = oCRValidateBeforeCall(pdfOCRParameters, _callback);
        Type localVarReturnType = new TypeToken<PdfOCRResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for protect
     * @param pdfProtectParameters A PdfProtectParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protectCall(PdfProtectParameters pdfProtectParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = pdfProtectParameters;

        // create path and map variables
        String localVarPath = "/api/pdf/Protect";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call protectValidateBeforeCall(PdfProtectParameters pdfProtectParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pdfProtectParameters' is set
        if (pdfProtectParameters == null) {
            throw new ApiException("Missing the required parameter 'pdfProtectParameters' when calling protect(Async)");
        }
        

        okhttp3.Call localVarCall = protectCall(pdfProtectParameters, _callback);
        return localVarCall;

    }

    /**
     * Protects a previously uploaded document.
     * 
     * @param pdfProtectParameters A PdfProtectParameters object specifying the parameters of the action. (required)
     * @return PdfProtectResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PdfProtectResponse protect(PdfProtectParameters pdfProtectParameters) throws ApiException {
        ApiResponse<PdfProtectResponse> localVarResp = protectWithHttpInfo(pdfProtectParameters);
        return localVarResp.getData();
    }

    /**
     * Protects a previously uploaded document.
     * 
     * @param pdfProtectParameters A PdfProtectParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;PdfProtectResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PdfProtectResponse> protectWithHttpInfo(PdfProtectParameters pdfProtectParameters) throws ApiException {
        okhttp3.Call localVarCall = protectValidateBeforeCall(pdfProtectParameters, null);
        Type localVarReturnType = new TypeToken<PdfProtectResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Protects a previously uploaded document. (asynchronously)
     * 
     * @param pdfProtectParameters A PdfProtectParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call protectAsync(PdfProtectParameters pdfProtectParameters, final ApiCallback<PdfProtectResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = protectValidateBeforeCall(pdfProtectParameters, _callback);
        Type localVarReturnType = new TypeToken<PdfProtectResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for readBarcodes
     * @param pdfReadBarcodesParameters A PdfReadBarcodesParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call readBarcodesCall(PdfReadBarcodesParameters pdfReadBarcodesParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = pdfReadBarcodesParameters;

        // create path and map variables
        String localVarPath = "/api/pdf/ReadBarcodes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call readBarcodesValidateBeforeCall(PdfReadBarcodesParameters pdfReadBarcodesParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pdfReadBarcodesParameters' is set
        if (pdfReadBarcodesParameters == null) {
            throw new ApiException("Missing the required parameter 'pdfReadBarcodesParameters' when calling readBarcodes(Async)");
        }
        

        okhttp3.Call localVarCall = readBarcodesCall(pdfReadBarcodesParameters, _callback);
        return localVarCall;

    }

    /**
     * Reads barcodes from a previously uploaded document.
     * 
     * @param pdfReadBarcodesParameters A PdfReadBarcodesParameters object specifying the parameters of the action. (required)
     * @return ReadBarcodesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ReadBarcodesResponse readBarcodes(PdfReadBarcodesParameters pdfReadBarcodesParameters) throws ApiException {
        ApiResponse<ReadBarcodesResponse> localVarResp = readBarcodesWithHttpInfo(pdfReadBarcodesParameters);
        return localVarResp.getData();
    }

    /**
     * Reads barcodes from a previously uploaded document.
     * 
     * @param pdfReadBarcodesParameters A PdfReadBarcodesParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;ReadBarcodesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReadBarcodesResponse> readBarcodesWithHttpInfo(PdfReadBarcodesParameters pdfReadBarcodesParameters) throws ApiException {
        okhttp3.Call localVarCall = readBarcodesValidateBeforeCall(pdfReadBarcodesParameters, null);
        Type localVarReturnType = new TypeToken<ReadBarcodesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reads barcodes from a previously uploaded document. (asynchronously)
     * 
     * @param pdfReadBarcodesParameters A PdfReadBarcodesParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call readBarcodesAsync(PdfReadBarcodesParameters pdfReadBarcodesParameters, final ApiCallback<ReadBarcodesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = readBarcodesValidateBeforeCall(pdfReadBarcodesParameters, _callback);
        Type localVarReturnType = new TypeToken<ReadBarcodesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reduce
     * @param pdfReduceParameters A PdfReduceParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reduceCall(PdfReduceParameters pdfReduceParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = pdfReduceParameters;

        // create path and map variables
        String localVarPath = "/api/pdf/Reduce";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reduceValidateBeforeCall(PdfReduceParameters pdfReduceParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pdfReduceParameters' is set
        if (pdfReduceParameters == null) {
            throw new ApiException("Missing the required parameter 'pdfReduceParameters' when calling reduce(Async)");
        }
        

        okhttp3.Call localVarCall = reduceCall(pdfReduceParameters, _callback);
        return localVarCall;

    }

    /**
     * Reduces the size of a previously uploaded document.
     * 
     * @param pdfReduceParameters A PdfReduceParameters object specifying the parameters of the action. (required)
     * @return PdfReduceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PdfReduceResponse reduce(PdfReduceParameters pdfReduceParameters) throws ApiException {
        ApiResponse<PdfReduceResponse> localVarResp = reduceWithHttpInfo(pdfReduceParameters);
        return localVarResp.getData();
    }

    /**
     * Reduces the size of a previously uploaded document.
     * 
     * @param pdfReduceParameters A PdfReduceParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;PdfReduceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PdfReduceResponse> reduceWithHttpInfo(PdfReduceParameters pdfReduceParameters) throws ApiException {
        okhttp3.Call localVarCall = reduceValidateBeforeCall(pdfReduceParameters, null);
        Type localVarReturnType = new TypeToken<PdfReduceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reduces the size of a previously uploaded document. (asynchronously)
     * 
     * @param pdfReduceParameters A PdfReduceParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reduceAsync(PdfReduceParameters pdfReduceParameters, final ApiCallback<PdfReduceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = reduceValidateBeforeCall(pdfReduceParameters, _callback);
        Type localVarReturnType = new TypeToken<PdfReduceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removePageFormFields
     * @param pdfRemovePageFormFieldsParameters A PdfRemovePageFormFieldsParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removePageFormFieldsCall(PdfRemovePageFormFieldsParameters pdfRemovePageFormFieldsParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = pdfRemovePageFormFieldsParameters;

        // create path and map variables
        String localVarPath = "/api/pdf/RemovePageFormFields";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removePageFormFieldsValidateBeforeCall(PdfRemovePageFormFieldsParameters pdfRemovePageFormFieldsParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pdfRemovePageFormFieldsParameters' is set
        if (pdfRemovePageFormFieldsParameters == null) {
            throw new ApiException("Missing the required parameter 'pdfRemovePageFormFieldsParameters' when calling removePageFormFields(Async)");
        }
        

        okhttp3.Call localVarCall = removePageFormFieldsCall(pdfRemovePageFormFieldsParameters, _callback);
        return localVarCall;

    }

    /**
     * Removes the form fields from a page range of a previously uploaded document.
     * 
     * @param pdfRemovePageFormFieldsParameters A PdfRemovePageFormFieldsParameters object specifying the parameters of the action. (required)
     * @return PdfRemovePageFormFieldsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PdfRemovePageFormFieldsResponse removePageFormFields(PdfRemovePageFormFieldsParameters pdfRemovePageFormFieldsParameters) throws ApiException {
        ApiResponse<PdfRemovePageFormFieldsResponse> localVarResp = removePageFormFieldsWithHttpInfo(pdfRemovePageFormFieldsParameters);
        return localVarResp.getData();
    }

    /**
     * Removes the form fields from a page range of a previously uploaded document.
     * 
     * @param pdfRemovePageFormFieldsParameters A PdfRemovePageFormFieldsParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;PdfRemovePageFormFieldsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PdfRemovePageFormFieldsResponse> removePageFormFieldsWithHttpInfo(PdfRemovePageFormFieldsParameters pdfRemovePageFormFieldsParameters) throws ApiException {
        okhttp3.Call localVarCall = removePageFormFieldsValidateBeforeCall(pdfRemovePageFormFieldsParameters, null);
        Type localVarReturnType = new TypeToken<PdfRemovePageFormFieldsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Removes the form fields from a page range of a previously uploaded document. (asynchronously)
     * 
     * @param pdfRemovePageFormFieldsParameters A PdfRemovePageFormFieldsParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removePageFormFieldsAsync(PdfRemovePageFormFieldsParameters pdfRemovePageFormFieldsParameters, final ApiCallback<PdfRemovePageFormFieldsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removePageFormFieldsValidateBeforeCall(pdfRemovePageFormFieldsParameters, _callback);
        Type localVarReturnType = new TypeToken<PdfRemovePageFormFieldsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reorderPages
     * @param pdfReorderPagesParameters A PdfReorderPagesParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reorderPagesCall(PdfReorderPagesParameters pdfReorderPagesParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = pdfReorderPagesParameters;

        // create path and map variables
        String localVarPath = "/api/pdf/ReorderPages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reorderPagesValidateBeforeCall(PdfReorderPagesParameters pdfReorderPagesParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pdfReorderPagesParameters' is set
        if (pdfReorderPagesParameters == null) {
            throw new ApiException("Missing the required parameter 'pdfReorderPagesParameters' when calling reorderPages(Async)");
        }
        

        okhttp3.Call localVarCall = reorderPagesCall(pdfReorderPagesParameters, _callback);
        return localVarCall;

    }

    /**
     * Reorders pages of a previously uploaded document.
     * 
     * @param pdfReorderPagesParameters A PdfReorderPagesParameters object specifying the parameters of the action. (required)
     * @return PdfReorderPagesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PdfReorderPagesResponse reorderPages(PdfReorderPagesParameters pdfReorderPagesParameters) throws ApiException {
        ApiResponse<PdfReorderPagesResponse> localVarResp = reorderPagesWithHttpInfo(pdfReorderPagesParameters);
        return localVarResp.getData();
    }

    /**
     * Reorders pages of a previously uploaded document.
     * 
     * @param pdfReorderPagesParameters A PdfReorderPagesParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;PdfReorderPagesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PdfReorderPagesResponse> reorderPagesWithHttpInfo(PdfReorderPagesParameters pdfReorderPagesParameters) throws ApiException {
        okhttp3.Call localVarCall = reorderPagesValidateBeforeCall(pdfReorderPagesParameters, null);
        Type localVarReturnType = new TypeToken<PdfReorderPagesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reorders pages of a previously uploaded document. (asynchronously)
     * 
     * @param pdfReorderPagesParameters A PdfReorderPagesParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reorderPagesAsync(PdfReorderPagesParameters pdfReorderPagesParameters, final ApiCallback<PdfReorderPagesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = reorderPagesValidateBeforeCall(pdfReorderPagesParameters, _callback);
        Type localVarReturnType = new TypeToken<PdfReorderPagesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for repairDocument
     * @param pdfRepairDocumentParameters A PdfRepairDocumentParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repairDocumentCall(PdfRepairDocumentParameters pdfRepairDocumentParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = pdfRepairDocumentParameters;

        // create path and map variables
        String localVarPath = "/api/pdf/RepairDocument";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call repairDocumentValidateBeforeCall(PdfRepairDocumentParameters pdfRepairDocumentParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pdfRepairDocumentParameters' is set
        if (pdfRepairDocumentParameters == null) {
            throw new ApiException("Missing the required parameter 'pdfRepairDocumentParameters' when calling repairDocument(Async)");
        }
        

        okhttp3.Call localVarCall = repairDocumentCall(pdfRepairDocumentParameters, _callback);
        return localVarCall;

    }

    /**
     * Repairs a previously uploaded PDF document.
     * 
     * @param pdfRepairDocumentParameters A PdfRepairDocumentParameters object specifying the parameters of the action. (required)
     * @return PdfRepairDocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PdfRepairDocumentResponse repairDocument(PdfRepairDocumentParameters pdfRepairDocumentParameters) throws ApiException {
        ApiResponse<PdfRepairDocumentResponse> localVarResp = repairDocumentWithHttpInfo(pdfRepairDocumentParameters);
        return localVarResp.getData();
    }

    /**
     * Repairs a previously uploaded PDF document.
     * 
     * @param pdfRepairDocumentParameters A PdfRepairDocumentParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;PdfRepairDocumentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PdfRepairDocumentResponse> repairDocumentWithHttpInfo(PdfRepairDocumentParameters pdfRepairDocumentParameters) throws ApiException {
        okhttp3.Call localVarCall = repairDocumentValidateBeforeCall(pdfRepairDocumentParameters, null);
        Type localVarReturnType = new TypeToken<PdfRepairDocumentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Repairs a previously uploaded PDF document. (asynchronously)
     * 
     * @param pdfRepairDocumentParameters A PdfRepairDocumentParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call repairDocumentAsync(PdfRepairDocumentParameters pdfRepairDocumentParameters, final ApiCallback<PdfRepairDocumentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = repairDocumentValidateBeforeCall(pdfRepairDocumentParameters, _callback);
        Type localVarReturnType = new TypeToken<PdfRepairDocumentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rotatePageStandard
     * @param pdfRotatePageStandardParameters A PdfRotatePageStandardParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatePageStandardCall(PdfRotatePageStandardParameters pdfRotatePageStandardParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = pdfRotatePageStandardParameters;

        // create path and map variables
        String localVarPath = "/api/pdf/RotatePageStandard";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rotatePageStandardValidateBeforeCall(PdfRotatePageStandardParameters pdfRotatePageStandardParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pdfRotatePageStandardParameters' is set
        if (pdfRotatePageStandardParameters == null) {
            throw new ApiException("Missing the required parameter 'pdfRotatePageStandardParameters' when calling rotatePageStandard(Async)");
        }
        

        okhttp3.Call localVarCall = rotatePageStandardCall(pdfRotatePageStandardParameters, _callback);
        return localVarCall;

    }

    /**
     * Rotates (standardly) a page range from a previously uploaded document.
     * 
     * @param pdfRotatePageStandardParameters A PdfRotatePageStandardParameters object specifying the parameters of the action. (required)
     * @return PdfRotatePageStandardResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PdfRotatePageStandardResponse rotatePageStandard(PdfRotatePageStandardParameters pdfRotatePageStandardParameters) throws ApiException {
        ApiResponse<PdfRotatePageStandardResponse> localVarResp = rotatePageStandardWithHttpInfo(pdfRotatePageStandardParameters);
        return localVarResp.getData();
    }

    /**
     * Rotates (standardly) a page range from a previously uploaded document.
     * 
     * @param pdfRotatePageStandardParameters A PdfRotatePageStandardParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;PdfRotatePageStandardResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PdfRotatePageStandardResponse> rotatePageStandardWithHttpInfo(PdfRotatePageStandardParameters pdfRotatePageStandardParameters) throws ApiException {
        okhttp3.Call localVarCall = rotatePageStandardValidateBeforeCall(pdfRotatePageStandardParameters, null);
        Type localVarReturnType = new TypeToken<PdfRotatePageStandardResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Rotates (standardly) a page range from a previously uploaded document. (asynchronously)
     * 
     * @param pdfRotatePageStandardParameters A PdfRotatePageStandardParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatePageStandardAsync(PdfRotatePageStandardParameters pdfRotatePageStandardParameters, final ApiCallback<PdfRotatePageStandardResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = rotatePageStandardValidateBeforeCall(pdfRotatePageStandardParameters, _callback);
        Type localVarReturnType = new TypeToken<PdfRotatePageStandardResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for saveAsJPEG
     * @param pdfSaveAsJPEGParameters A PdfSaveAsJPEGParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveAsJPEGCall(PdfSaveAsJPEGParameters pdfSaveAsJPEGParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = pdfSaveAsJPEGParameters;

        // create path and map variables
        String localVarPath = "/api/pdf/SaveAsJPEG";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveAsJPEGValidateBeforeCall(PdfSaveAsJPEGParameters pdfSaveAsJPEGParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pdfSaveAsJPEGParameters' is set
        if (pdfSaveAsJPEGParameters == null) {
            throw new ApiException("Missing the required parameter 'pdfSaveAsJPEGParameters' when calling saveAsJPEG(Async)");
        }
        

        okhttp3.Call localVarCall = saveAsJPEGCall(pdfSaveAsJPEGParameters, _callback);
        return localVarCall;

    }

    /**
     * Saves a previously uploaded document as JPEG.
     * 
     * @param pdfSaveAsJPEGParameters A PdfSaveAsJPEGParameters object specifying the parameters of the action. (required)
     * @return PdfSaveAsJPEGResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PdfSaveAsJPEGResponse saveAsJPEG(PdfSaveAsJPEGParameters pdfSaveAsJPEGParameters) throws ApiException {
        ApiResponse<PdfSaveAsJPEGResponse> localVarResp = saveAsJPEGWithHttpInfo(pdfSaveAsJPEGParameters);
        return localVarResp.getData();
    }

    /**
     * Saves a previously uploaded document as JPEG.
     * 
     * @param pdfSaveAsJPEGParameters A PdfSaveAsJPEGParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;PdfSaveAsJPEGResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PdfSaveAsJPEGResponse> saveAsJPEGWithHttpInfo(PdfSaveAsJPEGParameters pdfSaveAsJPEGParameters) throws ApiException {
        okhttp3.Call localVarCall = saveAsJPEGValidateBeforeCall(pdfSaveAsJPEGParameters, null);
        Type localVarReturnType = new TypeToken<PdfSaveAsJPEGResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Saves a previously uploaded document as JPEG. (asynchronously)
     * 
     * @param pdfSaveAsJPEGParameters A PdfSaveAsJPEGParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveAsJPEGAsync(PdfSaveAsJPEGParameters pdfSaveAsJPEGParameters, final ApiCallback<PdfSaveAsJPEGResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveAsJPEGValidateBeforeCall(pdfSaveAsJPEGParameters, _callback);
        Type localVarReturnType = new TypeToken<PdfSaveAsJPEGResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for saveAsJPEGFile
     * @param pdfSaveAsJPEGParameters A PdfSaveAsJPEGParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveAsJPEGFileCall(PdfSaveAsJPEGParameters pdfSaveAsJPEGParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = pdfSaveAsJPEGParameters;

        // create path and map variables
        String localVarPath = "/api/pdf/SaveAsJPEGFile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveAsJPEGFileValidateBeforeCall(PdfSaveAsJPEGParameters pdfSaveAsJPEGParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pdfSaveAsJPEGParameters' is set
        if (pdfSaveAsJPEGParameters == null) {
            throw new ApiException("Missing the required parameter 'pdfSaveAsJPEGParameters' when calling saveAsJPEGFile(Async)");
        }
        

        okhttp3.Call localVarCall = saveAsJPEGFileCall(pdfSaveAsJPEGParameters, _callback);
        return localVarCall;

    }

    /**
     * Saves a previously uploaded document as JPEG.
     * 
     * @param pdfSaveAsJPEGParameters A PdfSaveAsJPEGParameters object specifying the parameters of the action. (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public File saveAsJPEGFile(PdfSaveAsJPEGParameters pdfSaveAsJPEGParameters) throws ApiException {
        ApiResponse<File> localVarResp = saveAsJPEGFileWithHttpInfo(pdfSaveAsJPEGParameters);
        return localVarResp.getData();
    }

    /**
     * Saves a previously uploaded document as JPEG.
     * 
     * @param pdfSaveAsJPEGParameters A PdfSaveAsJPEGParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> saveAsJPEGFileWithHttpInfo(PdfSaveAsJPEGParameters pdfSaveAsJPEGParameters) throws ApiException {
        okhttp3.Call localVarCall = saveAsJPEGFileValidateBeforeCall(pdfSaveAsJPEGParameters, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Saves a previously uploaded document as JPEG. (asynchronously)
     * 
     * @param pdfSaveAsJPEGParameters A PdfSaveAsJPEGParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveAsJPEGFileAsync(PdfSaveAsJPEGParameters pdfSaveAsJPEGParameters, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveAsJPEGFileValidateBeforeCall(pdfSaveAsJPEGParameters, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for saveAsPNG
     * @param pdfSaveAsPNGParameters A PdfSaveAsPNGParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveAsPNGCall(PdfSaveAsPNGParameters pdfSaveAsPNGParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = pdfSaveAsPNGParameters;

        // create path and map variables
        String localVarPath = "/api/pdf/SaveAsPNG";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveAsPNGValidateBeforeCall(PdfSaveAsPNGParameters pdfSaveAsPNGParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pdfSaveAsPNGParameters' is set
        if (pdfSaveAsPNGParameters == null) {
            throw new ApiException("Missing the required parameter 'pdfSaveAsPNGParameters' when calling saveAsPNG(Async)");
        }
        

        okhttp3.Call localVarCall = saveAsPNGCall(pdfSaveAsPNGParameters, _callback);
        return localVarCall;

    }

    /**
     * Saves a previously uploaded document as PNG.
     * 
     * @param pdfSaveAsPNGParameters A PdfSaveAsPNGParameters object specifying the parameters of the action. (required)
     * @return PdfSaveAsPNGResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PdfSaveAsPNGResponse saveAsPNG(PdfSaveAsPNGParameters pdfSaveAsPNGParameters) throws ApiException {
        ApiResponse<PdfSaveAsPNGResponse> localVarResp = saveAsPNGWithHttpInfo(pdfSaveAsPNGParameters);
        return localVarResp.getData();
    }

    /**
     * Saves a previously uploaded document as PNG.
     * 
     * @param pdfSaveAsPNGParameters A PdfSaveAsPNGParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;PdfSaveAsPNGResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PdfSaveAsPNGResponse> saveAsPNGWithHttpInfo(PdfSaveAsPNGParameters pdfSaveAsPNGParameters) throws ApiException {
        okhttp3.Call localVarCall = saveAsPNGValidateBeforeCall(pdfSaveAsPNGParameters, null);
        Type localVarReturnType = new TypeToken<PdfSaveAsPNGResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Saves a previously uploaded document as PNG. (asynchronously)
     * 
     * @param pdfSaveAsPNGParameters A PdfSaveAsPNGParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveAsPNGAsync(PdfSaveAsPNGParameters pdfSaveAsPNGParameters, final ApiCallback<PdfSaveAsPNGResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveAsPNGValidateBeforeCall(pdfSaveAsPNGParameters, _callback);
        Type localVarReturnType = new TypeToken<PdfSaveAsPNGResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for saveAsPNGFile
     * @param pdfSaveAsPNGParameters A PdfSaveAsPNGParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveAsPNGFileCall(PdfSaveAsPNGParameters pdfSaveAsPNGParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = pdfSaveAsPNGParameters;

        // create path and map variables
        String localVarPath = "/api/pdf/SaveAsPNGFile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveAsPNGFileValidateBeforeCall(PdfSaveAsPNGParameters pdfSaveAsPNGParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pdfSaveAsPNGParameters' is set
        if (pdfSaveAsPNGParameters == null) {
            throw new ApiException("Missing the required parameter 'pdfSaveAsPNGParameters' when calling saveAsPNGFile(Async)");
        }
        

        okhttp3.Call localVarCall = saveAsPNGFileCall(pdfSaveAsPNGParameters, _callback);
        return localVarCall;

    }

    /**
     * Saves a previously uploaded document as PNG.
     * 
     * @param pdfSaveAsPNGParameters A PdfSaveAsPNGParameters object specifying the parameters of the action. (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public File saveAsPNGFile(PdfSaveAsPNGParameters pdfSaveAsPNGParameters) throws ApiException {
        ApiResponse<File> localVarResp = saveAsPNGFileWithHttpInfo(pdfSaveAsPNGParameters);
        return localVarResp.getData();
    }

    /**
     * Saves a previously uploaded document as PNG.
     * 
     * @param pdfSaveAsPNGParameters A PdfSaveAsPNGParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> saveAsPNGFileWithHttpInfo(PdfSaveAsPNGParameters pdfSaveAsPNGParameters) throws ApiException {
        okhttp3.Call localVarCall = saveAsPNGFileValidateBeforeCall(pdfSaveAsPNGParameters, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Saves a previously uploaded document as PNG. (asynchronously)
     * 
     * @param pdfSaveAsPNGParameters A PdfSaveAsPNGParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveAsPNGFileAsync(PdfSaveAsPNGParameters pdfSaveAsPNGParameters, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveAsPNGFileValidateBeforeCall(pdfSaveAsPNGParameters, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for saveAsTIFF
     * @param pdfSaveAsTIFFParameters A PdfSaveAsTIFFParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveAsTIFFCall(PdfSaveAsTIFFParameters pdfSaveAsTIFFParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = pdfSaveAsTIFFParameters;

        // create path and map variables
        String localVarPath = "/api/pdf/SaveAsTIFF";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveAsTIFFValidateBeforeCall(PdfSaveAsTIFFParameters pdfSaveAsTIFFParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pdfSaveAsTIFFParameters' is set
        if (pdfSaveAsTIFFParameters == null) {
            throw new ApiException("Missing the required parameter 'pdfSaveAsTIFFParameters' when calling saveAsTIFF(Async)");
        }
        

        okhttp3.Call localVarCall = saveAsTIFFCall(pdfSaveAsTIFFParameters, _callback);
        return localVarCall;

    }

    /**
     * Saves a previously uploaded document as TIFF.
     * 
     * @param pdfSaveAsTIFFParameters A PdfSaveAsTIFFParameters object specifying the parameters of the action. (required)
     * @return PdfSaveAsTIFFResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PdfSaveAsTIFFResponse saveAsTIFF(PdfSaveAsTIFFParameters pdfSaveAsTIFFParameters) throws ApiException {
        ApiResponse<PdfSaveAsTIFFResponse> localVarResp = saveAsTIFFWithHttpInfo(pdfSaveAsTIFFParameters);
        return localVarResp.getData();
    }

    /**
     * Saves a previously uploaded document as TIFF.
     * 
     * @param pdfSaveAsTIFFParameters A PdfSaveAsTIFFParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;PdfSaveAsTIFFResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PdfSaveAsTIFFResponse> saveAsTIFFWithHttpInfo(PdfSaveAsTIFFParameters pdfSaveAsTIFFParameters) throws ApiException {
        okhttp3.Call localVarCall = saveAsTIFFValidateBeforeCall(pdfSaveAsTIFFParameters, null);
        Type localVarReturnType = new TypeToken<PdfSaveAsTIFFResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Saves a previously uploaded document as TIFF. (asynchronously)
     * 
     * @param pdfSaveAsTIFFParameters A PdfSaveAsTIFFParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveAsTIFFAsync(PdfSaveAsTIFFParameters pdfSaveAsTIFFParameters, final ApiCallback<PdfSaveAsTIFFResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveAsTIFFValidateBeforeCall(pdfSaveAsTIFFParameters, _callback);
        Type localVarReturnType = new TypeToken<PdfSaveAsTIFFResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for saveAsTIFFFile
     * @param pdfSaveAsTIFFParameters A PdfSaveAsTIFFParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveAsTIFFFileCall(PdfSaveAsTIFFParameters pdfSaveAsTIFFParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = pdfSaveAsTIFFParameters;

        // create path and map variables
        String localVarPath = "/api/pdf/SaveAsTIFFFile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveAsTIFFFileValidateBeforeCall(PdfSaveAsTIFFParameters pdfSaveAsTIFFParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pdfSaveAsTIFFParameters' is set
        if (pdfSaveAsTIFFParameters == null) {
            throw new ApiException("Missing the required parameter 'pdfSaveAsTIFFParameters' when calling saveAsTIFFFile(Async)");
        }
        

        okhttp3.Call localVarCall = saveAsTIFFFileCall(pdfSaveAsTIFFParameters, _callback);
        return localVarCall;

    }

    /**
     * Saves a previously uploaded document as TIFF.
     * 
     * @param pdfSaveAsTIFFParameters A PdfSaveAsTIFFParameters object specifying the parameters of the action. (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public File saveAsTIFFFile(PdfSaveAsTIFFParameters pdfSaveAsTIFFParameters) throws ApiException {
        ApiResponse<File> localVarResp = saveAsTIFFFileWithHttpInfo(pdfSaveAsTIFFParameters);
        return localVarResp.getData();
    }

    /**
     * Saves a previously uploaded document as TIFF.
     * 
     * @param pdfSaveAsTIFFParameters A PdfSaveAsTIFFParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> saveAsTIFFFileWithHttpInfo(PdfSaveAsTIFFParameters pdfSaveAsTIFFParameters) throws ApiException {
        okhttp3.Call localVarCall = saveAsTIFFFileValidateBeforeCall(pdfSaveAsTIFFParameters, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Saves a previously uploaded document as TIFF. (asynchronously)
     * 
     * @param pdfSaveAsTIFFParameters A PdfSaveAsTIFFParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveAsTIFFFileAsync(PdfSaveAsTIFFParameters pdfSaveAsTIFFParameters, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveAsTIFFFileValidateBeforeCall(pdfSaveAsTIFFParameters, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for saveAsTIFFMultipage
     * @param pdfSaveAsTIFFMultipageParameters A PdfSaveAsTIFFMultipageParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveAsTIFFMultipageCall(PdfSaveAsTIFFMultipageParameters pdfSaveAsTIFFMultipageParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = pdfSaveAsTIFFMultipageParameters;

        // create path and map variables
        String localVarPath = "/api/pdf/SaveAsTIFFMultipage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveAsTIFFMultipageValidateBeforeCall(PdfSaveAsTIFFMultipageParameters pdfSaveAsTIFFMultipageParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pdfSaveAsTIFFMultipageParameters' is set
        if (pdfSaveAsTIFFMultipageParameters == null) {
            throw new ApiException("Missing the required parameter 'pdfSaveAsTIFFMultipageParameters' when calling saveAsTIFFMultipage(Async)");
        }
        

        okhttp3.Call localVarCall = saveAsTIFFMultipageCall(pdfSaveAsTIFFMultipageParameters, _callback);
        return localVarCall;

    }

    /**
     * Saves a previously uploaded document as multipage TIFF.
     * 
     * @param pdfSaveAsTIFFMultipageParameters A PdfSaveAsTIFFMultipageParameters object specifying the parameters of the action. (required)
     * @return PdfSaveAsTIFFMultipageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PdfSaveAsTIFFMultipageResponse saveAsTIFFMultipage(PdfSaveAsTIFFMultipageParameters pdfSaveAsTIFFMultipageParameters) throws ApiException {
        ApiResponse<PdfSaveAsTIFFMultipageResponse> localVarResp = saveAsTIFFMultipageWithHttpInfo(pdfSaveAsTIFFMultipageParameters);
        return localVarResp.getData();
    }

    /**
     * Saves a previously uploaded document as multipage TIFF.
     * 
     * @param pdfSaveAsTIFFMultipageParameters A PdfSaveAsTIFFMultipageParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;PdfSaveAsTIFFMultipageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PdfSaveAsTIFFMultipageResponse> saveAsTIFFMultipageWithHttpInfo(PdfSaveAsTIFFMultipageParameters pdfSaveAsTIFFMultipageParameters) throws ApiException {
        okhttp3.Call localVarCall = saveAsTIFFMultipageValidateBeforeCall(pdfSaveAsTIFFMultipageParameters, null);
        Type localVarReturnType = new TypeToken<PdfSaveAsTIFFMultipageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Saves a previously uploaded document as multipage TIFF. (asynchronously)
     * 
     * @param pdfSaveAsTIFFMultipageParameters A PdfSaveAsTIFFMultipageParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveAsTIFFMultipageAsync(PdfSaveAsTIFFMultipageParameters pdfSaveAsTIFFMultipageParameters, final ApiCallback<PdfSaveAsTIFFMultipageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveAsTIFFMultipageValidateBeforeCall(pdfSaveAsTIFFMultipageParameters, _callback);
        Type localVarReturnType = new TypeToken<PdfSaveAsTIFFMultipageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for saveAsTIFFMultipageFile
     * @param pdfSaveAsTIFFMultipageParameters A PdfSaveAsTIFFMultipageParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveAsTIFFMultipageFileCall(PdfSaveAsTIFFMultipageParameters pdfSaveAsTIFFMultipageParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = pdfSaveAsTIFFMultipageParameters;

        // create path and map variables
        String localVarPath = "/api/pdf/SaveAsTIFFMultipageFile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveAsTIFFMultipageFileValidateBeforeCall(PdfSaveAsTIFFMultipageParameters pdfSaveAsTIFFMultipageParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pdfSaveAsTIFFMultipageParameters' is set
        if (pdfSaveAsTIFFMultipageParameters == null) {
            throw new ApiException("Missing the required parameter 'pdfSaveAsTIFFMultipageParameters' when calling saveAsTIFFMultipageFile(Async)");
        }
        

        okhttp3.Call localVarCall = saveAsTIFFMultipageFileCall(pdfSaveAsTIFFMultipageParameters, _callback);
        return localVarCall;

    }

    /**
     * Saves a previously uploaded document as multipage TIFF.
     * 
     * @param pdfSaveAsTIFFMultipageParameters A PdfSaveAsTIFFMultipageParameters object specifying the parameters of the action. (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public File saveAsTIFFMultipageFile(PdfSaveAsTIFFMultipageParameters pdfSaveAsTIFFMultipageParameters) throws ApiException {
        ApiResponse<File> localVarResp = saveAsTIFFMultipageFileWithHttpInfo(pdfSaveAsTIFFMultipageParameters);
        return localVarResp.getData();
    }

    /**
     * Saves a previously uploaded document as multipage TIFF.
     * 
     * @param pdfSaveAsTIFFMultipageParameters A PdfSaveAsTIFFMultipageParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> saveAsTIFFMultipageFileWithHttpInfo(PdfSaveAsTIFFMultipageParameters pdfSaveAsTIFFMultipageParameters) throws ApiException {
        okhttp3.Call localVarCall = saveAsTIFFMultipageFileValidateBeforeCall(pdfSaveAsTIFFMultipageParameters, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Saves a previously uploaded document as multipage TIFF. (asynchronously)
     * 
     * @param pdfSaveAsTIFFMultipageParameters A PdfSaveAsTIFFMultipageParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveAsTIFFMultipageFileAsync(PdfSaveAsTIFFMultipageParameters pdfSaveAsTIFFMultipageParameters, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveAsTIFFMultipageFileValidateBeforeCall(pdfSaveAsTIFFMultipageParameters, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for saveDocument
     * @param pdfSaveDocumentParameters A PdfSaveDocumentParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveDocumentCall(PdfSaveDocumentParameters pdfSaveDocumentParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = pdfSaveDocumentParameters;

        // create path and map variables
        String localVarPath = "/api/pdf/SaveDocument";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveDocumentValidateBeforeCall(PdfSaveDocumentParameters pdfSaveDocumentParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pdfSaveDocumentParameters' is set
        if (pdfSaveDocumentParameters == null) {
            throw new ApiException("Missing the required parameter 'pdfSaveDocumentParameters' when calling saveDocument(Async)");
        }
        

        okhttp3.Call localVarCall = saveDocumentCall(pdfSaveDocumentParameters, _callback);
        return localVarCall;

    }

    /**
     * Saves a previously uploaded document as PDF.
     * 
     * @param pdfSaveDocumentParameters A PdfSaveDocumentParameters object specifying the parameters of the action. (required)
     * @return PdfSaveDocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PdfSaveDocumentResponse saveDocument(PdfSaveDocumentParameters pdfSaveDocumentParameters) throws ApiException {
        ApiResponse<PdfSaveDocumentResponse> localVarResp = saveDocumentWithHttpInfo(pdfSaveDocumentParameters);
        return localVarResp.getData();
    }

    /**
     * Saves a previously uploaded document as PDF.
     * 
     * @param pdfSaveDocumentParameters A PdfSaveDocumentParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;PdfSaveDocumentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PdfSaveDocumentResponse> saveDocumentWithHttpInfo(PdfSaveDocumentParameters pdfSaveDocumentParameters) throws ApiException {
        okhttp3.Call localVarCall = saveDocumentValidateBeforeCall(pdfSaveDocumentParameters, null);
        Type localVarReturnType = new TypeToken<PdfSaveDocumentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Saves a previously uploaded document as PDF. (asynchronously)
     * 
     * @param pdfSaveDocumentParameters A PdfSaveDocumentParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveDocumentAsync(PdfSaveDocumentParameters pdfSaveDocumentParameters, final ApiCallback<PdfSaveDocumentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveDocumentValidateBeforeCall(pdfSaveDocumentParameters, _callback);
        Type localVarReturnType = new TypeToken<PdfSaveDocumentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for saveDocumentToFile
     * @param pdfSaveDocumentParameters A PdfSaveDocumentParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveDocumentToFileCall(PdfSaveDocumentParameters pdfSaveDocumentParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = pdfSaveDocumentParameters;

        // create path and map variables
        String localVarPath = "/api/pdf/SaveDocumentToFile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveDocumentToFileValidateBeforeCall(PdfSaveDocumentParameters pdfSaveDocumentParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pdfSaveDocumentParameters' is set
        if (pdfSaveDocumentParameters == null) {
            throw new ApiException("Missing the required parameter 'pdfSaveDocumentParameters' when calling saveDocumentToFile(Async)");
        }
        

        okhttp3.Call localVarCall = saveDocumentToFileCall(pdfSaveDocumentParameters, _callback);
        return localVarCall;

    }

    /**
     * Saves a previously uploaded document as PDF.
     * 
     * @param pdfSaveDocumentParameters A PdfSaveDocumentParameters object specifying the parameters of the action. (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public File saveDocumentToFile(PdfSaveDocumentParameters pdfSaveDocumentParameters) throws ApiException {
        ApiResponse<File> localVarResp = saveDocumentToFileWithHttpInfo(pdfSaveDocumentParameters);
        return localVarResp.getData();
    }

    /**
     * Saves a previously uploaded document as PDF.
     * 
     * @param pdfSaveDocumentParameters A PdfSaveDocumentParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> saveDocumentToFileWithHttpInfo(PdfSaveDocumentParameters pdfSaveDocumentParameters) throws ApiException {
        okhttp3.Call localVarCall = saveDocumentToFileValidateBeforeCall(pdfSaveDocumentParameters, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Saves a previously uploaded document as PDF. (asynchronously)
     * 
     * @param pdfSaveDocumentParameters A PdfSaveDocumentParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveDocumentToFileAsync(PdfSaveDocumentParameters pdfSaveDocumentParameters, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveDocumentToFileValidateBeforeCall(pdfSaveDocumentParameters, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for scalePage
     * @param pdfScalePageParameters A PdfScalePage object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scalePageCall(PdfScalePageParameters pdfScalePageParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = pdfScalePageParameters;

        // create path and map variables
        String localVarPath = "/api/pdf/ScalePage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scalePageValidateBeforeCall(PdfScalePageParameters pdfScalePageParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pdfScalePageParameters' is set
        if (pdfScalePageParameters == null) {
            throw new ApiException("Missing the required parameter 'pdfScalePageParameters' when calling scalePage(Async)");
        }
        

        okhttp3.Call localVarCall = scalePageCall(pdfScalePageParameters, _callback);
        return localVarCall;

    }

    /**
     * Scales a page range from a previously uploaded document.
     * 
     * @param pdfScalePageParameters A PdfScalePage object specifying the parameters of the action. (required)
     * @return PdfScalePageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PdfScalePageResponse scalePage(PdfScalePageParameters pdfScalePageParameters) throws ApiException {
        ApiResponse<PdfScalePageResponse> localVarResp = scalePageWithHttpInfo(pdfScalePageParameters);
        return localVarResp.getData();
    }

    /**
     * Scales a page range from a previously uploaded document.
     * 
     * @param pdfScalePageParameters A PdfScalePage object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;PdfScalePageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PdfScalePageResponse> scalePageWithHttpInfo(PdfScalePageParameters pdfScalePageParameters) throws ApiException {
        okhttp3.Call localVarCall = scalePageValidateBeforeCall(pdfScalePageParameters, null);
        Type localVarReturnType = new TypeToken<PdfScalePageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Scales a page range from a previously uploaded document. (asynchronously)
     * 
     * @param pdfScalePageParameters A PdfScalePage object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scalePageAsync(PdfScalePageParameters pdfScalePageParameters, final ApiCallback<PdfScalePageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = scalePageValidateBeforeCall(pdfScalePageParameters, _callback);
        Type localVarReturnType = new TypeToken<PdfScalePageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setInfo
     * @param pdfSetInfoParameters A PdfSetInfoParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setInfoCall(PdfSetInfoParameters pdfSetInfoParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = pdfSetInfoParameters;

        // create path and map variables
        String localVarPath = "/api/pdf/SetInfo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setInfoValidateBeforeCall(PdfSetInfoParameters pdfSetInfoParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pdfSetInfoParameters' is set
        if (pdfSetInfoParameters == null) {
            throw new ApiException("Missing the required parameter 'pdfSetInfoParameters' when calling setInfo(Async)");
        }
        

        okhttp3.Call localVarCall = setInfoCall(pdfSetInfoParameters, _callback);
        return localVarCall;

    }

    /**
     * Sets information to a previously uploaded document.
     * 
     * @param pdfSetInfoParameters A PdfSetInfoParameters object specifying the parameters of the action. (required)
     * @return PdfSetInfoResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PdfSetInfoResponse setInfo(PdfSetInfoParameters pdfSetInfoParameters) throws ApiException {
        ApiResponse<PdfSetInfoResponse> localVarResp = setInfoWithHttpInfo(pdfSetInfoParameters);
        return localVarResp.getData();
    }

    /**
     * Sets information to a previously uploaded document.
     * 
     * @param pdfSetInfoParameters A PdfSetInfoParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;PdfSetInfoResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PdfSetInfoResponse> setInfoWithHttpInfo(PdfSetInfoParameters pdfSetInfoParameters) throws ApiException {
        okhttp3.Call localVarCall = setInfoValidateBeforeCall(pdfSetInfoParameters, null);
        Type localVarReturnType = new TypeToken<PdfSetInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sets information to a previously uploaded document. (asynchronously)
     * 
     * @param pdfSetInfoParameters A PdfSetInfoParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setInfoAsync(PdfSetInfoParameters pdfSetInfoParameters, final ApiCallback<PdfSetInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = setInfoValidateBeforeCall(pdfSetInfoParameters, _callback);
        Type localVarReturnType = new TypeToken<PdfSetInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setInitialView
     * @param pdfSetInitialViewParameters A PdfsetInitialViewParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setInitialViewCall(PdfSetInitialViewParameters pdfSetInitialViewParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = pdfSetInitialViewParameters;

        // create path and map variables
        String localVarPath = "/api/pdf/SetInitialView";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setInitialViewValidateBeforeCall(PdfSetInitialViewParameters pdfSetInitialViewParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pdfSetInitialViewParameters' is set
        if (pdfSetInitialViewParameters == null) {
            throw new ApiException("Missing the required parameter 'pdfSetInitialViewParameters' when calling setInitialView(Async)");
        }
        

        okhttp3.Call localVarCall = setInitialViewCall(pdfSetInitialViewParameters, _callback);
        return localVarCall;

    }

    /**
     * Sets various document level initial view options to a previously uploaded document.
     * 
     * @param pdfSetInitialViewParameters A PdfsetInitialViewParameters object specifying the parameters of the action. (required)
     * @return PdfSetInitialViewResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PdfSetInitialViewResponse setInitialView(PdfSetInitialViewParameters pdfSetInitialViewParameters) throws ApiException {
        ApiResponse<PdfSetInitialViewResponse> localVarResp = setInitialViewWithHttpInfo(pdfSetInitialViewParameters);
        return localVarResp.getData();
    }

    /**
     * Sets various document level initial view options to a previously uploaded document.
     * 
     * @param pdfSetInitialViewParameters A PdfsetInitialViewParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;PdfSetInitialViewResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PdfSetInitialViewResponse> setInitialViewWithHttpInfo(PdfSetInitialViewParameters pdfSetInitialViewParameters) throws ApiException {
        okhttp3.Call localVarCall = setInitialViewValidateBeforeCall(pdfSetInitialViewParameters, null);
        Type localVarReturnType = new TypeToken<PdfSetInitialViewResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sets various document level initial view options to a previously uploaded document. (asynchronously)
     * 
     * @param pdfSetInitialViewParameters A PdfsetInitialViewParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setInitialViewAsync(PdfSetInitialViewParameters pdfSetInitialViewParameters, final ApiCallback<PdfSetInitialViewResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = setInitialViewValidateBeforeCall(pdfSetInitialViewParameters, _callback);
        Type localVarReturnType = new TypeToken<PdfSetInitialViewResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setPageBox
     * @param pdfSetPageBoxParameters A PdfSetPageBoxParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setPageBoxCall(PdfSetPageBoxParameters pdfSetPageBoxParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = pdfSetPageBoxParameters;

        // create path and map variables
        String localVarPath = "/api/pdf/SetPageBox";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setPageBoxValidateBeforeCall(PdfSetPageBoxParameters pdfSetPageBoxParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pdfSetPageBoxParameters' is set
        if (pdfSetPageBoxParameters == null) {
            throw new ApiException("Missing the required parameter 'pdfSetPageBoxParameters' when calling setPageBox(Async)");
        }
        

        okhttp3.Call localVarCall = setPageBoxCall(pdfSetPageBoxParameters, _callback);
        return localVarCall;

    }

    /**
     * Sets pagebox to a page range from previously uploaded document.
     * 
     * @param pdfSetPageBoxParameters A PdfSetPageBoxParameters object specifying the parameters of the action. (required)
     * @return PdfSetPageBoxResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PdfSetPageBoxResponse setPageBox(PdfSetPageBoxParameters pdfSetPageBoxParameters) throws ApiException {
        ApiResponse<PdfSetPageBoxResponse> localVarResp = setPageBoxWithHttpInfo(pdfSetPageBoxParameters);
        return localVarResp.getData();
    }

    /**
     * Sets pagebox to a page range from previously uploaded document.
     * 
     * @param pdfSetPageBoxParameters A PdfSetPageBoxParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;PdfSetPageBoxResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PdfSetPageBoxResponse> setPageBoxWithHttpInfo(PdfSetPageBoxParameters pdfSetPageBoxParameters) throws ApiException {
        okhttp3.Call localVarCall = setPageBoxValidateBeforeCall(pdfSetPageBoxParameters, null);
        Type localVarReturnType = new TypeToken<PdfSetPageBoxResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sets pagebox to a page range from previously uploaded document. (asynchronously)
     * 
     * @param pdfSetPageBoxParameters A PdfSetPageBoxParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setPageBoxAsync(PdfSetPageBoxParameters pdfSetPageBoxParameters, final ApiCallback<PdfSetPageBoxResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = setPageBoxValidateBeforeCall(pdfSetPageBoxParameters, _callback);
        Type localVarReturnType = new TypeToken<PdfSetPageBoxResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setPassword
     * @param pdfSetPasswordParameters A PdfSetPasswordParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setPasswordCall(PdfSetPasswordParameters pdfSetPasswordParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = pdfSetPasswordParameters;

        // create path and map variables
        String localVarPath = "/api/pdf/SetPassword";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setPasswordValidateBeforeCall(PdfSetPasswordParameters pdfSetPasswordParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pdfSetPasswordParameters' is set
        if (pdfSetPasswordParameters == null) {
            throw new ApiException("Missing the required parameter 'pdfSetPasswordParameters' when calling setPassword(Async)");
        }
        

        okhttp3.Call localVarCall = setPasswordCall(pdfSetPasswordParameters, _callback);
        return localVarCall;

    }

    /**
     * Unprotects a previously uploaded document.
     * 
     * @param pdfSetPasswordParameters A PdfSetPasswordParameters object specifying the parameters of the action. (required)
     * @return PdfSetPasswordResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PdfSetPasswordResponse setPassword(PdfSetPasswordParameters pdfSetPasswordParameters) throws ApiException {
        ApiResponse<PdfSetPasswordResponse> localVarResp = setPasswordWithHttpInfo(pdfSetPasswordParameters);
        return localVarResp.getData();
    }

    /**
     * Unprotects a previously uploaded document.
     * 
     * @param pdfSetPasswordParameters A PdfSetPasswordParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;PdfSetPasswordResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PdfSetPasswordResponse> setPasswordWithHttpInfo(PdfSetPasswordParameters pdfSetPasswordParameters) throws ApiException {
        okhttp3.Call localVarCall = setPasswordValidateBeforeCall(pdfSetPasswordParameters, null);
        Type localVarReturnType = new TypeToken<PdfSetPasswordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Unprotects a previously uploaded document. (asynchronously)
     * 
     * @param pdfSetPasswordParameters A PdfSetPasswordParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setPasswordAsync(PdfSetPasswordParameters pdfSetPasswordParameters, final ApiCallback<PdfSetPasswordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = setPasswordValidateBeforeCall(pdfSetPasswordParameters, _callback);
        Type localVarReturnType = new TypeToken<PdfSetPasswordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for split
     * @param pdfSplitParameters A PdfSplitParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call splitCall(PdfSplitParameters pdfSplitParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = pdfSplitParameters;

        // create path and map variables
        String localVarPath = "/api/pdf/Split";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call splitValidateBeforeCall(PdfSplitParameters pdfSplitParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pdfSplitParameters' is set
        if (pdfSplitParameters == null) {
            throw new ApiException("Missing the required parameter 'pdfSplitParameters' when calling split(Async)");
        }
        

        okhttp3.Call localVarCall = splitCall(pdfSplitParameters, _callback);
        return localVarCall;

    }

    /**
     * Splits a previously uploaded document into new ones.
     * 
     * @param pdfSplitParameters A PdfSplitParameters object specifying the parameters of the action. (required)
     * @return PdfSplitResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PdfSplitResponse split(PdfSplitParameters pdfSplitParameters) throws ApiException {
        ApiResponse<PdfSplitResponse> localVarResp = splitWithHttpInfo(pdfSplitParameters);
        return localVarResp.getData();
    }

    /**
     * Splits a previously uploaded document into new ones.
     * 
     * @param pdfSplitParameters A PdfSplitParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;PdfSplitResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PdfSplitResponse> splitWithHttpInfo(PdfSplitParameters pdfSplitParameters) throws ApiException {
        okhttp3.Call localVarCall = splitValidateBeforeCall(pdfSplitParameters, null);
        Type localVarReturnType = new TypeToken<PdfSplitResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Splits a previously uploaded document into new ones. (asynchronously)
     * 
     * @param pdfSplitParameters A PdfSplitParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call splitAsync(PdfSplitParameters pdfSplitParameters, final ApiCallback<PdfSplitResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = splitValidateBeforeCall(pdfSplitParameters, _callback);
        Type localVarReturnType = new TypeToken<PdfSplitResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for swapPages
     * @param pdfSwapPagesParameters A PdfSwapPagesParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call swapPagesCall(PdfSwapPagesParameters pdfSwapPagesParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = pdfSwapPagesParameters;

        // create path and map variables
        String localVarPath = "/api/pdf/SwapPages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call swapPagesValidateBeforeCall(PdfSwapPagesParameters pdfSwapPagesParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pdfSwapPagesParameters' is set
        if (pdfSwapPagesParameters == null) {
            throw new ApiException("Missing the required parameter 'pdfSwapPagesParameters' when calling swapPages(Async)");
        }
        

        okhttp3.Call localVarCall = swapPagesCall(pdfSwapPagesParameters, _callback);
        return localVarCall;

    }

    /**
     * Swaps two pages from a previously uploaded document.
     * 
     * @param pdfSwapPagesParameters A PdfSwapPagesParameters object specifying the parameters of the action. (required)
     * @return PdfSwapPagesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PdfSwapPagesResponse swapPages(PdfSwapPagesParameters pdfSwapPagesParameters) throws ApiException {
        ApiResponse<PdfSwapPagesResponse> localVarResp = swapPagesWithHttpInfo(pdfSwapPagesParameters);
        return localVarResp.getData();
    }

    /**
     * Swaps two pages from a previously uploaded document.
     * 
     * @param pdfSwapPagesParameters A PdfSwapPagesParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;PdfSwapPagesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PdfSwapPagesResponse> swapPagesWithHttpInfo(PdfSwapPagesParameters pdfSwapPagesParameters) throws ApiException {
        okhttp3.Call localVarCall = swapPagesValidateBeforeCall(pdfSwapPagesParameters, null);
        Type localVarReturnType = new TypeToken<PdfSwapPagesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Swaps two pages from a previously uploaded document. (asynchronously)
     * 
     * @param pdfSwapPagesParameters A PdfSwapPagesParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call swapPagesAsync(PdfSwapPagesParameters pdfSwapPagesParameters, final ApiCallback<PdfSwapPagesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = swapPagesValidateBeforeCall(pdfSwapPagesParameters, _callback);
        Type localVarReturnType = new TypeToken<PdfSwapPagesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for unprotect
     * @param pdfUnprotectParameters A PdfUnprotectParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unprotectCall(PdfUnprotectParameters pdfUnprotectParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = pdfUnprotectParameters;

        // create path and map variables
        String localVarPath = "/api/pdf/Unprotect";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unprotectValidateBeforeCall(PdfUnprotectParameters pdfUnprotectParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pdfUnprotectParameters' is set
        if (pdfUnprotectParameters == null) {
            throw new ApiException("Missing the required parameter 'pdfUnprotectParameters' when calling unprotect(Async)");
        }
        

        okhttp3.Call localVarCall = unprotectCall(pdfUnprotectParameters, _callback);
        return localVarCall;

    }

    /**
     * Unprotects a previously uploaded document.
     * 
     * @param pdfUnprotectParameters A PdfUnprotectParameters object specifying the parameters of the action. (required)
     * @return PdfUnprotectResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public PdfUnprotectResponse unprotect(PdfUnprotectParameters pdfUnprotectParameters) throws ApiException {
        ApiResponse<PdfUnprotectResponse> localVarResp = unprotectWithHttpInfo(pdfUnprotectParameters);
        return localVarResp.getData();
    }

    /**
     * Unprotects a previously uploaded document.
     * 
     * @param pdfUnprotectParameters A PdfUnprotectParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;PdfUnprotectResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PdfUnprotectResponse> unprotectWithHttpInfo(PdfUnprotectParameters pdfUnprotectParameters) throws ApiException {
        okhttp3.Call localVarCall = unprotectValidateBeforeCall(pdfUnprotectParameters, null);
        Type localVarReturnType = new TypeToken<PdfUnprotectResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Unprotects a previously uploaded document. (asynchronously)
     * 
     * @param pdfUnprotectParameters A PdfUnprotectParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unprotectAsync(PdfUnprotectParameters pdfUnprotectParameters, final ApiCallback<PdfUnprotectResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = unprotectValidateBeforeCall(pdfUnprotectParameters, _callback);
        Type localVarReturnType = new TypeToken<PdfUnprotectResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}

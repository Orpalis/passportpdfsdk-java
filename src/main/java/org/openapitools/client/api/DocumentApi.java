/*
 * PassportPDF API
 * Another brick in the cloud
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DocumentCloseParameters;
import org.openapitools.client.model.DocumentCloseResponse;
import org.openapitools.client.model.DocumentGetPreviewResponse;
import org.openapitools.client.model.DocumentLoadResponse;
import java.io.File;
import org.openapitools.client.model.GetDocumentPreviewParameters;
import org.openapitools.client.model.LoadDocumentFromByteArrayParameters;
import org.openapitools.client.model.LoadDocumentFromURIParameters;
import org.openapitools.client.model.LoadDocumentParameters;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DocumentApi {
    private ApiClient localVarApiClient;

    public DocumentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DocumentApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for documentClose
     * @param documentCloseParameters A DocumentCloseParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentCloseCall(DocumentCloseParameters documentCloseParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = documentCloseParameters;

        // create path and map variables
        String localVarPath = "/api/document/DocumentClose";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentCloseValidateBeforeCall(DocumentCloseParameters documentCloseParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'documentCloseParameters' is set
        if (documentCloseParameters == null) {
            throw new ApiException("Missing the required parameter 'documentCloseParameters' when calling documentClose(Async)");
        }
        

        okhttp3.Call localVarCall = documentCloseCall(documentCloseParameters, _callback);
        return localVarCall;

    }

    /**
     * Closes a previously uploaded document.
     * 
     * @param documentCloseParameters A DocumentCloseParameters object specifying the parameters of the action. (required)
     * @return DocumentCloseResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DocumentCloseResponse documentClose(DocumentCloseParameters documentCloseParameters) throws ApiException {
        ApiResponse<DocumentCloseResponse> localVarResp = documentCloseWithHttpInfo(documentCloseParameters);
        return localVarResp.getData();
    }

    /**
     * Closes a previously uploaded document.
     * 
     * @param documentCloseParameters A DocumentCloseParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;DocumentCloseResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentCloseResponse> documentCloseWithHttpInfo(DocumentCloseParameters documentCloseParameters) throws ApiException {
        okhttp3.Call localVarCall = documentCloseValidateBeforeCall(documentCloseParameters, null);
        Type localVarReturnType = new TypeToken<DocumentCloseResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Closes a previously uploaded document. (asynchronously)
     * 
     * @param documentCloseParameters A DocumentCloseParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentCloseAsync(DocumentCloseParameters documentCloseParameters, final ApiCallback<DocumentCloseResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentCloseValidateBeforeCall(documentCloseParameters, _callback);
        Type localVarReturnType = new TypeToken<DocumentCloseResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentGetPreview
     * @param getDocumentPreviewParameters A GetDocumentPreviewParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentGetPreviewCall(GetDocumentPreviewParameters getDocumentPreviewParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = getDocumentPreviewParameters;

        // create path and map variables
        String localVarPath = "/api/document/DocumentGetPreview";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentGetPreviewValidateBeforeCall(GetDocumentPreviewParameters getDocumentPreviewParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'getDocumentPreviewParameters' is set
        if (getDocumentPreviewParameters == null) {
            throw new ApiException("Missing the required parameter 'getDocumentPreviewParameters' when calling documentGetPreview(Async)");
        }
        

        okhttp3.Call localVarCall = documentGetPreviewCall(getDocumentPreviewParameters, _callback);
        return localVarCall;

    }

    /**
     * Gets the format, the page count and a thumbnail of a previously uploaded document.
     * 
     * @param getDocumentPreviewParameters A GetDocumentPreviewParameters object specifying the parameters of the action. (required)
     * @return DocumentGetPreviewResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DocumentGetPreviewResponse documentGetPreview(GetDocumentPreviewParameters getDocumentPreviewParameters) throws ApiException {
        ApiResponse<DocumentGetPreviewResponse> localVarResp = documentGetPreviewWithHttpInfo(getDocumentPreviewParameters);
        return localVarResp.getData();
    }

    /**
     * Gets the format, the page count and a thumbnail of a previously uploaded document.
     * 
     * @param getDocumentPreviewParameters A GetDocumentPreviewParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;DocumentGetPreviewResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentGetPreviewResponse> documentGetPreviewWithHttpInfo(GetDocumentPreviewParameters getDocumentPreviewParameters) throws ApiException {
        okhttp3.Call localVarCall = documentGetPreviewValidateBeforeCall(getDocumentPreviewParameters, null);
        Type localVarReturnType = new TypeToken<DocumentGetPreviewResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the format, the page count and a thumbnail of a previously uploaded document. (asynchronously)
     * 
     * @param getDocumentPreviewParameters A GetDocumentPreviewParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentGetPreviewAsync(GetDocumentPreviewParameters getDocumentPreviewParameters, final ApiCallback<DocumentGetPreviewResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentGetPreviewValidateBeforeCall(getDocumentPreviewParameters, _callback);
        Type localVarReturnType = new TypeToken<DocumentGetPreviewResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentLoad
     * @param loadDocumentFromByteArrayParameters A LoadDocumentFromByteArrayParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentLoadCall(LoadDocumentFromByteArrayParameters loadDocumentFromByteArrayParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = loadDocumentFromByteArrayParameters;

        // create path and map variables
        String localVarPath = "/api/document/DocumentLoad";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentLoadValidateBeforeCall(LoadDocumentFromByteArrayParameters loadDocumentFromByteArrayParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'loadDocumentFromByteArrayParameters' is set
        if (loadDocumentFromByteArrayParameters == null) {
            throw new ApiException("Missing the required parameter 'loadDocumentFromByteArrayParameters' when calling documentLoad(Async)");
        }
        

        okhttp3.Call localVarCall = documentLoadCall(loadDocumentFromByteArrayParameters, _callback);
        return localVarCall;

    }

    /**
     * Loads the provided document file.
     * 
     * @param loadDocumentFromByteArrayParameters A LoadDocumentFromByteArrayParameters object specifying the parameters of the action. (required)
     * @return DocumentLoadResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DocumentLoadResponse documentLoad(LoadDocumentFromByteArrayParameters loadDocumentFromByteArrayParameters) throws ApiException {
        ApiResponse<DocumentLoadResponse> localVarResp = documentLoadWithHttpInfo(loadDocumentFromByteArrayParameters);
        return localVarResp.getData();
    }

    /**
     * Loads the provided document file.
     * 
     * @param loadDocumentFromByteArrayParameters A LoadDocumentFromByteArrayParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;DocumentLoadResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentLoadResponse> documentLoadWithHttpInfo(LoadDocumentFromByteArrayParameters loadDocumentFromByteArrayParameters) throws ApiException {
        okhttp3.Call localVarCall = documentLoadValidateBeforeCall(loadDocumentFromByteArrayParameters, null);
        Type localVarReturnType = new TypeToken<DocumentLoadResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Loads the provided document file. (asynchronously)
     * 
     * @param loadDocumentFromByteArrayParameters A LoadDocumentFromByteArrayParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentLoadAsync(LoadDocumentFromByteArrayParameters loadDocumentFromByteArrayParameters, final ApiCallback<DocumentLoadResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentLoadValidateBeforeCall(loadDocumentFromByteArrayParameters, _callback);
        Type localVarReturnType = new TypeToken<DocumentLoadResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentLoadFromURI
     * @param loadDocumentFromURIParameters A LoadDocumentFromURIParameters object specifying the parameters of the action. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentLoadFromURICall(LoadDocumentFromURIParameters loadDocumentFromURIParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = loadDocumentFromURIParameters;

        // create path and map variables
        String localVarPath = "/api/document/DocumentLoadFromURI";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentLoadFromURIValidateBeforeCall(LoadDocumentFromURIParameters loadDocumentFromURIParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'loadDocumentFromURIParameters' is set
        if (loadDocumentFromURIParameters == null) {
            throw new ApiException("Missing the required parameter 'loadDocumentFromURIParameters' when calling documentLoadFromURI(Async)");
        }
        

        okhttp3.Call localVarCall = documentLoadFromURICall(loadDocumentFromURIParameters, _callback);
        return localVarCall;

    }

    /**
     * Loads the provided document file from an URI.
     * 
     * @param loadDocumentFromURIParameters A LoadDocumentFromURIParameters object specifying the parameters of the action. (required)
     * @return DocumentLoadResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DocumentLoadResponse documentLoadFromURI(LoadDocumentFromURIParameters loadDocumentFromURIParameters) throws ApiException {
        ApiResponse<DocumentLoadResponse> localVarResp = documentLoadFromURIWithHttpInfo(loadDocumentFromURIParameters);
        return localVarResp.getData();
    }

    /**
     * Loads the provided document file from an URI.
     * 
     * @param loadDocumentFromURIParameters A LoadDocumentFromURIParameters object specifying the parameters of the action. (required)
     * @return ApiResponse&lt;DocumentLoadResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentLoadResponse> documentLoadFromURIWithHttpInfo(LoadDocumentFromURIParameters loadDocumentFromURIParameters) throws ApiException {
        okhttp3.Call localVarCall = documentLoadFromURIValidateBeforeCall(loadDocumentFromURIParameters, null);
        Type localVarReturnType = new TypeToken<DocumentLoadResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Loads the provided document file from an URI. (asynchronously)
     * 
     * @param loadDocumentFromURIParameters A LoadDocumentFromURIParameters object specifying the parameters of the action. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentLoadFromURIAsync(LoadDocumentFromURIParameters loadDocumentFromURIParameters, final ApiCallback<DocumentLoadResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentLoadFromURIValidateBeforeCall(loadDocumentFromURIParameters, _callback);
        Type localVarReturnType = new TypeToken<DocumentLoadResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for documentLoadMultipart
     * @param fileData The data of the document. (required)
     * @param loadDocumentParameters  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentLoadMultipartCall(File fileData, LoadDocumentParameters loadDocumentParameters, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/document/DocumentLoadMultipart";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (fileData != null) {
            localVarFormParams.put("fileData", fileData);
        }

        if (loadDocumentParameters != null) {
            localVarFormParams.put("loadDocumentParameters", loadDocumentParameters);
        }

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentLoadMultipartValidateBeforeCall(File fileData, LoadDocumentParameters loadDocumentParameters, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fileData' is set
        if (fileData == null) {
            throw new ApiException("Missing the required parameter 'fileData' when calling documentLoadMultipart(Async)");
        }
        

        okhttp3.Call localVarCall = documentLoadMultipartCall(fileData, loadDocumentParameters, _callback);
        return localVarCall;

    }

    /**
     * Loads the provided document file using Multipart Upload.
     * 
     * @param fileData The data of the document. (required)
     * @param loadDocumentParameters  (optional)
     * @return DocumentLoadResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public DocumentLoadResponse documentLoadMultipart(File fileData, LoadDocumentParameters loadDocumentParameters) throws ApiException {
        ApiResponse<DocumentLoadResponse> localVarResp = documentLoadMultipartWithHttpInfo(fileData, loadDocumentParameters);
        return localVarResp.getData();
    }

    /**
     * Loads the provided document file using Multipart Upload.
     * 
     * @param fileData The data of the document. (required)
     * @param loadDocumentParameters  (optional)
     * @return ApiResponse&lt;DocumentLoadResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentLoadResponse> documentLoadMultipartWithHttpInfo(File fileData, LoadDocumentParameters loadDocumentParameters) throws ApiException {
        okhttp3.Call localVarCall = documentLoadMultipartValidateBeforeCall(fileData, loadDocumentParameters, null);
        Type localVarReturnType = new TypeToken<DocumentLoadResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Loads the provided document file using Multipart Upload. (asynchronously)
     * 
     * @param fileData The data of the document. (required)
     * @param loadDocumentParameters  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentLoadMultipartAsync(File fileData, LoadDocumentParameters loadDocumentParameters, final ApiCallback<DocumentLoadResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentLoadMultipartValidateBeforeCall(fileData, loadDocumentParameters, _callback);
        Type localVarReturnType = new TypeToken<DocumentLoadResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}

/*
 * PassportPDF API
 * Another brick in the cloud
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.ContentHorizontalPosition;
import org.openapitools.client.model.ContentSize;
import org.openapitools.client.model.ContentVerticalPosition;

/**
 * Represents information about the layout of a content, on the page it is drawn onto.
 */
@ApiModel(description = "Represents information about the layout of a content, on the page it is drawn onto.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-04-27T13:23:36.328+02:00[Europe/Paris]")
public class DrawableContentLayoutParameters {
  public static final String SERIALIZED_NAME_HORIZONTAL_POSITION = "HorizontalPosition";
  @SerializedName(SERIALIZED_NAME_HORIZONTAL_POSITION)
  private ContentHorizontalPosition horizontalPosition;

  public static final String SERIALIZED_NAME_VERTICAL_POSITION = "VerticalPosition";
  @SerializedName(SERIALIZED_NAME_VERTICAL_POSITION)
  private ContentVerticalPosition verticalPosition;

  public static final String SERIALIZED_NAME_SIZE = "Size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private ContentSize size;

  public static final String SERIALIZED_NAME_INDENT_FROM_EDGES = "IndentFromEdges";
  @SerializedName(SERIALIZED_NAME_INDENT_FROM_EDGES)
  private Boolean indentFromEdges = true;

  public static final String SERIALIZED_NAME_ABSOLUTE_POSITION_LEFT = "AbsolutePositionLeft";
  @SerializedName(SERIALIZED_NAME_ABSOLUTE_POSITION_LEFT)
  private Float absolutePositionLeft;

  public static final String SERIALIZED_NAME_ABSOLUTE_POSITION_TOP = "AbsolutePositionTop";
  @SerializedName(SERIALIZED_NAME_ABSOLUTE_POSITION_TOP)
  private Float absolutePositionTop;

  public static final String SERIALIZED_NAME_ABSOLUTE_WIDTH = "AbsoluteWidth";
  @SerializedName(SERIALIZED_NAME_ABSOLUTE_WIDTH)
  private Float absoluteWidth;

  public static final String SERIALIZED_NAME_ABSOLUTE_HEIGHT = "AbsoluteHeight";
  @SerializedName(SERIALIZED_NAME_ABSOLUTE_HEIGHT)
  private Float absoluteHeight;


  public DrawableContentLayoutParameters horizontalPosition(ContentHorizontalPosition horizontalPosition) {
    
    this.horizontalPosition = horizontalPosition;
    return this;
  }

   /**
   * Get horizontalPosition
   * @return horizontalPosition
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ContentHorizontalPosition getHorizontalPosition() {
    return horizontalPosition;
  }


  public void setHorizontalPosition(ContentHorizontalPosition horizontalPosition) {
    this.horizontalPosition = horizontalPosition;
  }


  public DrawableContentLayoutParameters verticalPosition(ContentVerticalPosition verticalPosition) {
    
    this.verticalPosition = verticalPosition;
    return this;
  }

   /**
   * Get verticalPosition
   * @return verticalPosition
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ContentVerticalPosition getVerticalPosition() {
    return verticalPosition;
  }


  public void setVerticalPosition(ContentVerticalPosition verticalPosition) {
    this.verticalPosition = verticalPosition;
  }


  public DrawableContentLayoutParameters size(ContentSize size) {
    
    this.size = size;
    return this;
  }

   /**
   * Get size
   * @return size
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ContentSize getSize() {
    return size;
  }


  public void setSize(ContentSize size) {
    this.size = size;
  }


  public DrawableContentLayoutParameters indentFromEdges(Boolean indentFromEdges) {
    
    this.indentFromEdges = indentFromEdges;
    return this;
  }

   /**
   * Specifies whether the content shall be slightly indented from the nearest page edges.
   * @return indentFromEdges
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the content shall be slightly indented from the nearest page edges.")

  public Boolean getIndentFromEdges() {
    return indentFromEdges;
  }


  public void setIndentFromEdges(Boolean indentFromEdges) {
    this.indentFromEdges = indentFromEdges;
  }


  public DrawableContentLayoutParameters absolutePositionLeft(Float absolutePositionLeft) {
    
    this.absolutePositionLeft = absolutePositionLeft;
    return this;
  }

   /**
   * Specifies the absolute horizontal position of the top-left edge of the content, in points.
   * @return absolutePositionLeft
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the absolute horizontal position of the top-left edge of the content, in points.")

  public Float getAbsolutePositionLeft() {
    return absolutePositionLeft;
  }


  public void setAbsolutePositionLeft(Float absolutePositionLeft) {
    this.absolutePositionLeft = absolutePositionLeft;
  }


  public DrawableContentLayoutParameters absolutePositionTop(Float absolutePositionTop) {
    
    this.absolutePositionTop = absolutePositionTop;
    return this;
  }

   /**
   * Specifies the absolute vertical position of the top-left edge of the content, in points.
   * @return absolutePositionTop
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the absolute vertical position of the top-left edge of the content, in points.")

  public Float getAbsolutePositionTop() {
    return absolutePositionTop;
  }


  public void setAbsolutePositionTop(Float absolutePositionTop) {
    this.absolutePositionTop = absolutePositionTop;
  }


  public DrawableContentLayoutParameters absoluteWidth(Float absoluteWidth) {
    
    this.absoluteWidth = absoluteWidth;
    return this;
  }

   /**
   * Specifies the absolute width of the content, in points.
   * @return absoluteWidth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the absolute width of the content, in points.")

  public Float getAbsoluteWidth() {
    return absoluteWidth;
  }


  public void setAbsoluteWidth(Float absoluteWidth) {
    this.absoluteWidth = absoluteWidth;
  }


  public DrawableContentLayoutParameters absoluteHeight(Float absoluteHeight) {
    
    this.absoluteHeight = absoluteHeight;
    return this;
  }

   /**
   * Specifies the absolute height of the content, in points.
   * @return absoluteHeight
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the absolute height of the content, in points.")

  public Float getAbsoluteHeight() {
    return absoluteHeight;
  }


  public void setAbsoluteHeight(Float absoluteHeight) {
    this.absoluteHeight = absoluteHeight;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DrawableContentLayoutParameters drawableContentLayoutParameters = (DrawableContentLayoutParameters) o;
    return Objects.equals(this.horizontalPosition, drawableContentLayoutParameters.horizontalPosition) &&
        Objects.equals(this.verticalPosition, drawableContentLayoutParameters.verticalPosition) &&
        Objects.equals(this.size, drawableContentLayoutParameters.size) &&
        Objects.equals(this.indentFromEdges, drawableContentLayoutParameters.indentFromEdges) &&
        Objects.equals(this.absolutePositionLeft, drawableContentLayoutParameters.absolutePositionLeft) &&
        Objects.equals(this.absolutePositionTop, drawableContentLayoutParameters.absolutePositionTop) &&
        Objects.equals(this.absoluteWidth, drawableContentLayoutParameters.absoluteWidth) &&
        Objects.equals(this.absoluteHeight, drawableContentLayoutParameters.absoluteHeight);
  }

  @Override
  public int hashCode() {
    return Objects.hash(horizontalPosition, verticalPosition, size, indentFromEdges, absolutePositionLeft, absolutePositionTop, absoluteWidth, absoluteHeight);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DrawableContentLayoutParameters {\n");
    sb.append("    horizontalPosition: ").append(toIndentedString(horizontalPosition)).append("\n");
    sb.append("    verticalPosition: ").append(toIndentedString(verticalPosition)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    indentFromEdges: ").append(toIndentedString(indentFromEdges)).append("\n");
    sb.append("    absolutePositionLeft: ").append(toIndentedString(absolutePositionLeft)).append("\n");
    sb.append("    absolutePositionTop: ").append(toIndentedString(absolutePositionTop)).append("\n");
    sb.append("    absoluteWidth: ").append(toIndentedString(absoluteWidth)).append("\n");
    sb.append("    absoluteHeight: ").append(toIndentedString(absoluteHeight)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


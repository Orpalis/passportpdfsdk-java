/*
 * PassportPDF API
 *       Introduction:    PassportPDF API is a REST API that lets you perform complex operations on documents and images easily.  You may consume the API by using our.NET SDK (other platforms / languages are soon to come), or any REST client by sending your requests to the appropriate endpoints.   A list of all the available endpoints can be found on the API reference page at https://passportpdfapi.com/references/api/index.html        Authentication:    Each available operation has a predefined cost, expressed as a number of tokens.  These tokens are deducted from your \"passport,\" which has a unique identifier that acts as an API key. This key is, therefore, required to be provided with each request for the latter to be honored(except if the operation does not have a cost, typically when you request a simple data with a GET).  Your key must be included in the header of the request, under the name \"X-PassportPdf-API-Key.\"  If you are using the.NET SDK, you can either set your key in the ApiKey property of your API instance(PdfApi or ImageApi, for example) or set it globally in the GlobalConfiguration instance if you want to set it once for the whole life cycle of your application.          Communication with the API:    All the available actions are listed on the API reference page, as previously mentioned.  There are several different controllers, i.e., routes, which categorize the actions.For example, you may use the PDF controller(\"/api/pdf\" route) to perform PDF - related operations, and the Image controller(\"/api/image\") for images.  Each action defines what kind of parameters(if any) is expected, and what kind of response is served.Parameters and responses are represented using data models, or \"schemas,\" and are listed in the \"Schemas\" section of the reference.   Parameters and response models of a given action are both prefixed by the controller name, the action name, and \"Parameters\" / \"Response,\" e.g. \"api/pdf/reduce\" respectively receives and serves a PdfReduceParameters and PdfReduceResponse models.  Using the .NET SDK, you will find the objects to interact with the different controllers in the PassportPDF.Api namespace and all the schemas in the PassportPDF.Model namespace.        Processing documents:    Each document manipulation starts with importing the file onto the API.  The LoadDocument action of the PDF controller lets you import your document as a PDF.  Note that the GetPDFImportSupportedFileExtensions action of the same controller will let you know all the different types of files that you may import as a PDF. LoadDocument responds with a JSON-serialized PdfLoadDocumentResponse model, which contains a \"FileId\" property.This identifier is required for the API to know about your document for further manipulations, hence the presence of a \"FileId\" property in the PdfReduceParameters schema (and many other parameters schemas). To download the changes made to a file, you need, of course, to download the new version of the file from the API.  To save your document as a PDF, you will need to use the SaveDocument action of the PDF controller and provide a PdfSaveDocumentParameters data model that contains the identifier of your file.        Errors:    Conventional HTTP response codes are used to indicate the success or failure of an API request.   The Error data model also defines some information about an error that occurred on the API.   Each response model has an Error in its definition, and its sole existence in the serialized response - which should thus always be checked - indicates that something went wrong.  Among the information given by the Error schema, \"ResultCode\" specifies a value of the \"PassportPDFStatus\" enumeration, that defines a first level of error information. \"InternalErrorId\" defines a unique identifier for the error, which comes very handy for us to troubleshoot any issue you may encounter quickly.        Efficiency considerations:    Multipart upload/download is available and lets you directly stream a file to/from the API.  In the PDF controller, LoadDocument/LoadDocumentMultipart and SaveDocument/SaveDocumentToFile may be used to upload/download a document using respectively binary data serialization and streaming multipart HTTP requests.  The second approach should be favored when dealing with large files, as it will be much more efficient in that context.  
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.ContentHorizontalPosition;
import org.openapitools.client.model.ContentSize;
import org.openapitools.client.model.ContentVerticalPosition;

/**
 * Represents information about the layout of a content, on the page it is drawn onto.
 */
@ApiModel(description = "Represents information about the layout of a content, on the page it is drawn onto.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-04-10T16:23:29.092+02:00[Europe/Paris]")
public class DrawableContentLayoutParameters {
  public static final String SERIALIZED_NAME_HORIZONTAL_POSITION = "HorizontalPosition";
  @SerializedName(SERIALIZED_NAME_HORIZONTAL_POSITION)
  private ContentHorizontalPosition horizontalPosition;

  public static final String SERIALIZED_NAME_VERTICAL_POSITION = "VerticalPosition";
  @SerializedName(SERIALIZED_NAME_VERTICAL_POSITION)
  private ContentVerticalPosition verticalPosition;

  public static final String SERIALIZED_NAME_SIZE = "Size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private ContentSize size;

  public static final String SERIALIZED_NAME_INDENT_FROM_EDGES = "IndentFromEdges";
  @SerializedName(SERIALIZED_NAME_INDENT_FROM_EDGES)
  private Boolean indentFromEdges = true;

  public static final String SERIALIZED_NAME_ABSOLUTE_POSITION_LEFT = "AbsolutePositionLeft";
  @SerializedName(SERIALIZED_NAME_ABSOLUTE_POSITION_LEFT)
  private Float absolutePositionLeft;

  public static final String SERIALIZED_NAME_ABSOLUTE_POSITION_TOP = "AbsolutePositionTop";
  @SerializedName(SERIALIZED_NAME_ABSOLUTE_POSITION_TOP)
  private Float absolutePositionTop;

  public static final String SERIALIZED_NAME_ABSOLUTE_WIDTH = "AbsoluteWidth";
  @SerializedName(SERIALIZED_NAME_ABSOLUTE_WIDTH)
  private Float absoluteWidth;

  public static final String SERIALIZED_NAME_ABSOLUTE_HEIGHT = "AbsoluteHeight";
  @SerializedName(SERIALIZED_NAME_ABSOLUTE_HEIGHT)
  private Float absoluteHeight;


  public DrawableContentLayoutParameters horizontalPosition(ContentHorizontalPosition horizontalPosition) {
    
    this.horizontalPosition = horizontalPosition;
    return this;
  }

   /**
   * Get horizontalPosition
   * @return horizontalPosition
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ContentHorizontalPosition getHorizontalPosition() {
    return horizontalPosition;
  }


  public void setHorizontalPosition(ContentHorizontalPosition horizontalPosition) {
    this.horizontalPosition = horizontalPosition;
  }


  public DrawableContentLayoutParameters verticalPosition(ContentVerticalPosition verticalPosition) {
    
    this.verticalPosition = verticalPosition;
    return this;
  }

   /**
   * Get verticalPosition
   * @return verticalPosition
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ContentVerticalPosition getVerticalPosition() {
    return verticalPosition;
  }


  public void setVerticalPosition(ContentVerticalPosition verticalPosition) {
    this.verticalPosition = verticalPosition;
  }


  public DrawableContentLayoutParameters size(ContentSize size) {
    
    this.size = size;
    return this;
  }

   /**
   * Get size
   * @return size
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ContentSize getSize() {
    return size;
  }


  public void setSize(ContentSize size) {
    this.size = size;
  }


  public DrawableContentLayoutParameters indentFromEdges(Boolean indentFromEdges) {
    
    this.indentFromEdges = indentFromEdges;
    return this;
  }

   /**
   * Specifies whether the content shall be slightly indented from the nearest page edges.
   * @return indentFromEdges
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the content shall be slightly indented from the nearest page edges.")

  public Boolean getIndentFromEdges() {
    return indentFromEdges;
  }


  public void setIndentFromEdges(Boolean indentFromEdges) {
    this.indentFromEdges = indentFromEdges;
  }


  public DrawableContentLayoutParameters absolutePositionLeft(Float absolutePositionLeft) {
    
    this.absolutePositionLeft = absolutePositionLeft;
    return this;
  }

   /**
   * Specifies the absolute horizontal position of the top-left edge of the content, in points.
   * @return absolutePositionLeft
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the absolute horizontal position of the top-left edge of the content, in points.")

  public Float getAbsolutePositionLeft() {
    return absolutePositionLeft;
  }


  public void setAbsolutePositionLeft(Float absolutePositionLeft) {
    this.absolutePositionLeft = absolutePositionLeft;
  }


  public DrawableContentLayoutParameters absolutePositionTop(Float absolutePositionTop) {
    
    this.absolutePositionTop = absolutePositionTop;
    return this;
  }

   /**
   * Specifies the absolute vertical position of the top-left edge of the content, in points.
   * @return absolutePositionTop
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the absolute vertical position of the top-left edge of the content, in points.")

  public Float getAbsolutePositionTop() {
    return absolutePositionTop;
  }


  public void setAbsolutePositionTop(Float absolutePositionTop) {
    this.absolutePositionTop = absolutePositionTop;
  }


  public DrawableContentLayoutParameters absoluteWidth(Float absoluteWidth) {
    
    this.absoluteWidth = absoluteWidth;
    return this;
  }

   /**
   * Specifies the absolute width of the content, in points.
   * @return absoluteWidth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the absolute width of the content, in points.")

  public Float getAbsoluteWidth() {
    return absoluteWidth;
  }


  public void setAbsoluteWidth(Float absoluteWidth) {
    this.absoluteWidth = absoluteWidth;
  }


  public DrawableContentLayoutParameters absoluteHeight(Float absoluteHeight) {
    
    this.absoluteHeight = absoluteHeight;
    return this;
  }

   /**
   * Specifies the absolute height of the content, in points.
   * @return absoluteHeight
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the absolute height of the content, in points.")

  public Float getAbsoluteHeight() {
    return absoluteHeight;
  }


  public void setAbsoluteHeight(Float absoluteHeight) {
    this.absoluteHeight = absoluteHeight;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DrawableContentLayoutParameters drawableContentLayoutParameters = (DrawableContentLayoutParameters) o;
    return Objects.equals(this.horizontalPosition, drawableContentLayoutParameters.horizontalPosition) &&
        Objects.equals(this.verticalPosition, drawableContentLayoutParameters.verticalPosition) &&
        Objects.equals(this.size, drawableContentLayoutParameters.size) &&
        Objects.equals(this.indentFromEdges, drawableContentLayoutParameters.indentFromEdges) &&
        Objects.equals(this.absolutePositionLeft, drawableContentLayoutParameters.absolutePositionLeft) &&
        Objects.equals(this.absolutePositionTop, drawableContentLayoutParameters.absolutePositionTop) &&
        Objects.equals(this.absoluteWidth, drawableContentLayoutParameters.absoluteWidth) &&
        Objects.equals(this.absoluteHeight, drawableContentLayoutParameters.absoluteHeight);
  }

  @Override
  public int hashCode() {
    return Objects.hash(horizontalPosition, verticalPosition, size, indentFromEdges, absolutePositionLeft, absolutePositionTop, absoluteWidth, absoluteHeight);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DrawableContentLayoutParameters {\n");
    sb.append("    horizontalPosition: ").append(toIndentedString(horizontalPosition)).append("\n");
    sb.append("    verticalPosition: ").append(toIndentedString(verticalPosition)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    indentFromEdges: ").append(toIndentedString(indentFromEdges)).append("\n");
    sb.append("    absolutePositionLeft: ").append(toIndentedString(absolutePositionLeft)).append("\n");
    sb.append("    absolutePositionTop: ").append(toIndentedString(absolutePositionTop)).append("\n");
    sb.append("    absoluteWidth: ").append(toIndentedString(absoluteWidth)).append("\n");
    sb.append("    absoluteHeight: ").append(toIndentedString(absoluteHeight)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


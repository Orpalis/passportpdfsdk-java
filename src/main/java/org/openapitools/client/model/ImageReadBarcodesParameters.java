/*
 * PassportPDF API
 *       Introduction:    PassportPDF API is a REST API that lets you perform complex operations on documents and images easily.  You may consume the API by using our.NET SDK (other platforms / languages are soon to come), or any REST client by sending your requests to the appropriate endpoints.   A list of all the available endpoints can be found on the API reference page at https://passportpdfapi.com/references/api/index.html        Authentication:    Each available operation has a predefined cost, expressed as a number of tokens.  These tokens are deducted from your \"passport,\" which has a unique identifier that acts as an API key. This key is, therefore, required to be provided with each request for the latter to be honored(except if the operation does not have a cost, typically when you request a simple data with a GET).  Your key must be included in the header of the request, under the name \"X-PassportPdf-API-Key.\"  If you are using the.NET SDK, you can either set your key in the ApiKey property of your API instance(PdfApi or ImageApi, for example) or set it globally in the GlobalConfiguration instance if you want to set it once for the whole life cycle of your application.          Communication with the API:    All the available actions are listed on the API reference page, as previously mentioned.  There are several different controllers, i.e., routes, which categorize the actions.For example, you may use the PDF controller(\"/api/pdf\" route) to perform PDF - related operations, and the Image controller(\"/api/image\") for images.  Each action defines what kind of parameters(if any) is expected, and what kind of response is served.Parameters and responses are represented using data models, or \"schemas,\" and are listed in the \"Schemas\" section of the reference.   Parameters and response models of a given action are both prefixed by the controller name, the action name, and \"Parameters\" / \"Response,\" e.g. \"api/pdf/reduce\" respectively receives and serves a PdfReduceParameters and PdfReduceResponse models.  Using the .NET SDK, you will find the objects to interact with the different controllers in the PassportPDF.Api namespace and all the schemas in the PassportPDF.Model namespace.        Processing documents:    Each document manipulation starts with importing the file onto the API.  The LoadDocument action of the PDF controller lets you import your document as a PDF.  Note that the GetPDFImportSupportedFileExtensions action of the same controller will let you know all the different types of files that you may import as a PDF. LoadDocument responds with a JSON-serialized PdfLoadDocumentResponse model, which contains a \"FileId\" property.This identifier is required for the API to know about your document for further manipulations, hence the presence of a \"FileId\" property in the PdfReduceParameters schema (and many other parameters schemas). To download the changes made to a file, you need, of course, to download the new version of the file from the API.  To save your document as a PDF, you will need to use the SaveDocument action of the PDF controller and provide a PdfSaveDocumentParameters data model that contains the identifier of your file.        Errors:    Conventional HTTP response codes are used to indicate the success or failure of an API request.   The Error data model also defines some information about an error that occurred on the API.   Each response model has an Error in its definition, and its sole existence in the serialized response - which should thus always be checked - indicates that something went wrong.  Among the information given by the Error schema, \"ResultCode\" specifies a value of the \"PassportPDFStatus\" enumeration, that defines a first level of error information. \"InternalErrorId\" defines a unique identifier for the error, which comes very handy for us to troubleshoot any issue you may encounter quickly.        Efficiency considerations:    Multipart upload/download is available and lets you directly stream a file to/from the API.  In the PDF controller, LoadDocument/LoadDocumentMultipart and SaveDocument/SaveDocumentToFile may be used to upload/download a document using respectively binary data serialization and streaming multipart HTTP requests.  The second approach should be favored when dealing with large files, as it will be much more efficient in that context.  
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.ScanMode;

/**
 * Represents the parameters for a read barcode action.
 */
@ApiModel(description = "Represents the parameters for a read barcode action.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-04-10T16:23:29.092+02:00[Europe/Paris]")
public class ImageReadBarcodesParameters {
  public static final String SERIALIZED_NAME_FILE_ID = "FileId";
  @SerializedName(SERIALIZED_NAME_FILE_ID)
  private String fileId;

  public static final String SERIALIZED_NAME_PAGE_RANGE = "PageRange";
  @SerializedName(SERIALIZED_NAME_PAGE_RANGE)
  private String pageRange;

  public static final String SERIALIZED_NAME_ROI_LEFT = "RoiLeft";
  @SerializedName(SERIALIZED_NAME_ROI_LEFT)
  private Integer roiLeft = 0;

  public static final String SERIALIZED_NAME_ROI_TOP = "RoiTop";
  @SerializedName(SERIALIZED_NAME_ROI_TOP)
  private Integer roiTop = 0;

  public static final String SERIALIZED_NAME_ROI_WIDTH = "RoiWidth";
  @SerializedName(SERIALIZED_NAME_ROI_WIDTH)
  private Integer roiWidth = 0;

  public static final String SERIALIZED_NAME_ROI_HEIGHT = "RoiHeight";
  @SerializedName(SERIALIZED_NAME_ROI_HEIGHT)
  private Integer roiHeight = 0;

  public static final String SERIALIZED_NAME_SCAN_MODE = "ScanMode";
  @SerializedName(SERIALIZED_NAME_SCAN_MODE)
  private ScanMode scanMode;

  public static final String SERIALIZED_NAME_SCAN_BARCODE1_D = "ScanBarcode1D";
  @SerializedName(SERIALIZED_NAME_SCAN_BARCODE1_D)
  private Boolean scanBarcode1D = true;

  public static final String SERIALIZED_NAME_SCAN_BARCODE_Q_R = "ScanBarcodeQR";
  @SerializedName(SERIALIZED_NAME_SCAN_BARCODE_Q_R)
  private Boolean scanBarcodeQR = true;

  public static final String SERIALIZED_NAME_SCAN_BARCODE_MICRO_Q_R = "ScanBarcodeMicroQR";
  @SerializedName(SERIALIZED_NAME_SCAN_BARCODE_MICRO_Q_R)
  private Boolean scanBarcodeMicroQR = true;

  public static final String SERIALIZED_NAME_SCAN_BARCODE_P_D_F417 = "ScanBarcodePDF417";
  @SerializedName(SERIALIZED_NAME_SCAN_BARCODE_P_D_F417)
  private Boolean scanBarcodePDF417 = true;

  public static final String SERIALIZED_NAME_SCAN_BARCODE_DATA_MATRIX = "ScanBarcodeDataMatrix";
  @SerializedName(SERIALIZED_NAME_SCAN_BARCODE_DATA_MATRIX)
  private Boolean scanBarcodeDataMatrix = true;

  public static final String SERIALIZED_NAME_SCAN_BARCODE_AZTEC = "ScanBarcodeAztec";
  @SerializedName(SERIALIZED_NAME_SCAN_BARCODE_AZTEC)
  private Boolean scanBarcodeAztec = true;


  public ImageReadBarcodesParameters fileId(String fileId) {
    
    this.fileId = fileId;
    return this;
  }

   /**
   * The identifier of the previously uploaded file to be processed.
   * @return fileId
  **/
  @ApiModelProperty(required = true, value = "The identifier of the previously uploaded file to be processed.")

  public String getFileId() {
    return fileId;
  }


  public void setFileId(String fileId) {
    this.fileId = fileId;
  }


  public ImageReadBarcodesParameters pageRange(String pageRange) {
    
    this.pageRange = pageRange;
    return this;
  }

   /**
   * Specifies the number of the page, or the range of pages to read the barcodes from.
   * @return pageRange
  **/
  @ApiModelProperty(required = true, value = "Specifies the number of the page, or the range of pages to read the barcodes from.")

  public String getPageRange() {
    return pageRange;
  }


  public void setPageRange(String pageRange) {
    this.pageRange = pageRange;
  }


  public ImageReadBarcodesParameters roiLeft(Integer roiLeft) {
    
    this.roiLeft = roiLeft;
    return this;
  }

   /**
   * Specifies the left coordinate, in pixel, of the region to process.
   * @return roiLeft
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the left coordinate, in pixel, of the region to process.")

  public Integer getRoiLeft() {
    return roiLeft;
  }


  public void setRoiLeft(Integer roiLeft) {
    this.roiLeft = roiLeft;
  }


  public ImageReadBarcodesParameters roiTop(Integer roiTop) {
    
    this.roiTop = roiTop;
    return this;
  }

   /**
   * Specifies the top coordinate, in pixel, of the region to process.
   * @return roiTop
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the top coordinate, in pixel, of the region to process.")

  public Integer getRoiTop() {
    return roiTop;
  }


  public void setRoiTop(Integer roiTop) {
    this.roiTop = roiTop;
  }


  public ImageReadBarcodesParameters roiWidth(Integer roiWidth) {
    
    this.roiWidth = roiWidth;
    return this;
  }

   /**
   * Specifies the width, in pixel, of the region to process. 0 causes the entire image to be processed.
   * @return roiWidth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the width, in pixel, of the region to process. 0 causes the entire image to be processed.")

  public Integer getRoiWidth() {
    return roiWidth;
  }


  public void setRoiWidth(Integer roiWidth) {
    this.roiWidth = roiWidth;
  }


  public ImageReadBarcodesParameters roiHeight(Integer roiHeight) {
    
    this.roiHeight = roiHeight;
    return this;
  }

   /**
   * Specifies the height, in pixel, of the region to process. 0 causes the entire image to be processed.
   * @return roiHeight
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the height, in pixel, of the region to process. 0 causes the entire image to be processed.")

  public Integer getRoiHeight() {
    return roiHeight;
  }


  public void setRoiHeight(Integer roiHeight) {
    this.roiHeight = roiHeight;
  }


  public ImageReadBarcodesParameters scanMode(ScanMode scanMode) {
    
    this.scanMode = scanMode;
    return this;
  }

   /**
   * Get scanMode
   * @return scanMode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ScanMode getScanMode() {
    return scanMode;
  }


  public void setScanMode(ScanMode scanMode) {
    this.scanMode = scanMode;
  }


  public ImageReadBarcodesParameters scanBarcode1D(Boolean scanBarcode1D) {
    
    this.scanBarcode1D = scanBarcode1D;
    return this;
  }

   /**
   * Specifies whether the barcodes of type 1D shall be read.
   * @return scanBarcode1D
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the barcodes of type 1D shall be read.")

  public Boolean getScanBarcode1D() {
    return scanBarcode1D;
  }


  public void setScanBarcode1D(Boolean scanBarcode1D) {
    this.scanBarcode1D = scanBarcode1D;
  }


  public ImageReadBarcodesParameters scanBarcodeQR(Boolean scanBarcodeQR) {
    
    this.scanBarcodeQR = scanBarcodeQR;
    return this;
  }

   /**
   * Specifies whether the barcodes of type QR shall be read.
   * @return scanBarcodeQR
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the barcodes of type QR shall be read.")

  public Boolean getScanBarcodeQR() {
    return scanBarcodeQR;
  }


  public void setScanBarcodeQR(Boolean scanBarcodeQR) {
    this.scanBarcodeQR = scanBarcodeQR;
  }


  public ImageReadBarcodesParameters scanBarcodeMicroQR(Boolean scanBarcodeMicroQR) {
    
    this.scanBarcodeMicroQR = scanBarcodeMicroQR;
    return this;
  }

   /**
   * Specifies whether the barcodes of type Micro QR shall be read.
   * @return scanBarcodeMicroQR
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the barcodes of type Micro QR shall be read.")

  public Boolean getScanBarcodeMicroQR() {
    return scanBarcodeMicroQR;
  }


  public void setScanBarcodeMicroQR(Boolean scanBarcodeMicroQR) {
    this.scanBarcodeMicroQR = scanBarcodeMicroQR;
  }


  public ImageReadBarcodesParameters scanBarcodePDF417(Boolean scanBarcodePDF417) {
    
    this.scanBarcodePDF417 = scanBarcodePDF417;
    return this;
  }

   /**
   * Specifies whether the barcodes of type PDF 147 shall be read.
   * @return scanBarcodePDF417
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the barcodes of type PDF 147 shall be read.")

  public Boolean getScanBarcodePDF417() {
    return scanBarcodePDF417;
  }


  public void setScanBarcodePDF417(Boolean scanBarcodePDF417) {
    this.scanBarcodePDF417 = scanBarcodePDF417;
  }


  public ImageReadBarcodesParameters scanBarcodeDataMatrix(Boolean scanBarcodeDataMatrix) {
    
    this.scanBarcodeDataMatrix = scanBarcodeDataMatrix;
    return this;
  }

   /**
   * Specifies whether the barcodes of type Data Matrix shall be read.
   * @return scanBarcodeDataMatrix
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the barcodes of type Data Matrix shall be read.")

  public Boolean getScanBarcodeDataMatrix() {
    return scanBarcodeDataMatrix;
  }


  public void setScanBarcodeDataMatrix(Boolean scanBarcodeDataMatrix) {
    this.scanBarcodeDataMatrix = scanBarcodeDataMatrix;
  }


  public ImageReadBarcodesParameters scanBarcodeAztec(Boolean scanBarcodeAztec) {
    
    this.scanBarcodeAztec = scanBarcodeAztec;
    return this;
  }

   /**
   * Specifies whether the barcodes of type Aztec shall be read.
   * @return scanBarcodeAztec
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the barcodes of type Aztec shall be read.")

  public Boolean getScanBarcodeAztec() {
    return scanBarcodeAztec;
  }


  public void setScanBarcodeAztec(Boolean scanBarcodeAztec) {
    this.scanBarcodeAztec = scanBarcodeAztec;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImageReadBarcodesParameters imageReadBarcodesParameters = (ImageReadBarcodesParameters) o;
    return Objects.equals(this.fileId, imageReadBarcodesParameters.fileId) &&
        Objects.equals(this.pageRange, imageReadBarcodesParameters.pageRange) &&
        Objects.equals(this.roiLeft, imageReadBarcodesParameters.roiLeft) &&
        Objects.equals(this.roiTop, imageReadBarcodesParameters.roiTop) &&
        Objects.equals(this.roiWidth, imageReadBarcodesParameters.roiWidth) &&
        Objects.equals(this.roiHeight, imageReadBarcodesParameters.roiHeight) &&
        Objects.equals(this.scanMode, imageReadBarcodesParameters.scanMode) &&
        Objects.equals(this.scanBarcode1D, imageReadBarcodesParameters.scanBarcode1D) &&
        Objects.equals(this.scanBarcodeQR, imageReadBarcodesParameters.scanBarcodeQR) &&
        Objects.equals(this.scanBarcodeMicroQR, imageReadBarcodesParameters.scanBarcodeMicroQR) &&
        Objects.equals(this.scanBarcodePDF417, imageReadBarcodesParameters.scanBarcodePDF417) &&
        Objects.equals(this.scanBarcodeDataMatrix, imageReadBarcodesParameters.scanBarcodeDataMatrix) &&
        Objects.equals(this.scanBarcodeAztec, imageReadBarcodesParameters.scanBarcodeAztec);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fileId, pageRange, roiLeft, roiTop, roiWidth, roiHeight, scanMode, scanBarcode1D, scanBarcodeQR, scanBarcodeMicroQR, scanBarcodePDF417, scanBarcodeDataMatrix, scanBarcodeAztec);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImageReadBarcodesParameters {\n");
    sb.append("    fileId: ").append(toIndentedString(fileId)).append("\n");
    sb.append("    pageRange: ").append(toIndentedString(pageRange)).append("\n");
    sb.append("    roiLeft: ").append(toIndentedString(roiLeft)).append("\n");
    sb.append("    roiTop: ").append(toIndentedString(roiTop)).append("\n");
    sb.append("    roiWidth: ").append(toIndentedString(roiWidth)).append("\n");
    sb.append("    roiHeight: ").append(toIndentedString(roiHeight)).append("\n");
    sb.append("    scanMode: ").append(toIndentedString(scanMode)).append("\n");
    sb.append("    scanBarcode1D: ").append(toIndentedString(scanBarcode1D)).append("\n");
    sb.append("    scanBarcodeQR: ").append(toIndentedString(scanBarcodeQR)).append("\n");
    sb.append("    scanBarcodeMicroQR: ").append(toIndentedString(scanBarcodeMicroQR)).append("\n");
    sb.append("    scanBarcodePDF417: ").append(toIndentedString(scanBarcodePDF417)).append("\n");
    sb.append("    scanBarcodeDataMatrix: ").append(toIndentedString(scanBarcodeDataMatrix)).append("\n");
    sb.append("    scanBarcodeAztec: ").append(toIndentedString(scanBarcodeAztec)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


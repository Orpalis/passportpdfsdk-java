/*
 * PassportPDF API
 * Another brick in the cloud
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.ImageQuality;
import org.openapitools.client.model.PdfVersion;

/**
 * Represents the parameters for a reduce action.
 */
@ApiModel(description = "Represents the parameters for a reduce action.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-04-27T13:23:36.328+02:00[Europe/Paris]")
public class PdfReduceParameters {
  public static final String SERIALIZED_NAME_FILE_ID = "FileId";
  @SerializedName(SERIALIZED_NAME_FILE_ID)
  private String fileId;

  public static final String SERIALIZED_NAME_OUTPUT_VERSION = "OutputVersion";
  @SerializedName(SERIALIZED_NAME_OUTPUT_VERSION)
  private PdfVersion outputVersion;

  public static final String SERIALIZED_NAME_IMAGE_QUALITY = "ImageQuality";
  @SerializedName(SERIALIZED_NAME_IMAGE_QUALITY)
  private ImageQuality imageQuality;

  public static final String SERIALIZED_NAME_RECOMPRESS_IMAGES = "RecompressImages";
  @SerializedName(SERIALIZED_NAME_RECOMPRESS_IMAGES)
  private Boolean recompressImages = true;

  public static final String SERIALIZED_NAME_ENABLE_COLOR_DETECTION = "EnableColorDetection";
  @SerializedName(SERIALIZED_NAME_ENABLE_COLOR_DETECTION)
  private Boolean enableColorDetection = true;

  public static final String SERIALIZED_NAME_PACK_DOCUMENT = "PackDocument";
  @SerializedName(SERIALIZED_NAME_PACK_DOCUMENT)
  private Boolean packDocument = true;

  public static final String SERIALIZED_NAME_PACK_FONTS = "PackFonts";
  @SerializedName(SERIALIZED_NAME_PACK_FONTS)
  private Boolean packFonts = true;

  public static final String SERIALIZED_NAME_DOWNSCALE_IMAGES = "DownscaleImages";
  @SerializedName(SERIALIZED_NAME_DOWNSCALE_IMAGES)
  private Boolean downscaleImages = true;

  public static final String SERIALIZED_NAME_DOWNSCALE_RESOLUTION = "DownscaleResolution";
  @SerializedName(SERIALIZED_NAME_DOWNSCALE_RESOLUTION)
  private Integer downscaleResolution = 150;

  public static final String SERIALIZED_NAME_FAST_WEB_VIEW = "FastWebView";
  @SerializedName(SERIALIZED_NAME_FAST_WEB_VIEW)
  private Boolean fastWebView = false;

  public static final String SERIALIZED_NAME_REMOVE_FORM_FIELDS = "RemoveFormFields";
  @SerializedName(SERIALIZED_NAME_REMOVE_FORM_FIELDS)
  private Boolean removeFormFields = false;

  public static final String SERIALIZED_NAME_REMOVE_ANNOTATIONS = "RemoveAnnotations";
  @SerializedName(SERIALIZED_NAME_REMOVE_ANNOTATIONS)
  private Boolean removeAnnotations = false;

  public static final String SERIALIZED_NAME_REMOVE_BOOKMARKS = "RemoveBookmarks";
  @SerializedName(SERIALIZED_NAME_REMOVE_BOOKMARKS)
  private Boolean removeBookmarks = false;

  public static final String SERIALIZED_NAME_REMOVE_HYPERLINKS = "RemoveHyperlinks";
  @SerializedName(SERIALIZED_NAME_REMOVE_HYPERLINKS)
  private Boolean removeHyperlinks = false;

  public static final String SERIALIZED_NAME_REMOVE_EMBEDDED_FILES = "RemoveEmbeddedFiles";
  @SerializedName(SERIALIZED_NAME_REMOVE_EMBEDDED_FILES)
  private Boolean removeEmbeddedFiles = false;

  public static final String SERIALIZED_NAME_REMOVE_BLANK_PAGES = "RemoveBlankPages";
  @SerializedName(SERIALIZED_NAME_REMOVE_BLANK_PAGES)
  private Boolean removeBlankPages = false;

  public static final String SERIALIZED_NAME_REMOVE_JAVA_SCRIPT = "RemoveJavaScript";
  @SerializedName(SERIALIZED_NAME_REMOVE_JAVA_SCRIPT)
  private Boolean removeJavaScript = false;

  public static final String SERIALIZED_NAME_ENABLE_J_P_E_G2000 = "EnableJPEG2000";
  @SerializedName(SERIALIZED_NAME_ENABLE_J_P_E_G2000)
  private Boolean enableJPEG2000 = true;

  public static final String SERIALIZED_NAME_ENABLE_J_B_I_G2 = "EnableJBIG2";
  @SerializedName(SERIALIZED_NAME_ENABLE_J_B_I_G2)
  private Boolean enableJBIG2 = true;

  public static final String SERIALIZED_NAME_ENABLE_CHAR_REPAIR = "EnableCharRepair";
  @SerializedName(SERIALIZED_NAME_ENABLE_CHAR_REPAIR)
  private Boolean enableCharRepair = false;

  public static final String SERIALIZED_NAME_ENABLE_M_R_C = "EnableMRC";
  @SerializedName(SERIALIZED_NAME_ENABLE_M_R_C)
  private Boolean enableMRC = false;

  public static final String SERIALIZED_NAME_PRESERVE_SMOOTHING = "PreserveSmoothing";
  @SerializedName(SERIALIZED_NAME_PRESERVE_SMOOTHING)
  private Boolean preserveSmoothing = false;

  public static final String SERIALIZED_NAME_DOWNSCALE_RESOLUTION_M_R_C = "DownscaleResolutionMRC";
  @SerializedName(SERIALIZED_NAME_DOWNSCALE_RESOLUTION_M_R_C)
  private Integer downscaleResolutionMRC = 100;

  public static final String SERIALIZED_NAME_REMOVE_METADATA = "RemoveMetadata";
  @SerializedName(SERIALIZED_NAME_REMOVE_METADATA)
  private Boolean removeMetadata = false;

  public static final String SERIALIZED_NAME_REMOVE_PAGE_THUMBNAILS = "RemovePageThumbnails";
  @SerializedName(SERIALIZED_NAME_REMOVE_PAGE_THUMBNAILS)
  private Boolean removePageThumbnails = false;

  public static final String SERIALIZED_NAME_REMOVE_PAGE_PIECE_INFO = "RemovePagePieceInfo";
  @SerializedName(SERIALIZED_NAME_REMOVE_PAGE_PIECE_INFO)
  private Boolean removePagePieceInfo = false;

  public static final String SERIALIZED_NAME_JB_I_G2_P_M_S_THRESHOLD = "JBIG2PMSThreshold";
  @SerializedName(SERIALIZED_NAME_JB_I_G2_P_M_S_THRESHOLD)
  private Float jbIG2PMSThreshold = 0.85f;


  public PdfReduceParameters fileId(String fileId) {
    
    this.fileId = fileId;
    return this;
  }

   /**
   * The identifier of the previously uploaded file to be processed.
   * @return fileId
  **/
  @ApiModelProperty(required = true, value = "The identifier of the previously uploaded file to be processed.")

  public String getFileId() {
    return fileId;
  }


  public void setFileId(String fileId) {
    this.fileId = fileId;
  }


  public PdfReduceParameters outputVersion(PdfVersion outputVersion) {
    
    this.outputVersion = outputVersion;
    return this;
  }

   /**
   * Get outputVersion
   * @return outputVersion
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PdfVersion getOutputVersion() {
    return outputVersion;
  }


  public void setOutputVersion(PdfVersion outputVersion) {
    this.outputVersion = outputVersion;
  }


  public PdfReduceParameters imageQuality(ImageQuality imageQuality) {
    
    this.imageQuality = imageQuality;
    return this;
  }

   /**
   * Get imageQuality
   * @return imageQuality
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ImageQuality getImageQuality() {
    return imageQuality;
  }


  public void setImageQuality(ImageQuality imageQuality) {
    this.imageQuality = imageQuality;
  }


  public PdfReduceParameters recompressImages(Boolean recompressImages) {
    
    this.recompressImages = recompressImages;
    return this;
  }

   /**
   * Specifies whether the images from the PDF shall be recompressed.
   * @return recompressImages
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the images from the PDF shall be recompressed.")

  public Boolean getRecompressImages() {
    return recompressImages;
  }


  public void setRecompressImages(Boolean recompressImages) {
    this.recompressImages = recompressImages;
  }


  public PdfReduceParameters enableColorDetection(Boolean enableColorDetection) {
    
    this.enableColorDetection = enableColorDetection;
    return this;
  }

   /**
   * Specifies whether color detection must be performed on the images from the PDF.
   * @return enableColorDetection
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether color detection must be performed on the images from the PDF.")

  public Boolean getEnableColorDetection() {
    return enableColorDetection;
  }


  public void setEnableColorDetection(Boolean enableColorDetection) {
    this.enableColorDetection = enableColorDetection;
  }


  public PdfReduceParameters packDocument(Boolean packDocument) {
    
    this.packDocument = packDocument;
    return this;
  }

   /**
   * Specifies whether the PDF shall be packed when saved in order to reduce its size.
   * @return packDocument
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the PDF shall be packed when saved in order to reduce its size.")

  public Boolean getPackDocument() {
    return packDocument;
  }


  public void setPackDocument(Boolean packDocument) {
    this.packDocument = packDocument;
  }


  public PdfReduceParameters packFonts(Boolean packFonts) {
    
    this.packFonts = packFonts;
    return this;
  }

   /**
   * Specifies whether the PDF fonts must be packed in order to reduce their size.
   * @return packFonts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the PDF fonts must be packed in order to reduce their size.")

  public Boolean getPackFonts() {
    return packFonts;
  }


  public void setPackFonts(Boolean packFonts) {
    this.packFonts = packFonts;
  }


  public PdfReduceParameters downscaleImages(Boolean downscaleImages) {
    
    this.downscaleImages = downscaleImages;
    return this;
  }

   /**
   * Specifies whether the images from the PDF shall be downscaled.
   * @return downscaleImages
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the images from the PDF shall be downscaled.")

  public Boolean getDownscaleImages() {
    return downscaleImages;
  }


  public void setDownscaleImages(Boolean downscaleImages) {
    this.downscaleImages = downscaleImages;
  }


  public PdfReduceParameters downscaleResolution(Integer downscaleResolution) {
    
    this.downscaleResolution = downscaleResolution;
    return this;
  }

   /**
   * Specifies the resolution to be used to downscale images.
   * @return downscaleResolution
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the resolution to be used to downscale images.")

  public Integer getDownscaleResolution() {
    return downscaleResolution;
  }


  public void setDownscaleResolution(Integer downscaleResolution) {
    this.downscaleResolution = downscaleResolution;
  }


  public PdfReduceParameters fastWebView(Boolean fastWebView) {
    
    this.fastWebView = fastWebView;
    return this;
  }

   /**
   * Specifies whether the PDF shall be optimized for online distribution.
   * @return fastWebView
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the PDF shall be optimized for online distribution.")

  public Boolean getFastWebView() {
    return fastWebView;
  }


  public void setFastWebView(Boolean fastWebView) {
    this.fastWebView = fastWebView;
  }


  public PdfReduceParameters removeFormFields(Boolean removeFormFields) {
    
    this.removeFormFields = removeFormFields;
    return this;
  }

   /**
   * Specifies whether the form fields shall be removed from the PDF.
   * @return removeFormFields
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the form fields shall be removed from the PDF.")

  public Boolean getRemoveFormFields() {
    return removeFormFields;
  }


  public void setRemoveFormFields(Boolean removeFormFields) {
    this.removeFormFields = removeFormFields;
  }


  public PdfReduceParameters removeAnnotations(Boolean removeAnnotations) {
    
    this.removeAnnotations = removeAnnotations;
    return this;
  }

   /**
   * Specifies whether the annotations shall be removed from the PDF.
   * @return removeAnnotations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the annotations shall be removed from the PDF.")

  public Boolean getRemoveAnnotations() {
    return removeAnnotations;
  }


  public void setRemoveAnnotations(Boolean removeAnnotations) {
    this.removeAnnotations = removeAnnotations;
  }


  public PdfReduceParameters removeBookmarks(Boolean removeBookmarks) {
    
    this.removeBookmarks = removeBookmarks;
    return this;
  }

   /**
   * Specifies whether the bookmarks shall be removed from the PDF.
   * @return removeBookmarks
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the bookmarks shall be removed from the PDF.")

  public Boolean getRemoveBookmarks() {
    return removeBookmarks;
  }


  public void setRemoveBookmarks(Boolean removeBookmarks) {
    this.removeBookmarks = removeBookmarks;
  }


  public PdfReduceParameters removeHyperlinks(Boolean removeHyperlinks) {
    
    this.removeHyperlinks = removeHyperlinks;
    return this;
  }

   /**
   * Specifies whether the hyperlinks shall be removed from the PDF.
   * @return removeHyperlinks
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the hyperlinks shall be removed from the PDF.")

  public Boolean getRemoveHyperlinks() {
    return removeHyperlinks;
  }


  public void setRemoveHyperlinks(Boolean removeHyperlinks) {
    this.removeHyperlinks = removeHyperlinks;
  }


  public PdfReduceParameters removeEmbeddedFiles(Boolean removeEmbeddedFiles) {
    
    this.removeEmbeddedFiles = removeEmbeddedFiles;
    return this;
  }

   /**
   * Specifies whether the embedded files shall be removed from the PDF.
   * @return removeEmbeddedFiles
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the embedded files shall be removed from the PDF.")

  public Boolean getRemoveEmbeddedFiles() {
    return removeEmbeddedFiles;
  }


  public void setRemoveEmbeddedFiles(Boolean removeEmbeddedFiles) {
    this.removeEmbeddedFiles = removeEmbeddedFiles;
  }


  public PdfReduceParameters removeBlankPages(Boolean removeBlankPages) {
    
    this.removeBlankPages = removeBlankPages;
    return this;
  }

   /**
   * Specifies whether the blank pages shall be removed.
   * @return removeBlankPages
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the blank pages shall be removed.")

  public Boolean getRemoveBlankPages() {
    return removeBlankPages;
  }


  public void setRemoveBlankPages(Boolean removeBlankPages) {
    this.removeBlankPages = removeBlankPages;
  }


  public PdfReduceParameters removeJavaScript(Boolean removeJavaScript) {
    
    this.removeJavaScript = removeJavaScript;
    return this;
  }

   /**
   * Specifies whether the JavaScript shall be removed.
   * @return removeJavaScript
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the JavaScript shall be removed.")

  public Boolean getRemoveJavaScript() {
    return removeJavaScript;
  }


  public void setRemoveJavaScript(Boolean removeJavaScript) {
    this.removeJavaScript = removeJavaScript;
  }


  public PdfReduceParameters enableJPEG2000(Boolean enableJPEG2000) {
    
    this.enableJPEG2000 = enableJPEG2000;
    return this;
  }

   /**
   * Specifies whether the JPEG2000 compression scheme shall be used to compress the images of the PDF.
   * @return enableJPEG2000
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the JPEG2000 compression scheme shall be used to compress the images of the PDF.")

  public Boolean getEnableJPEG2000() {
    return enableJPEG2000;
  }


  public void setEnableJPEG2000(Boolean enableJPEG2000) {
    this.enableJPEG2000 = enableJPEG2000;
  }


  public PdfReduceParameters enableJBIG2(Boolean enableJBIG2) {
    
    this.enableJBIG2 = enableJBIG2;
    return this;
  }

   /**
   * Specifies whether the JBIG2 compression scheme shall be used to compress the bitonal images of the PDF.
   * @return enableJBIG2
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the JBIG2 compression scheme shall be used to compress the bitonal images of the PDF.")

  public Boolean getEnableJBIG2() {
    return enableJBIG2;
  }


  public void setEnableJBIG2(Boolean enableJBIG2) {
    this.enableJBIG2 = enableJBIG2;
  }


  public PdfReduceParameters enableCharRepair(Boolean enableCharRepair) {
    
    this.enableCharRepair = enableCharRepair;
    return this;
  }

   /**
   * Specifies whether characters repairing shall be performed during bitonal conversion.
   * @return enableCharRepair
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether characters repairing shall be performed during bitonal conversion.")

  public Boolean getEnableCharRepair() {
    return enableCharRepair;
  }


  public void setEnableCharRepair(Boolean enableCharRepair) {
    this.enableCharRepair = enableCharRepair;
  }


  public PdfReduceParameters enableMRC(Boolean enableMRC) {
    
    this.enableMRC = enableMRC;
    return this;
  }

   /**
   * Specifies whether MRC shall be used for compressing the PDF contents.
   * @return enableMRC
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether MRC shall be used for compressing the PDF contents.")

  public Boolean getEnableMRC() {
    return enableMRC;
  }


  public void setEnableMRC(Boolean enableMRC) {
    this.enableMRC = enableMRC;
  }


  public PdfReduceParameters preserveSmoothing(Boolean preserveSmoothing) {
    
    this.preserveSmoothing = preserveSmoothing;
    return this;
  }

   /**
   * Specifies if the MRC engine shall try to preserve smoothing between different layers.
   * @return preserveSmoothing
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies if the MRC engine shall try to preserve smoothing between different layers.")

  public Boolean getPreserveSmoothing() {
    return preserveSmoothing;
  }


  public void setPreserveSmoothing(Boolean preserveSmoothing) {
    this.preserveSmoothing = preserveSmoothing;
  }


  public PdfReduceParameters downscaleResolutionMRC(Integer downscaleResolutionMRC) {
    
    this.downscaleResolutionMRC = downscaleResolutionMRC;
    return this;
  }

   /**
   * Specifies the resolution for downscaling the background layer by the MRC engine, if any.
   * @return downscaleResolutionMRC
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the resolution for downscaling the background layer by the MRC engine, if any.")

  public Integer getDownscaleResolutionMRC() {
    return downscaleResolutionMRC;
  }


  public void setDownscaleResolutionMRC(Integer downscaleResolutionMRC) {
    this.downscaleResolutionMRC = downscaleResolutionMRC;
  }


  public PdfReduceParameters removeMetadata(Boolean removeMetadata) {
    
    this.removeMetadata = removeMetadata;
    return this;
  }

   /**
   * Specifies whether the metadata shall be removed.
   * @return removeMetadata
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the metadata shall be removed.")

  public Boolean getRemoveMetadata() {
    return removeMetadata;
  }


  public void setRemoveMetadata(Boolean removeMetadata) {
    this.removeMetadata = removeMetadata;
  }


  public PdfReduceParameters removePageThumbnails(Boolean removePageThumbnails) {
    
    this.removePageThumbnails = removePageThumbnails;
    return this;
  }

   /**
   * Specifies whether the page thumbnails shall be removed.
   * @return removePageThumbnails
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the page thumbnails shall be removed.")

  public Boolean getRemovePageThumbnails() {
    return removePageThumbnails;
  }


  public void setRemovePageThumbnails(Boolean removePageThumbnails) {
    this.removePageThumbnails = removePageThumbnails;
  }


  public PdfReduceParameters removePagePieceInfo(Boolean removePagePieceInfo) {
    
    this.removePagePieceInfo = removePagePieceInfo;
    return this;
  }

   /**
   * Specifies whether the page PieceInfo dictionary used to hold private application data shall be removed.
   * @return removePagePieceInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the page PieceInfo dictionary used to hold private application data shall be removed.")

  public Boolean getRemovePagePieceInfo() {
    return removePagePieceInfo;
  }


  public void setRemovePagePieceInfo(Boolean removePagePieceInfo) {
    this.removePagePieceInfo = removePagePieceInfo;
  }


  public PdfReduceParameters jbIG2PMSThreshold(Float jbIG2PMSThreshold) {
    
    this.jbIG2PMSThreshold = jbIG2PMSThreshold;
    return this;
  }

   /**
   * Specifies the threshold value for the JBIG2 encoder pattern matching and substitution between 0 and 1. Any number lower than 1 may lead to lossy compression.
   * @return jbIG2PMSThreshold
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the threshold value for the JBIG2 encoder pattern matching and substitution between 0 and 1. Any number lower than 1 may lead to lossy compression.")

  public Float getJbIG2PMSThreshold() {
    return jbIG2PMSThreshold;
  }


  public void setJbIG2PMSThreshold(Float jbIG2PMSThreshold) {
    this.jbIG2PMSThreshold = jbIG2PMSThreshold;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PdfReduceParameters pdfReduceParameters = (PdfReduceParameters) o;
    return Objects.equals(this.fileId, pdfReduceParameters.fileId) &&
        Objects.equals(this.outputVersion, pdfReduceParameters.outputVersion) &&
        Objects.equals(this.imageQuality, pdfReduceParameters.imageQuality) &&
        Objects.equals(this.recompressImages, pdfReduceParameters.recompressImages) &&
        Objects.equals(this.enableColorDetection, pdfReduceParameters.enableColorDetection) &&
        Objects.equals(this.packDocument, pdfReduceParameters.packDocument) &&
        Objects.equals(this.packFonts, pdfReduceParameters.packFonts) &&
        Objects.equals(this.downscaleImages, pdfReduceParameters.downscaleImages) &&
        Objects.equals(this.downscaleResolution, pdfReduceParameters.downscaleResolution) &&
        Objects.equals(this.fastWebView, pdfReduceParameters.fastWebView) &&
        Objects.equals(this.removeFormFields, pdfReduceParameters.removeFormFields) &&
        Objects.equals(this.removeAnnotations, pdfReduceParameters.removeAnnotations) &&
        Objects.equals(this.removeBookmarks, pdfReduceParameters.removeBookmarks) &&
        Objects.equals(this.removeHyperlinks, pdfReduceParameters.removeHyperlinks) &&
        Objects.equals(this.removeEmbeddedFiles, pdfReduceParameters.removeEmbeddedFiles) &&
        Objects.equals(this.removeBlankPages, pdfReduceParameters.removeBlankPages) &&
        Objects.equals(this.removeJavaScript, pdfReduceParameters.removeJavaScript) &&
        Objects.equals(this.enableJPEG2000, pdfReduceParameters.enableJPEG2000) &&
        Objects.equals(this.enableJBIG2, pdfReduceParameters.enableJBIG2) &&
        Objects.equals(this.enableCharRepair, pdfReduceParameters.enableCharRepair) &&
        Objects.equals(this.enableMRC, pdfReduceParameters.enableMRC) &&
        Objects.equals(this.preserveSmoothing, pdfReduceParameters.preserveSmoothing) &&
        Objects.equals(this.downscaleResolutionMRC, pdfReduceParameters.downscaleResolutionMRC) &&
        Objects.equals(this.removeMetadata, pdfReduceParameters.removeMetadata) &&
        Objects.equals(this.removePageThumbnails, pdfReduceParameters.removePageThumbnails) &&
        Objects.equals(this.removePagePieceInfo, pdfReduceParameters.removePagePieceInfo) &&
        Objects.equals(this.jbIG2PMSThreshold, pdfReduceParameters.jbIG2PMSThreshold);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fileId, outputVersion, imageQuality, recompressImages, enableColorDetection, packDocument, packFonts, downscaleImages, downscaleResolution, fastWebView, removeFormFields, removeAnnotations, removeBookmarks, removeHyperlinks, removeEmbeddedFiles, removeBlankPages, removeJavaScript, enableJPEG2000, enableJBIG2, enableCharRepair, enableMRC, preserveSmoothing, downscaleResolutionMRC, removeMetadata, removePageThumbnails, removePagePieceInfo, jbIG2PMSThreshold);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PdfReduceParameters {\n");
    sb.append("    fileId: ").append(toIndentedString(fileId)).append("\n");
    sb.append("    outputVersion: ").append(toIndentedString(outputVersion)).append("\n");
    sb.append("    imageQuality: ").append(toIndentedString(imageQuality)).append("\n");
    sb.append("    recompressImages: ").append(toIndentedString(recompressImages)).append("\n");
    sb.append("    enableColorDetection: ").append(toIndentedString(enableColorDetection)).append("\n");
    sb.append("    packDocument: ").append(toIndentedString(packDocument)).append("\n");
    sb.append("    packFonts: ").append(toIndentedString(packFonts)).append("\n");
    sb.append("    downscaleImages: ").append(toIndentedString(downscaleImages)).append("\n");
    sb.append("    downscaleResolution: ").append(toIndentedString(downscaleResolution)).append("\n");
    sb.append("    fastWebView: ").append(toIndentedString(fastWebView)).append("\n");
    sb.append("    removeFormFields: ").append(toIndentedString(removeFormFields)).append("\n");
    sb.append("    removeAnnotations: ").append(toIndentedString(removeAnnotations)).append("\n");
    sb.append("    removeBookmarks: ").append(toIndentedString(removeBookmarks)).append("\n");
    sb.append("    removeHyperlinks: ").append(toIndentedString(removeHyperlinks)).append("\n");
    sb.append("    removeEmbeddedFiles: ").append(toIndentedString(removeEmbeddedFiles)).append("\n");
    sb.append("    removeBlankPages: ").append(toIndentedString(removeBlankPages)).append("\n");
    sb.append("    removeJavaScript: ").append(toIndentedString(removeJavaScript)).append("\n");
    sb.append("    enableJPEG2000: ").append(toIndentedString(enableJPEG2000)).append("\n");
    sb.append("    enableJBIG2: ").append(toIndentedString(enableJBIG2)).append("\n");
    sb.append("    enableCharRepair: ").append(toIndentedString(enableCharRepair)).append("\n");
    sb.append("    enableMRC: ").append(toIndentedString(enableMRC)).append("\n");
    sb.append("    preserveSmoothing: ").append(toIndentedString(preserveSmoothing)).append("\n");
    sb.append("    downscaleResolutionMRC: ").append(toIndentedString(downscaleResolutionMRC)).append("\n");
    sb.append("    removeMetadata: ").append(toIndentedString(removeMetadata)).append("\n");
    sb.append("    removePageThumbnails: ").append(toIndentedString(removePageThumbnails)).append("\n");
    sb.append("    removePagePieceInfo: ").append(toIndentedString(removePagePieceInfo)).append("\n");
    sb.append("    jbIG2PMSThreshold: ").append(toIndentedString(jbIG2PMSThreshold)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


/*
 * PassportPDF API
 * Another brick in the cloud
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import io.swagger.annotations.ApiModel;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Defines the different available icons for a rubber stamp annotation.
 */
@JsonAdapter(RubberStampAnnotationIcon.Adapter.class)
public enum RubberStampAnnotationIcon {
  
  APPROVED("Approved"),
  
  NOTAPPROVED("NotApproved"),
  
  NOTFORPUBLICRELEASE("NotForPublicRelease"),
  
  CONFIDENTIAL("Confidential"),
  
  FINAL("Final"),
  
  FORCOMMENT("ForComment"),
  
  DRAFT("Draft"),
  
  FORPUBLICRELEASE("ForPublicRelease"),
  
  SBCOMPLETED("SBCompleted"),
  
  SBINFORMATIONONLY("SBInformationOnly"),
  
  SBVOID("SBVoid"),
  
  SBPRELIMINARYRESULTS("SBPreliminaryResults"),
  
  SBREJECTED("SBRejected"),
  
  SHACCEPTED("SHAccepted"),
  
  SHINITIALHERE("SHInitialHere"),
  
  SHSIGNHERE("SHSignHere"),
  
  SHWITNESS("SHWitness"),
  
  DAPPROVED("DApproved"),
  
  DCONFIDENTIAL("DConfidential"),
  
  DRECEIVED("DReceived"),
  
  DREVIEWED("DReviewed");

  private String value;

  RubberStampAnnotationIcon(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static RubberStampAnnotationIcon fromValue(String value) {
    for (RubberStampAnnotationIcon b : RubberStampAnnotationIcon.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<RubberStampAnnotationIcon> {
    @Override
    public void write(final JsonWriter jsonWriter, final RubberStampAnnotationIcon enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public RubberStampAnnotationIcon read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return RubberStampAnnotationIcon.fromValue(value);
    }
  }
}


/*
 * PassportPDF API
 * Another brick in the cloud
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.CropUnit;

/**
 * Represents the parameters for an image crop action.
 */
@ApiModel(description = "Represents the parameters for an image crop action.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-04-27T13:23:36.328+02:00[Europe/Paris]")
public class ImageCropParameters {
  public static final String SERIALIZED_NAME_FILE_ID = "FileId";
  @SerializedName(SERIALIZED_NAME_FILE_ID)
  private String fileId;

  public static final String SERIALIZED_NAME_PAGE_RANGE = "PageRange";
  @SerializedName(SERIALIZED_NAME_PAGE_RANGE)
  private String pageRange;

  public static final String SERIALIZED_NAME_CROP_BOX_LEFT = "CropBoxLeft";
  @SerializedName(SERIALIZED_NAME_CROP_BOX_LEFT)
  private Integer cropBoxLeft;

  public static final String SERIALIZED_NAME_CROP_BOX_TOP = "CropBoxTop";
  @SerializedName(SERIALIZED_NAME_CROP_BOX_TOP)
  private Integer cropBoxTop;

  public static final String SERIALIZED_NAME_CROP_BOX_WIDTH = "CropBoxWidth";
  @SerializedName(SERIALIZED_NAME_CROP_BOX_WIDTH)
  private Integer cropBoxWidth;

  public static final String SERIALIZED_NAME_CROP_BOX_HEIGHT = "CropBoxHeight";
  @SerializedName(SERIALIZED_NAME_CROP_BOX_HEIGHT)
  private Integer cropBoxHeight;

  public static final String SERIALIZED_NAME_CROP_UNIT = "CropUnit";
  @SerializedName(SERIALIZED_NAME_CROP_UNIT)
  private CropUnit cropUnit;


  public ImageCropParameters fileId(String fileId) {
    
    this.fileId = fileId;
    return this;
  }

   /**
   * The identifier of the previously uploaded file to be processed.
   * @return fileId
  **/
  @ApiModelProperty(required = true, value = "The identifier of the previously uploaded file to be processed.")

  public String getFileId() {
    return fileId;
  }


  public void setFileId(String fileId) {
    this.fileId = fileId;
  }


  public ImageCropParameters pageRange(String pageRange) {
    
    this.pageRange = pageRange;
    return this;
  }

   /**
   * Specifies the number of the page, or the range of pages to crop.
   * @return pageRange
  **/
  @ApiModelProperty(required = true, value = "Specifies the number of the page, or the range of pages to crop.")

  public String getPageRange() {
    return pageRange;
  }


  public void setPageRange(String pageRange) {
    this.pageRange = pageRange;
  }


  public ImageCropParameters cropBoxLeft(Integer cropBoxLeft) {
    
    this.cropBoxLeft = cropBoxLeft;
    return this;
  }

   /**
   * Specifies the crop box left coordinate.
   * @return cropBoxLeft
  **/
  @ApiModelProperty(required = true, value = "Specifies the crop box left coordinate.")

  public Integer getCropBoxLeft() {
    return cropBoxLeft;
  }


  public void setCropBoxLeft(Integer cropBoxLeft) {
    this.cropBoxLeft = cropBoxLeft;
  }


  public ImageCropParameters cropBoxTop(Integer cropBoxTop) {
    
    this.cropBoxTop = cropBoxTop;
    return this;
  }

   /**
   * Specifies the crop box top coordinate.
   * @return cropBoxTop
  **/
  @ApiModelProperty(required = true, value = "Specifies the crop box top coordinate.")

  public Integer getCropBoxTop() {
    return cropBoxTop;
  }


  public void setCropBoxTop(Integer cropBoxTop) {
    this.cropBoxTop = cropBoxTop;
  }


  public ImageCropParameters cropBoxWidth(Integer cropBoxWidth) {
    
    this.cropBoxWidth = cropBoxWidth;
    return this;
  }

   /**
   * Specifies the crop box width.
   * @return cropBoxWidth
  **/
  @ApiModelProperty(required = true, value = "Specifies the crop box width.")

  public Integer getCropBoxWidth() {
    return cropBoxWidth;
  }


  public void setCropBoxWidth(Integer cropBoxWidth) {
    this.cropBoxWidth = cropBoxWidth;
  }


  public ImageCropParameters cropBoxHeight(Integer cropBoxHeight) {
    
    this.cropBoxHeight = cropBoxHeight;
    return this;
  }

   /**
   * Specifies the crop box height.
   * @return cropBoxHeight
  **/
  @ApiModelProperty(required = true, value = "Specifies the crop box height.")

  public Integer getCropBoxHeight() {
    return cropBoxHeight;
  }


  public void setCropBoxHeight(Integer cropBoxHeight) {
    this.cropBoxHeight = cropBoxHeight;
  }


  public ImageCropParameters cropUnit(CropUnit cropUnit) {
    
    this.cropUnit = cropUnit;
    return this;
  }

   /**
   * Get cropUnit
   * @return cropUnit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CropUnit getCropUnit() {
    return cropUnit;
  }


  public void setCropUnit(CropUnit cropUnit) {
    this.cropUnit = cropUnit;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImageCropParameters imageCropParameters = (ImageCropParameters) o;
    return Objects.equals(this.fileId, imageCropParameters.fileId) &&
        Objects.equals(this.pageRange, imageCropParameters.pageRange) &&
        Objects.equals(this.cropBoxLeft, imageCropParameters.cropBoxLeft) &&
        Objects.equals(this.cropBoxTop, imageCropParameters.cropBoxTop) &&
        Objects.equals(this.cropBoxWidth, imageCropParameters.cropBoxWidth) &&
        Objects.equals(this.cropBoxHeight, imageCropParameters.cropBoxHeight) &&
        Objects.equals(this.cropUnit, imageCropParameters.cropUnit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fileId, pageRange, cropBoxLeft, cropBoxTop, cropBoxWidth, cropBoxHeight, cropUnit);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImageCropParameters {\n");
    sb.append("    fileId: ").append(toIndentedString(fileId)).append("\n");
    sb.append("    pageRange: ").append(toIndentedString(pageRange)).append("\n");
    sb.append("    cropBoxLeft: ").append(toIndentedString(cropBoxLeft)).append("\n");
    sb.append("    cropBoxTop: ").append(toIndentedString(cropBoxTop)).append("\n");
    sb.append("    cropBoxWidth: ").append(toIndentedString(cropBoxWidth)).append("\n");
    sb.append("    cropBoxHeight: ").append(toIndentedString(cropBoxHeight)).append("\n");
    sb.append("    cropUnit: ").append(toIndentedString(cropUnit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


/*
 * PassportPDF API
 * Another brick in the cloud
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import io.swagger.annotations.ApiModel;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Specifies a list of available image filters and effects.
 */
@JsonAdapter(ImageFilters.Adapter.class)
public enum ImageFilters {
  
  ADDNOISE("addNoise"),
  
  AQUA("aqua"),
  
  BLUR("blur"),
  
  DIFFUSE("diffuse"),
  
  FIRE("fire"),
  
  GRAYSCALE("grayscale"),
  
  SEPIA("sepia"),
  
  NEGATIVE("negative"),
  
  PIXELIZE("pixelize"),
  
  RELIEF("relief"),
  
  SCANLINE("scanLine"),
  
  SHARPEN("sharpen"),
  
  SMOOTH("smooth"),
  
  EDGEENHANCEMENT("edgeEnhancement"),
  
  CONTOUR("contour"),
  
  EMBOSS("emboss"),
  
  ENGRAVE("engrave"),
  
  DILATE("dilate"),
  
  ERODE("erode"),
  
  CONNECTEDCONTOUR("connectedContour"),
  
  SOFTEN("soften"),
  
  COLORIZE("colorize"),
  
  GAUSSIAN("gaussian"),
  
  MAX("max"),
  
  MIN("min"),
  
  MEDIAN("median"),
  
  SUBTRACTBACKGROUND("subtractBackground"),
  
  UNSHARPMASK("unsharpmask");

  private String value;

  ImageFilters(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static ImageFilters fromValue(String value) {
    for (ImageFilters b : ImageFilters.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<ImageFilters> {
    @Override
    public void write(final JsonWriter jsonWriter, final ImageFilters enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public ImageFilters read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return ImageFilters.fromValue(value);
    }
  }
}


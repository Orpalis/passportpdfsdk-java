/*
 * PassportPDF API
 * Another brick in the cloud
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.PdfConformance;
import org.openapitools.client.model.PdfImageCompressionScheme;

/**
 * Represents the parameters for a save as PDF action.
 */
@ApiModel(description = "Represents the parameters for a save as PDF action.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-04-27T13:23:36.328+02:00[Europe/Paris]")
public class ImageSaveAsPDFParameters {
  public static final String SERIALIZED_NAME_FILE_ID = "FileId";
  @SerializedName(SERIALIZED_NAME_FILE_ID)
  private String fileId;

  public static final String SERIALIZED_NAME_PAGE_RANGE = "PageRange";
  @SerializedName(SERIALIZED_NAME_PAGE_RANGE)
  private String pageRange = "*";

  public static final String SERIALIZED_NAME_CONFORMANCE = "Conformance";
  @SerializedName(SERIALIZED_NAME_CONFORMANCE)
  private PdfConformance conformance;

  public static final String SERIALIZED_NAME_COLOR_IMAGE_COMPRESSION = "ColorImageCompression";
  @SerializedName(SERIALIZED_NAME_COLOR_IMAGE_COMPRESSION)
  private PdfImageCompressionScheme colorImageCompression;

  public static final String SERIALIZED_NAME_BITONAL_IMAGE_COMPRESSION = "BitonalImageCompression";
  @SerializedName(SERIALIZED_NAME_BITONAL_IMAGE_COMPRESSION)
  private PdfImageCompressionScheme bitonalImageCompression;

  public static final String SERIALIZED_NAME_ENABLE_COLOR_DETECTION = "EnableColorDetection";
  @SerializedName(SERIALIZED_NAME_ENABLE_COLOR_DETECTION)
  private Boolean enableColorDetection = false;

  public static final String SERIALIZED_NAME_IMAGE_QUALITY = "ImageQuality";
  @SerializedName(SERIALIZED_NAME_IMAGE_QUALITY)
  private Integer imageQuality = 75;

  public static final String SERIALIZED_NAME_DOWNSCALE_RESOLUTION = "DownscaleResolution";
  @SerializedName(SERIALIZED_NAME_DOWNSCALE_RESOLUTION)
  private Integer downscaleResolution = 0;

  public static final String SERIALIZED_NAME_FAST_WEB_VIEW = "FastWebView";
  @SerializedName(SERIALIZED_NAME_FAST_WEB_VIEW)
  private Boolean fastWebView = false;


  public ImageSaveAsPDFParameters fileId(String fileId) {
    
    this.fileId = fileId;
    return this;
  }

   /**
   * The identifier of the previously uploaded file to be processed.
   * @return fileId
  **/
  @ApiModelProperty(required = true, value = "The identifier of the previously uploaded file to be processed.")

  public String getFileId() {
    return fileId;
  }


  public void setFileId(String fileId) {
    this.fileId = fileId;
  }


  public ImageSaveAsPDFParameters pageRange(String pageRange) {
    
    this.pageRange = pageRange;
    return this;
  }

   /**
   * Specifies the number of the page, or the range of pages to be saved as PDF.
   * @return pageRange
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the number of the page, or the range of pages to be saved as PDF.")

  public String getPageRange() {
    return pageRange;
  }


  public void setPageRange(String pageRange) {
    this.pageRange = pageRange;
  }


  public ImageSaveAsPDFParameters conformance(PdfConformance conformance) {
    
    this.conformance = conformance;
    return this;
  }

   /**
   * Get conformance
   * @return conformance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PdfConformance getConformance() {
    return conformance;
  }


  public void setConformance(PdfConformance conformance) {
    this.conformance = conformance;
  }


  public ImageSaveAsPDFParameters colorImageCompression(PdfImageCompressionScheme colorImageCompression) {
    
    this.colorImageCompression = colorImageCompression;
    return this;
  }

   /**
   * Get colorImageCompression
   * @return colorImageCompression
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PdfImageCompressionScheme getColorImageCompression() {
    return colorImageCompression;
  }


  public void setColorImageCompression(PdfImageCompressionScheme colorImageCompression) {
    this.colorImageCompression = colorImageCompression;
  }


  public ImageSaveAsPDFParameters bitonalImageCompression(PdfImageCompressionScheme bitonalImageCompression) {
    
    this.bitonalImageCompression = bitonalImageCompression;
    return this;
  }

   /**
   * Get bitonalImageCompression
   * @return bitonalImageCompression
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PdfImageCompressionScheme getBitonalImageCompression() {
    return bitonalImageCompression;
  }


  public void setBitonalImageCompression(PdfImageCompressionScheme bitonalImageCompression) {
    this.bitonalImageCompression = bitonalImageCompression;
  }


  public ImageSaveAsPDFParameters enableColorDetection(Boolean enableColorDetection) {
    
    this.enableColorDetection = enableColorDetection;
    return this;
  }

   /**
   * Specifies is color detection must be used.
   * @return enableColorDetection
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies is color detection must be used.")

  public Boolean getEnableColorDetection() {
    return enableColorDetection;
  }


  public void setEnableColorDetection(Boolean enableColorDetection) {
    this.enableColorDetection = enableColorDetection;
  }


  public ImageSaveAsPDFParameters imageQuality(Integer imageQuality) {
    
    this.imageQuality = imageQuality;
    return this;
  }

   /**
   * Specifies the quality to be used for the compression of the images from the PDF.  Must be in the range [0 (best compression - worst quality) - 100 (worst quality - best compression)].
   * @return imageQuality
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the quality to be used for the compression of the images from the PDF.  Must be in the range [0 (best compression - worst quality) - 100 (worst quality - best compression)].")

  public Integer getImageQuality() {
    return imageQuality;
  }


  public void setImageQuality(Integer imageQuality) {
    this.imageQuality = imageQuality;
  }


  public ImageSaveAsPDFParameters downscaleResolution(Integer downscaleResolution) {
    
    this.downscaleResolution = downscaleResolution;
    return this;
  }

   /**
   * Specifies the resolution for downscaling images, if any.
   * @return downscaleResolution
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the resolution for downscaling images, if any.")

  public Integer getDownscaleResolution() {
    return downscaleResolution;
  }


  public void setDownscaleResolution(Integer downscaleResolution) {
    this.downscaleResolution = downscaleResolution;
  }


  public ImageSaveAsPDFParameters fastWebView(Boolean fastWebView) {
    
    this.fastWebView = fastWebView;
    return this;
  }

   /**
   * Specifies whether the PDF shall be optimized for online distribution.
   * @return fastWebView
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the PDF shall be optimized for online distribution.")

  public Boolean getFastWebView() {
    return fastWebView;
  }


  public void setFastWebView(Boolean fastWebView) {
    this.fastWebView = fastWebView;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImageSaveAsPDFParameters imageSaveAsPDFParameters = (ImageSaveAsPDFParameters) o;
    return Objects.equals(this.fileId, imageSaveAsPDFParameters.fileId) &&
        Objects.equals(this.pageRange, imageSaveAsPDFParameters.pageRange) &&
        Objects.equals(this.conformance, imageSaveAsPDFParameters.conformance) &&
        Objects.equals(this.colorImageCompression, imageSaveAsPDFParameters.colorImageCompression) &&
        Objects.equals(this.bitonalImageCompression, imageSaveAsPDFParameters.bitonalImageCompression) &&
        Objects.equals(this.enableColorDetection, imageSaveAsPDFParameters.enableColorDetection) &&
        Objects.equals(this.imageQuality, imageSaveAsPDFParameters.imageQuality) &&
        Objects.equals(this.downscaleResolution, imageSaveAsPDFParameters.downscaleResolution) &&
        Objects.equals(this.fastWebView, imageSaveAsPDFParameters.fastWebView);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fileId, pageRange, conformance, colorImageCompression, bitonalImageCompression, enableColorDetection, imageQuality, downscaleResolution, fastWebView);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImageSaveAsPDFParameters {\n");
    sb.append("    fileId: ").append(toIndentedString(fileId)).append("\n");
    sb.append("    pageRange: ").append(toIndentedString(pageRange)).append("\n");
    sb.append("    conformance: ").append(toIndentedString(conformance)).append("\n");
    sb.append("    colorImageCompression: ").append(toIndentedString(colorImageCompression)).append("\n");
    sb.append("    bitonalImageCompression: ").append(toIndentedString(bitonalImageCompression)).append("\n");
    sb.append("    enableColorDetection: ").append(toIndentedString(enableColorDetection)).append("\n");
    sb.append("    imageQuality: ").append(toIndentedString(imageQuality)).append("\n");
    sb.append("    downscaleResolution: ").append(toIndentedString(downscaleResolution)).append("\n");
    sb.append("    fastWebView: ").append(toIndentedString(fastWebView)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


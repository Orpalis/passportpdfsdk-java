/*
 * PassportPDF API
 * Another brick in the cloud
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Represents the parameters for a cleanup document action.
 */
@ApiModel(description = "Represents the parameters for a cleanup document action.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-04-27T13:23:36.328+02:00[Europe/Paris]")
public class ImageCleanupDocumentParameters {
  public static final String SERIALIZED_NAME_FILE_ID = "FileId";
  @SerializedName(SERIALIZED_NAME_FILE_ID)
  private String fileId;

  public static final String SERIALIZED_NAME_PAGE_RANGE = "PageRange";
  @SerializedName(SERIALIZED_NAME_PAGE_RANGE)
  private String pageRange;

  public static final String SERIALIZED_NAME_REMOVE_BLACK_BORDERS = "RemoveBlackBorders";
  @SerializedName(SERIALIZED_NAME_REMOVE_BLACK_BORDERS)
  private Boolean removeBlackBorders = false;

  public static final String SERIALIZED_NAME_DESKEW = "Deskew";
  @SerializedName(SERIALIZED_NAME_DESKEW)
  private Boolean deskew = false;

  public static final String SERIALIZED_NAME_REMOVE_LEFT_MARGIN_PUNCH_HOLES = "RemoveLeftMarginPunchHoles";
  @SerializedName(SERIALIZED_NAME_REMOVE_LEFT_MARGIN_PUNCH_HOLES)
  private Boolean removeLeftMarginPunchHoles = false;

  public static final String SERIALIZED_NAME_REMOVE_TOP_MARGIN_PUNCH_HOLES = "RemoveTopMarginPunchHoles";
  @SerializedName(SERIALIZED_NAME_REMOVE_TOP_MARGIN_PUNCH_HOLES)
  private Boolean removeTopMarginPunchHoles = false;

  public static final String SERIALIZED_NAME_REMOVE_RIGHT_MARGIN_PUNCH_HOLES = "RemoveRightMarginPunchHoles";
  @SerializedName(SERIALIZED_NAME_REMOVE_RIGHT_MARGIN_PUNCH_HOLES)
  private Boolean removeRightMarginPunchHoles = false;

  public static final String SERIALIZED_NAME_REMOVE_BOTTOM_MARGIN_PUNCH_HOLES = "RemoveBottomMarginPunchHoles";
  @SerializedName(SERIALIZED_NAME_REMOVE_BOTTOM_MARGIN_PUNCH_HOLES)
  private Boolean removeBottomMarginPunchHoles = false;

  public static final String SERIALIZED_NAME_DESPECKLE_STRENGTH = "DespeckleStrength";
  @SerializedName(SERIALIZED_NAME_DESPECKLE_STRENGTH)
  private Integer despeckleStrength = 0;


  public ImageCleanupDocumentParameters fileId(String fileId) {
    
    this.fileId = fileId;
    return this;
  }

   /**
   * The identifier of the previously uploaded file to be processed.
   * @return fileId
  **/
  @ApiModelProperty(required = true, value = "The identifier of the previously uploaded file to be processed.")

  public String getFileId() {
    return fileId;
  }


  public void setFileId(String fileId) {
    this.fileId = fileId;
  }


  public ImageCleanupDocumentParameters pageRange(String pageRange) {
    
    this.pageRange = pageRange;
    return this;
  }

   /**
   * Specifies the number of the page, or the range of pages to cleanup.
   * @return pageRange
  **/
  @ApiModelProperty(required = true, value = "Specifies the number of the page, or the range of pages to cleanup.")

  public String getPageRange() {
    return pageRange;
  }


  public void setPageRange(String pageRange) {
    this.pageRange = pageRange;
  }


  public ImageCleanupDocumentParameters removeBlackBorders(Boolean removeBlackBorders) {
    
    this.removeBlackBorders = removeBlackBorders;
    return this;
  }

   /**
   * Specifies whether the dark borders of the document image shall be replaced with white content.
   * @return removeBlackBorders
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the dark borders of the document image shall be replaced with white content.")

  public Boolean getRemoveBlackBorders() {
    return removeBlackBorders;
  }


  public void setRemoveBlackBorders(Boolean removeBlackBorders) {
    this.removeBlackBorders = removeBlackBorders;
  }


  public ImageCleanupDocumentParameters deskew(Boolean deskew) {
    
    this.deskew = deskew;
    return this;
  }

   /**
   * Specifies whether the document shall be deskewed.
   * @return deskew
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the document shall be deskewed.")

  public Boolean getDeskew() {
    return deskew;
  }


  public void setDeskew(Boolean deskew) {
    this.deskew = deskew;
  }


  public ImageCleanupDocumentParameters removeLeftMarginPunchHoles(Boolean removeLeftMarginPunchHoles) {
    
    this.removeLeftMarginPunchHoles = removeLeftMarginPunchHoles;
    return this;
  }

   /**
   * Specifies whether punch holes shall be removed from the left margin of the document.
   * @return removeLeftMarginPunchHoles
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether punch holes shall be removed from the left margin of the document.")

  public Boolean getRemoveLeftMarginPunchHoles() {
    return removeLeftMarginPunchHoles;
  }


  public void setRemoveLeftMarginPunchHoles(Boolean removeLeftMarginPunchHoles) {
    this.removeLeftMarginPunchHoles = removeLeftMarginPunchHoles;
  }


  public ImageCleanupDocumentParameters removeTopMarginPunchHoles(Boolean removeTopMarginPunchHoles) {
    
    this.removeTopMarginPunchHoles = removeTopMarginPunchHoles;
    return this;
  }

   /**
   * Specifies whether punch holes shall be removed from the top margin of the document.
   * @return removeTopMarginPunchHoles
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether punch holes shall be removed from the top margin of the document.")

  public Boolean getRemoveTopMarginPunchHoles() {
    return removeTopMarginPunchHoles;
  }


  public void setRemoveTopMarginPunchHoles(Boolean removeTopMarginPunchHoles) {
    this.removeTopMarginPunchHoles = removeTopMarginPunchHoles;
  }


  public ImageCleanupDocumentParameters removeRightMarginPunchHoles(Boolean removeRightMarginPunchHoles) {
    
    this.removeRightMarginPunchHoles = removeRightMarginPunchHoles;
    return this;
  }

   /**
   * Specifies whether punch holes shall be removed from the right margin of the document.
   * @return removeRightMarginPunchHoles
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether punch holes shall be removed from the right margin of the document.")

  public Boolean getRemoveRightMarginPunchHoles() {
    return removeRightMarginPunchHoles;
  }


  public void setRemoveRightMarginPunchHoles(Boolean removeRightMarginPunchHoles) {
    this.removeRightMarginPunchHoles = removeRightMarginPunchHoles;
  }


  public ImageCleanupDocumentParameters removeBottomMarginPunchHoles(Boolean removeBottomMarginPunchHoles) {
    
    this.removeBottomMarginPunchHoles = removeBottomMarginPunchHoles;
    return this;
  }

   /**
   * Specifies whether punch holes shall be removed from the bottom margin of the document.
   * @return removeBottomMarginPunchHoles
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether punch holes shall be removed from the bottom margin of the document.")

  public Boolean getRemoveBottomMarginPunchHoles() {
    return removeBottomMarginPunchHoles;
  }


  public void setRemoveBottomMarginPunchHoles(Boolean removeBottomMarginPunchHoles) {
    this.removeBottomMarginPunchHoles = removeBottomMarginPunchHoles;
  }


  public ImageCleanupDocumentParameters despeckleStrength(Integer despeckleStrength) {
    
    this.despeckleStrength = despeckleStrength;
    return this;
  }

   /**
   * Specifies the strength of the despeckle filter to be applied on the image.
   * @return despeckleStrength
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the strength of the despeckle filter to be applied on the image.")

  public Integer getDespeckleStrength() {
    return despeckleStrength;
  }


  public void setDespeckleStrength(Integer despeckleStrength) {
    this.despeckleStrength = despeckleStrength;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImageCleanupDocumentParameters imageCleanupDocumentParameters = (ImageCleanupDocumentParameters) o;
    return Objects.equals(this.fileId, imageCleanupDocumentParameters.fileId) &&
        Objects.equals(this.pageRange, imageCleanupDocumentParameters.pageRange) &&
        Objects.equals(this.removeBlackBorders, imageCleanupDocumentParameters.removeBlackBorders) &&
        Objects.equals(this.deskew, imageCleanupDocumentParameters.deskew) &&
        Objects.equals(this.removeLeftMarginPunchHoles, imageCleanupDocumentParameters.removeLeftMarginPunchHoles) &&
        Objects.equals(this.removeTopMarginPunchHoles, imageCleanupDocumentParameters.removeTopMarginPunchHoles) &&
        Objects.equals(this.removeRightMarginPunchHoles, imageCleanupDocumentParameters.removeRightMarginPunchHoles) &&
        Objects.equals(this.removeBottomMarginPunchHoles, imageCleanupDocumentParameters.removeBottomMarginPunchHoles) &&
        Objects.equals(this.despeckleStrength, imageCleanupDocumentParameters.despeckleStrength);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fileId, pageRange, removeBlackBorders, deskew, removeLeftMarginPunchHoles, removeTopMarginPunchHoles, removeRightMarginPunchHoles, removeBottomMarginPunchHoles, despeckleStrength);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImageCleanupDocumentParameters {\n");
    sb.append("    fileId: ").append(toIndentedString(fileId)).append("\n");
    sb.append("    pageRange: ").append(toIndentedString(pageRange)).append("\n");
    sb.append("    removeBlackBorders: ").append(toIndentedString(removeBlackBorders)).append("\n");
    sb.append("    deskew: ").append(toIndentedString(deskew)).append("\n");
    sb.append("    removeLeftMarginPunchHoles: ").append(toIndentedString(removeLeftMarginPunchHoles)).append("\n");
    sb.append("    removeTopMarginPunchHoles: ").append(toIndentedString(removeTopMarginPunchHoles)).append("\n");
    sb.append("    removeRightMarginPunchHoles: ").append(toIndentedString(removeRightMarginPunchHoles)).append("\n");
    sb.append("    removeBottomMarginPunchHoles: ").append(toIndentedString(removeBottomMarginPunchHoles)).append("\n");
    sb.append("    despeckleStrength: ").append(toIndentedString(despeckleStrength)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


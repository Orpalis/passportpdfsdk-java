/*
 * PassportPDF API
 * Another brick in the cloud
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.PdfImageCompressionScheme;

/**
 * Represents the parameters for an insert image action.
 */
@ApiModel(description = "Represents the parameters for an insert image action.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-04-27T13:23:36.328+02:00[Europe/Paris]")
public class PdfInsertImageParameters {
  public static final String SERIALIZED_NAME_FILE_ID = "FileId";
  @SerializedName(SERIALIZED_NAME_FILE_ID)
  private String fileId;

  public static final String SERIALIZED_NAME_PAGE_RANGE = "PageRange";
  @SerializedName(SERIALIZED_NAME_PAGE_RANGE)
  private String pageRange;

  public static final String SERIALIZED_NAME_IMAGE_DATA = "ImageData";
  @SerializedName(SERIALIZED_NAME_IMAGE_DATA)
  private byte[] imageData;

  public static final String SERIALIZED_NAME_IMAGE_FILE_ID = "ImageFileId";
  @SerializedName(SERIALIZED_NAME_IMAGE_FILE_ID)
  private String imageFileId = "";

  public static final String SERIALIZED_NAME_QUALITY = "Quality";
  @SerializedName(SERIALIZED_NAME_QUALITY)
  private Integer quality = 75;

  public static final String SERIALIZED_NAME_COLOR_IMAGE_COMPRESSION = "ColorImageCompression";
  @SerializedName(SERIALIZED_NAME_COLOR_IMAGE_COMPRESSION)
  private PdfImageCompressionScheme colorImageCompression;

  public static final String SERIALIZED_NAME_BITONAL_COMPRESSION = "BitonalCompression";
  @SerializedName(SERIALIZED_NAME_BITONAL_COMPRESSION)
  private PdfImageCompressionScheme bitonalCompression;


  public PdfInsertImageParameters fileId(String fileId) {
    
    this.fileId = fileId;
    return this;
  }

   /**
   * The identifier of the previously uploaded file to be processed.
   * @return fileId
  **/
  @ApiModelProperty(required = true, value = "The identifier of the previously uploaded file to be processed.")

  public String getFileId() {
    return fileId;
  }


  public void setFileId(String fileId) {
    this.fileId = fileId;
  }


  public PdfInsertImageParameters pageRange(String pageRange) {
    
    this.pageRange = pageRange;
    return this;
  }

   /**
   * Specifies the page or the range of pages where the image shall be inserted.
   * @return pageRange
  **/
  @ApiModelProperty(required = true, value = "Specifies the page or the range of pages where the image shall be inserted.")

  public String getPageRange() {
    return pageRange;
  }


  public void setPageRange(String pageRange) {
    this.pageRange = pageRange;
  }


  public PdfInsertImageParameters imageData(byte[] imageData) {
    
    this.imageData = imageData;
    return this;
  }

   /**
   * Specifies the data of the image to be inserted.
   * @return imageData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the data of the image to be inserted.")

  public byte[] getImageData() {
    return imageData;
  }


  public void setImageData(byte[] imageData) {
    this.imageData = imageData;
  }


  public PdfInsertImageParameters imageFileId(String imageFileId) {
    
    this.imageFileId = imageFileId;
    return this;
  }

   /**
   * Specifies the file ID of the image to be drawn.
   * @return imageFileId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the file ID of the image to be drawn.")

  public String getImageFileId() {
    return imageFileId;
  }


  public void setImageFileId(String imageFileId) {
    this.imageFileId = imageFileId;
  }


  public PdfInsertImageParameters quality(Integer quality) {
    
    this.quality = quality;
    return this;
  }

   /**
   * Specifies the level of quality to be used for the compression, from 1 (poorest) to 100 (greatest).
   * @return quality
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the level of quality to be used for the compression, from 1 (poorest) to 100 (greatest).")

  public Integer getQuality() {
    return quality;
  }


  public void setQuality(Integer quality) {
    this.quality = quality;
  }


  public PdfInsertImageParameters colorImageCompression(PdfImageCompressionScheme colorImageCompression) {
    
    this.colorImageCompression = colorImageCompression;
    return this;
  }

   /**
   * Get colorImageCompression
   * @return colorImageCompression
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PdfImageCompressionScheme getColorImageCompression() {
    return colorImageCompression;
  }


  public void setColorImageCompression(PdfImageCompressionScheme colorImageCompression) {
    this.colorImageCompression = colorImageCompression;
  }


  public PdfInsertImageParameters bitonalCompression(PdfImageCompressionScheme bitonalCompression) {
    
    this.bitonalCompression = bitonalCompression;
    return this;
  }

   /**
   * Get bitonalCompression
   * @return bitonalCompression
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PdfImageCompressionScheme getBitonalCompression() {
    return bitonalCompression;
  }


  public void setBitonalCompression(PdfImageCompressionScheme bitonalCompression) {
    this.bitonalCompression = bitonalCompression;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PdfInsertImageParameters pdfInsertImageParameters = (PdfInsertImageParameters) o;
    return Objects.equals(this.fileId, pdfInsertImageParameters.fileId) &&
        Objects.equals(this.pageRange, pdfInsertImageParameters.pageRange) &&
        Arrays.equals(this.imageData, pdfInsertImageParameters.imageData) &&
        Objects.equals(this.imageFileId, pdfInsertImageParameters.imageFileId) &&
        Objects.equals(this.quality, pdfInsertImageParameters.quality) &&
        Objects.equals(this.colorImageCompression, pdfInsertImageParameters.colorImageCompression) &&
        Objects.equals(this.bitonalCompression, pdfInsertImageParameters.bitonalCompression);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fileId, pageRange, Arrays.hashCode(imageData), imageFileId, quality, colorImageCompression, bitonalCompression);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PdfInsertImageParameters {\n");
    sb.append("    fileId: ").append(toIndentedString(fileId)).append("\n");
    sb.append("    pageRange: ").append(toIndentedString(pageRange)).append("\n");
    sb.append("    imageData: ").append(toIndentedString(imageData)).append("\n");
    sb.append("    imageFileId: ").append(toIndentedString(imageFileId)).append("\n");
    sb.append("    quality: ").append(toIndentedString(quality)).append("\n");
    sb.append("    colorImageCompression: ").append(toIndentedString(colorImageCompression)).append("\n");
    sb.append("    bitonalCompression: ").append(toIndentedString(bitonalCompression)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


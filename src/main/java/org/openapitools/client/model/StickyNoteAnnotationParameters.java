/*
 * PassportPDF API
 * Another brick in the cloud
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.DrawableContentLayoutParameters;
import org.openapitools.client.model.StickyNoteAnnotationIcon;

/**
 * Represents information about the Sticky Note Annotation.
 */
@ApiModel(description = "Represents information about the Sticky Note Annotation.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-04-27T13:23:36.328+02:00[Europe/Paris]")
public class StickyNoteAnnotationParameters {
  public static final String SERIALIZED_NAME_ANNOTATION_LAYOUT = "AnnotationLayout";
  @SerializedName(SERIALIZED_NAME_ANNOTATION_LAYOUT)
  private DrawableContentLayoutParameters annotationLayout;

  public static final String SERIALIZED_NAME_STICKY_NOTE_ICON = "StickyNoteIcon";
  @SerializedName(SERIALIZED_NAME_STICKY_NOTE_ICON)
  private StickyNoteAnnotationIcon stickyNoteIcon;

  public static final String SERIALIZED_NAME_AUTHOR = "Author";
  @SerializedName(SERIALIZED_NAME_AUTHOR)
  private String author;

  public static final String SERIALIZED_NAME_SUBJECT = "Subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public static final String SERIALIZED_NAME_CONTENT = "Content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private String content;

  public static final String SERIALIZED_NAME_OPEN_POPUP = "OpenPopup";
  @SerializedName(SERIALIZED_NAME_OPEN_POPUP)
  private Boolean openPopup;

  public static final String SERIALIZED_NAME_COLOR = "Color";
  @SerializedName(SERIALIZED_NAME_COLOR)
  private String color = "red";


  public StickyNoteAnnotationParameters annotationLayout(DrawableContentLayoutParameters annotationLayout) {
    
    this.annotationLayout = annotationLayout;
    return this;
  }

   /**
   * Get annotationLayout
   * @return annotationLayout
  **/
  @ApiModelProperty(required = true, value = "")

  public DrawableContentLayoutParameters getAnnotationLayout() {
    return annotationLayout;
  }


  public void setAnnotationLayout(DrawableContentLayoutParameters annotationLayout) {
    this.annotationLayout = annotationLayout;
  }


  public StickyNoteAnnotationParameters stickyNoteIcon(StickyNoteAnnotationIcon stickyNoteIcon) {
    
    this.stickyNoteIcon = stickyNoteIcon;
    return this;
  }

   /**
   * Get stickyNoteIcon
   * @return stickyNoteIcon
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public StickyNoteAnnotationIcon getStickyNoteIcon() {
    return stickyNoteIcon;
  }


  public void setStickyNoteIcon(StickyNoteAnnotationIcon stickyNoteIcon) {
    this.stickyNoteIcon = stickyNoteIcon;
  }


  public StickyNoteAnnotationParameters author(String author) {
    
    this.author = author;
    return this;
  }

   /**
   * Specify the author of the annotation, if any.
   * @return author
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specify the author of the annotation, if any.")

  public String getAuthor() {
    return author;
  }


  public void setAuthor(String author) {
    this.author = author;
  }


  public StickyNoteAnnotationParameters subject(String subject) {
    
    this.subject = subject;
    return this;
  }

   /**
   * Specify the subject of the annotation, if any.
   * @return subject
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specify the subject of the annotation, if any.")

  public String getSubject() {
    return subject;
  }


  public void setSubject(String subject) {
    this.subject = subject;
  }


  public StickyNoteAnnotationParameters content(String content) {
    
    this.content = content;
    return this;
  }

   /**
   * Specify the content of the annotation, if any.
   * @return content
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specify the content of the annotation, if any.")

  public String getContent() {
    return content;
  }


  public void setContent(String content) {
    this.content = content;
  }


  public StickyNoteAnnotationParameters openPopup(Boolean openPopup) {
    
    this.openPopup = openPopup;
    return this;
  }

   /**
   * Specifies if the popup of annotation shall be opened by default.
   * @return openPopup
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies if the popup of annotation shall be opened by default.")

  public Boolean getOpenPopup() {
    return openPopup;
  }


  public void setOpenPopup(Boolean openPopup) {
    this.openPopup = openPopup;
  }


  public StickyNoteAnnotationParameters color(String color) {
    
    this.color = color;
    return this;
  }

   /**
   * Specifies the color of the annotation, using the color name (ie: \&quot;red\&quot;) or its RGBa code (ie: \&quot;rgba(255,0,0,1)\&quot;).
   * @return color
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the color of the annotation, using the color name (ie: \"red\") or its RGBa code (ie: \"rgba(255,0,0,1)\").")

  public String getColor() {
    return color;
  }


  public void setColor(String color) {
    this.color = color;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StickyNoteAnnotationParameters stickyNoteAnnotationParameters = (StickyNoteAnnotationParameters) o;
    return Objects.equals(this.annotationLayout, stickyNoteAnnotationParameters.annotationLayout) &&
        Objects.equals(this.stickyNoteIcon, stickyNoteAnnotationParameters.stickyNoteIcon) &&
        Objects.equals(this.author, stickyNoteAnnotationParameters.author) &&
        Objects.equals(this.subject, stickyNoteAnnotationParameters.subject) &&
        Objects.equals(this.content, stickyNoteAnnotationParameters.content) &&
        Objects.equals(this.openPopup, stickyNoteAnnotationParameters.openPopup) &&
        Objects.equals(this.color, stickyNoteAnnotationParameters.color);
  }

  @Override
  public int hashCode() {
    return Objects.hash(annotationLayout, stickyNoteIcon, author, subject, content, openPopup, color);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StickyNoteAnnotationParameters {\n");
    sb.append("    annotationLayout: ").append(toIndentedString(annotationLayout)).append("\n");
    sb.append("    stickyNoteIcon: ").append(toIndentedString(stickyNoteIcon)).append("\n");
    sb.append("    author: ").append(toIndentedString(author)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    openPopup: ").append(toIndentedString(openPopup)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


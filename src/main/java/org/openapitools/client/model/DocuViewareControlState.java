/*
 * PassportPDF API
 *       Introduction:    PassportPDF API is a REST API that lets you perform complex operations on documents and images easily.  You may consume the API by using our.NET SDK (other platforms / languages are soon to come), or any REST client by sending your requests to the appropriate endpoints.   A list of all the available endpoints can be found on the API reference page at https://passportpdfapi.com/references/api/index.html        Authentication:    Each available operation has a predefined cost, expressed as a number of tokens.  These tokens are deducted from your \"passport,\" which has a unique identifier that acts as an API key. This key is, therefore, required to be provided with each request for the latter to be honored(except if the operation does not have a cost, typically when you request a simple data with a GET).  Your key must be included in the header of the request, under the name \"X-PassportPdf-API-Key.\"  If you are using the.NET SDK, you can either set your key in the ApiKey property of your API instance(PdfApi or ImageApi, for example) or set it globally in the GlobalConfiguration instance if you want to set it once for the whole life cycle of your application.          Communication with the API:    All the available actions are listed on the API reference page, as previously mentioned.  There are several different controllers, i.e., routes, which categorize the actions.For example, you may use the PDF controller(\"/api/pdf\" route) to perform PDF - related operations, and the Image controller(\"/api/image\") for images.  Each action defines what kind of parameters(if any) is expected, and what kind of response is served.Parameters and responses are represented using data models, or \"schemas,\" and are listed in the \"Schemas\" section of the reference.   Parameters and response models of a given action are both prefixed by the controller name, the action name, and \"Parameters\" / \"Response,\" e.g. \"api/pdf/reduce\" respectively receives and serves a PdfReduceParameters and PdfReduceResponse models.  Using the .NET SDK, you will find the objects to interact with the different controllers in the PassportPDF.Api namespace and all the schemas in the PassportPDF.Model namespace.        Processing documents:    Each document manipulation starts with importing the file onto the API.  The LoadDocument action of the PDF controller lets you import your document as a PDF.  Note that the GetPDFImportSupportedFileExtensions action of the same controller will let you know all the different types of files that you may import as a PDF. LoadDocument responds with a JSON-serialized PdfLoadDocumentResponse model, which contains a \"FileId\" property.This identifier is required for the API to know about your document for further manipulations, hence the presence of a \"FileId\" property in the PdfReduceParameters schema (and many other parameters schemas). To download the changes made to a file, you need, of course, to download the new version of the file from the API.  To save your document as a PDF, you will need to use the SaveDocument action of the PDF controller and provide a PdfSaveDocumentParameters data model that contains the identifier of your file.        Errors:    Conventional HTTP response codes are used to indicate the success or failure of an API request.   The Error data model also defines some information about an error that occurred on the API.   Each response model has an Error in its definition, and its sole existence in the serialized response - which should thus always be checked - indicates that something went wrong.  Among the information given by the Error schema, \"ResultCode\" specifies a value of the \"PassportPDFStatus\" enumeration, that defines a first level of error information. \"InternalErrorId\" defines a unique identifier for the error, which comes very handy for us to troubleshoot any issue you may encounter quickly.        Efficiency considerations:    Multipart upload/download is available and lets you directly stream a file to/from the API.  In the PDF controller, LoadDocument/LoadDocumentMultipart and SaveDocument/SaveDocumentToFile may be used to upload/download a document using respectively binary data serialization and streaming multipart HTTP requests.  The second approach should be favored when dealing with large files, as it will be much more efficient in that context.  
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.DocuViewareCertificate;
import org.openapitools.client.model.DocuViewareLocale;
import org.openapitools.client.model.DocumentAlignment;
import org.openapitools.client.model.DocumentPosition;
import org.openapitools.client.model.LinkAnnotationClickBehaviour;
import org.openapitools.client.model.PageViewMode;
import org.openapitools.client.model.PrintQuality;
import org.openapitools.client.model.RotateFlip;
import org.openapitools.client.model.RotateMode;
import org.openapitools.client.model.ToolbarStyle;
import org.openapitools.client.model.ViewerZoomMode;

/**
 * Specifies configuration and appearance state of a DocuVieware control.
 */
@ApiModel(description = "Specifies configuration and appearance state of a DocuVieware control.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-04-10T16:23:29.092+02:00[Europe/Paris]")
public class DocuViewareControlState {
  public static final String SERIALIZED_NAME_TIMEOUT = "Timeout";
  @SerializedName(SERIALIZED_NAME_TIMEOUT)
  private Integer timeout = 20;

  public static final String SERIALIZED_NAME_CONTROL_I_D = "ControlID";
  @SerializedName(SERIALIZED_NAME_CONTROL_I_D)
  private String controlID = "DocuVieware1";

  public static final String SERIALIZED_NAME_SHOW_LOGO = "ShowLogo";
  @SerializedName(SERIALIZED_NAME_SHOW_LOGO)
  private Boolean showLogo = true;

  public static final String SERIALIZED_NAME_REMOTE_I_P = "RemoteIP";
  @SerializedName(SERIALIZED_NAME_REMOTE_I_P)
  private String remoteIP = "";

  public static final String SERIALIZED_NAME_FILE_HOSTING_U_R_I = "FileHostingURI";
  @SerializedName(SERIALIZED_NAME_FILE_HOSTING_U_R_I)
  private String fileHostingURI = "";

  public static final String SERIALIZED_NAME_DOCUMENT_U_R_I = "DocumentURI";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_U_R_I)
  private String documentURI = "";

  public static final String SERIALIZED_NAME_DOCUMENT_FILE_NAME = "DocumentFileName";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_FILE_NAME)
  private String documentFileName = "";

  public static final String SERIALIZED_NAME_DISABLE_DOWNLOAD_PROGRESS = "DisableDownloadProgress";
  @SerializedName(SERIALIZED_NAME_DISABLE_DOWNLOAD_PROGRESS)
  private Boolean disableDownloadProgress = false;

  public static final String SERIALIZED_NAME_DOCUMENT_ALIGNMENT = "DocumentAlignment";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_ALIGNMENT)
  private DocumentAlignment documentAlignment;

  public static final String SERIALIZED_NAME_DOCUMENT_POSITION = "DocumentPosition";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_POSITION)
  private DocumentPosition documentPosition;

  public static final String SERIALIZED_NAME_ENABLE_GD_PICTURE_ANNOTATIONS = "EnableGdPictureAnnotations";
  @SerializedName(SERIALIZED_NAME_ENABLE_GD_PICTURE_ANNOTATIONS)
  private Boolean enableGdPictureAnnotations = true;

  public static final String SERIALIZED_NAME_DISABLE_ANNOTATION_PRINTING = "DisableAnnotationPrinting";
  @SerializedName(SERIALIZED_NAME_DISABLE_ANNOTATION_PRINTING)
  private Boolean disableAnnotationPrinting = false;

  public static final String SERIALIZED_NAME_ENABLE_FORM_FIELDS_EDITION = "EnableFormFieldsEdition";
  @SerializedName(SERIALIZED_NAME_ENABLE_FORM_FIELDS_EDITION)
  private Boolean enableFormFieldsEdition = true;

  public static final String SERIALIZED_NAME_ANNOTATION_EDITOR_MODE = "AnnotationEditorMode";
  @SerializedName(SERIALIZED_NAME_ANNOTATION_EDITOR_MODE)
  private Boolean annotationEditorMode = true;

  public static final String SERIALIZED_NAME_LINK_ANNOTATION_CLICK_BEHAVIOUR = "LinkAnnotationClickBehaviour";
  @SerializedName(SERIALIZED_NAME_LINK_ANNOTATION_CLICK_BEHAVIOUR)
  private LinkAnnotationClickBehaviour linkAnnotationClickBehaviour;

  public static final String SERIALIZED_NAME_ZOOM = "Zoom";
  @SerializedName(SERIALIZED_NAME_ZOOM)
  private Double zoom = 1d;

  public static final String SERIALIZED_NAME_ZOOM_MODE = "ZoomMode";
  @SerializedName(SERIALIZED_NAME_ZOOM_MODE)
  private ViewerZoomMode zoomMode;

  public static final String SERIALIZED_NAME_OPEN_ZOOM_MODE = "OpenZoomMode";
  @SerializedName(SERIALIZED_NAME_OPEN_ZOOM_MODE)
  private ViewerZoomMode openZoomMode;

  public static final String SERIALIZED_NAME_VIEW_ROTATION = "ViewRotation";
  @SerializedName(SERIALIZED_NAME_VIEW_ROTATION)
  private RotateFlip viewRotation;

  public static final String SERIALIZED_NAME_PAGE_ROTATION = "PageRotation";
  @SerializedName(SERIALIZED_NAME_PAGE_ROTATION)
  private RotateFlip pageRotation;

  public static final String SERIALIZED_NAME_ZOOM_STEP = "ZoomStep";
  @SerializedName(SERIALIZED_NAME_ZOOM_STEP)
  private Integer zoomStep = 30;

  public static final String SERIALIZED_NAME_SCROLL_BARS = "ScrollBars";
  @SerializedName(SERIALIZED_NAME_SCROLL_BARS)
  private Boolean scrollBars = true;

  public static final String SERIALIZED_NAME_FORCE_SCROLL_BARS = "ForceScrollBars";
  @SerializedName(SERIALIZED_NAME_FORCE_SCROLL_BARS)
  private Boolean forceScrollBars = false;

  public static final String SERIALIZED_NAME_PAGE_VIEW_MODE = "PageViewMode";
  @SerializedName(SERIALIZED_NAME_PAGE_VIEW_MODE)
  private PageViewMode pageViewMode;

  public static final String SERIALIZED_NAME_ENABLE_TEXT_SELECTION = "EnableTextSelection";
  @SerializedName(SERIALIZED_NAME_ENABLE_TEXT_SELECTION)
  private Boolean enableTextSelection = true;

  public static final String SERIALIZED_NAME_ENABLE_TEXT_SELECTION_ANNOTATION = "EnableTextSelectionAnnotation";
  @SerializedName(SERIALIZED_NAME_ENABLE_TEXT_SELECTION_ANNOTATION)
  private Boolean enableTextSelectionAnnotation = true;

  public static final String SERIALIZED_NAME_LOCALE = "Locale";
  @SerializedName(SERIALIZED_NAME_LOCALE)
  private DocuViewareLocale locale;

  public static final String SERIALIZED_NAME_USER_LANGUAGES = "UserLanguages";
  @SerializedName(SERIALIZED_NAME_USER_LANGUAGES)
  private List<String> userLanguages = null;

  public static final String SERIALIZED_NAME_CONTROL_WIDTH = "ControlWidth";
  @SerializedName(SERIALIZED_NAME_CONTROL_WIDTH)
  private String controlWidth = "100%";

  public static final String SERIALIZED_NAME_CONTROL_HEIGHT = "ControlHeight";
  @SerializedName(SERIALIZED_NAME_CONTROL_HEIGHT)
  private String controlHeight = "100%";

  public static final String SERIALIZED_NAME_ANNOTATION_DROP_SHADOW = "AnnotationDropShadow";
  @SerializedName(SERIALIZED_NAME_ANNOTATION_DROP_SHADOW)
  private Boolean annotationDropShadow = true;

  public static final String SERIALIZED_NAME_ALLOW_PRINT = "AllowPrint";
  @SerializedName(SERIALIZED_NAME_ALLOW_PRINT)
  private Boolean allowPrint = true;

  public static final String SERIALIZED_NAME_ALLOW_UPLOAD = "AllowUpload";
  @SerializedName(SERIALIZED_NAME_ALLOW_UPLOAD)
  private Boolean allowUpload = true;

  public static final String SERIALIZED_NAME_ENABLE_MULTIPLE_THUMBNAIL_SELECTION = "EnableMultipleThumbnailSelection";
  @SerializedName(SERIALIZED_NAME_ENABLE_MULTIPLE_THUMBNAIL_SELECTION)
  private Boolean enableMultipleThumbnailSelection = false;

  public static final String SERIALIZED_NAME_ENABLE_THUMBNAIL_DRAG_DROP = "EnableThumbnailDragDrop";
  @SerializedName(SERIALIZED_NAME_ENABLE_THUMBNAIL_DRAG_DROP)
  private Boolean enableThumbnailDragDrop = false;

  public static final String SERIALIZED_NAME_ENABLE_FILE_UPLOAD_BUTTON = "EnableFileUploadButton";
  @SerializedName(SERIALIZED_NAME_ENABLE_FILE_UPLOAD_BUTTON)
  private Boolean enableFileUploadButton = true;

  public static final String SERIALIZED_NAME_ENABLE_LOAD_FROM_URI_BUTTON = "EnableLoadFromUriButton";
  @SerializedName(SERIALIZED_NAME_ENABLE_LOAD_FROM_URI_BUTTON)
  private Boolean enableLoadFromUriButton = true;

  public static final String SERIALIZED_NAME_ENABLE_SAVE_BUTTON = "EnableSaveButton";
  @SerializedName(SERIALIZED_NAME_ENABLE_SAVE_BUTTON)
  private Boolean enableSaveButton = true;

  public static final String SERIALIZED_NAME_ENABLE_PAGES_NAVIGATION_BUTTONS = "EnablePagesNavigationButtons";
  @SerializedName(SERIALIZED_NAME_ENABLE_PAGES_NAVIGATION_BUTTONS)
  private Boolean enablePagesNavigationButtons = true;

  public static final String SERIALIZED_NAME_ENABLE_PRINT_BUTTON = "EnablePrintButton";
  @SerializedName(SERIALIZED_NAME_ENABLE_PRINT_BUTTON)
  private Boolean enablePrintButton = true;

  public static final String SERIALIZED_NAME_ENABLE_PRINT_TO_P_D_F = "EnablePrintToPDF";
  @SerializedName(SERIALIZED_NAME_ENABLE_PRINT_TO_P_D_F)
  private Boolean enablePrintToPDF = true;

  public static final String SERIALIZED_NAME_ENABLE_FIT_WIDTH_BUTTON = "EnableFitWidthButton";
  @SerializedName(SERIALIZED_NAME_ENABLE_FIT_WIDTH_BUTTON)
  private Boolean enableFitWidthButton = true;

  public static final String SERIALIZED_NAME_ENABLE_ZOOM100_BUTTON = "EnableZoom100Button";
  @SerializedName(SERIALIZED_NAME_ENABLE_ZOOM100_BUTTON)
  private Boolean enableZoom100Button = true;

  public static final String SERIALIZED_NAME_ENABLE_MOUSE_MODE_BUTTONS = "EnableMouseModeButtons";
  @SerializedName(SERIALIZED_NAME_ENABLE_MOUSE_MODE_BUTTONS)
  private Boolean enableMouseModeButtons = true;

  public static final String SERIALIZED_NAME_ENABLE_PAN_MODE_BUTTON = "EnablePanModeButton";
  @SerializedName(SERIALIZED_NAME_ENABLE_PAN_MODE_BUTTON)
  private Boolean enablePanModeButton = true;

  public static final String SERIALIZED_NAME_ENABLE_SELECT_MODE_BUTTON = "EnableSelectModeButton";
  @SerializedName(SERIALIZED_NAME_ENABLE_SELECT_MODE_BUTTON)
  private Boolean enableSelectModeButton = true;

  public static final String SERIALIZED_NAME_ENABLE_MARQUEE_ZOOM_MODE_BUTTON = "EnableMarqueeZoomModeButton";
  @SerializedName(SERIALIZED_NAME_ENABLE_MARQUEE_ZOOM_MODE_BUTTON)
  private Boolean enableMarqueeZoomModeButton = true;

  public static final String SERIALIZED_NAME_ENABLE_FULL_SCREEN_BUTTON = "EnableFullScreenButton";
  @SerializedName(SERIALIZED_NAME_ENABLE_FULL_SCREEN_BUTTON)
  private Boolean enableFullScreenButton = true;

  public static final String SERIALIZED_NAME_ENABLE_FIT_PAGE_BUTTON = "EnableFitPageButton";
  @SerializedName(SERIALIZED_NAME_ENABLE_FIT_PAGE_BUTTON)
  private Boolean enableFitPageButton = true;

  public static final String SERIALIZED_NAME_ENABLE_ZOOM_BUTTONS = "EnableZoomButtons";
  @SerializedName(SERIALIZED_NAME_ENABLE_ZOOM_BUTTONS)
  private Boolean enableZoomButtons = true;

  public static final String SERIALIZED_NAME_ENABLE_PAGE_VIEW_BUTTONS = "EnablePageViewButtons";
  @SerializedName(SERIALIZED_NAME_ENABLE_PAGE_VIEW_BUTTONS)
  private Boolean enablePageViewButtons = true;

  public static final String SERIALIZED_NAME_ROTATE_BUTTONS_MODE = "RotateButtonsMode";
  @SerializedName(SERIALIZED_NAME_ROTATE_BUTTONS_MODE)
  private RotateMode rotateButtonsMode;

  public static final String SERIALIZED_NAME_ENABLE_ROTATE_BUTTONS = "EnableRotateButtons";
  @SerializedName(SERIALIZED_NAME_ENABLE_ROTATE_BUTTONS)
  private Boolean enableRotateButtons = true;

  public static final String SERIALIZED_NAME_ENABLE_ANNOTATION_ACTION_BUTTONS = "EnableAnnotationActionButtons";
  @SerializedName(SERIALIZED_NAME_ENABLE_ANNOTATION_ACTION_BUTTONS)
  private Boolean enableAnnotationActionButtons = true;

  public static final String SERIALIZED_NAME_ENABLE_SELECTED_TEXT_ANNOTATION_EDITION = "EnableSelectedTextAnnotationEdition";
  @SerializedName(SERIALIZED_NAME_ENABLE_SELECTED_TEXT_ANNOTATION_EDITION)
  private Boolean enableSelectedTextAnnotationEdition = true;

  public static final String SERIALIZED_NAME_ENABLE_RECTANGLE_HIGHLIGHTER_ANNOTATION_BUTTON = "EnableRectangleHighlighterAnnotationButton";
  @SerializedName(SERIALIZED_NAME_ENABLE_RECTANGLE_HIGHLIGHTER_ANNOTATION_BUTTON)
  private Boolean enableRectangleHighlighterAnnotationButton = true;

  public static final String SERIALIZED_NAME_ENABLE_FREEHAND_HIGHLIGHTER_ANNOTATION_BUTTON = "EnableFreehandHighlighterAnnotationButton";
  @SerializedName(SERIALIZED_NAME_ENABLE_FREEHAND_HIGHLIGHTER_ANNOTATION_BUTTON)
  private Boolean enableFreehandHighlighterAnnotationButton = true;

  public static final String SERIALIZED_NAME_ENABLE_RUBBER_STAMP_ANNOTATION_BUTTON = "EnableRubberStampAnnotationButton";
  @SerializedName(SERIALIZED_NAME_ENABLE_RUBBER_STAMP_ANNOTATION_BUTTON)
  private Boolean enableRubberStampAnnotationButton = true;

  public static final String SERIALIZED_NAME_ENABLE_RECTANGLE_ANNOTATION_BUTTON = "EnableRectangleAnnotationButton";
  @SerializedName(SERIALIZED_NAME_ENABLE_RECTANGLE_ANNOTATION_BUTTON)
  private Boolean enableRectangleAnnotationButton = true;

  public static final String SERIALIZED_NAME_ENABLE_ELLIPSE_ANNOTATION_BUTTON = "EnableEllipseAnnotationButton";
  @SerializedName(SERIALIZED_NAME_ENABLE_ELLIPSE_ANNOTATION_BUTTON)
  private Boolean enableEllipseAnnotationButton = true;

  public static final String SERIALIZED_NAME_ENABLE_LINE_ANNOTATION_BUTTON = "EnableLineAnnotationButton";
  @SerializedName(SERIALIZED_NAME_ENABLE_LINE_ANNOTATION_BUTTON)
  private Boolean enableLineAnnotationButton = true;

  public static final String SERIALIZED_NAME_ENABLE_CONNECTED_LINE_ANNOTATION_BUTTON = "EnableConnectedLineAnnotationButton";
  @SerializedName(SERIALIZED_NAME_ENABLE_CONNECTED_LINE_ANNOTATION_BUTTON)
  private Boolean enableConnectedLineAnnotationButton = true;

  public static final String SERIALIZED_NAME_ENABLE_FREEHAND_ANNOTATION_BUTTON = "EnableFreehandAnnotationButton";
  @SerializedName(SERIALIZED_NAME_ENABLE_FREEHAND_ANNOTATION_BUTTON)
  private Boolean enableFreehandAnnotationButton = true;

  public static final String SERIALIZED_NAME_ENABLE_LINE_ARROW_ANNOTATION_BUTTON = "EnableLineArrowAnnotationButton";
  @SerializedName(SERIALIZED_NAME_ENABLE_LINE_ARROW_ANNOTATION_BUTTON)
  private Boolean enableLineArrowAnnotationButton = true;

  public static final String SERIALIZED_NAME_ENABLE_LINK_ANNOTATION_BUTTON = "EnableLinkAnnotationButton";
  @SerializedName(SERIALIZED_NAME_ENABLE_LINK_ANNOTATION_BUTTON)
  private Boolean enableLinkAnnotationButton = true;

  public static final String SERIALIZED_NAME_ENABLE_RULER_ANNOTATION_BUTTON = "EnableRulerAnnotationButton";
  @SerializedName(SERIALIZED_NAME_ENABLE_RULER_ANNOTATION_BUTTON)
  private Boolean enableRulerAnnotationButton = true;

  public static final String SERIALIZED_NAME_ENABLE_POLY_RULER_ANNOTATION_BUTTON = "EnablePolyRulerAnnotationButton";
  @SerializedName(SERIALIZED_NAME_ENABLE_POLY_RULER_ANNOTATION_BUTTON)
  private Boolean enablePolyRulerAnnotationButton = true;

  public static final String SERIALIZED_NAME_ENABLE_TEXT_ANNOTATION_BUTTON = "EnableTextAnnotationButton";
  @SerializedName(SERIALIZED_NAME_ENABLE_TEXT_ANNOTATION_BUTTON)
  private Boolean enableTextAnnotationButton = true;

  public static final String SERIALIZED_NAME_ENABLE_STICKY_NOTE_ANNOTATION_BUTTON = "EnableStickyNoteAnnotationButton";
  @SerializedName(SERIALIZED_NAME_ENABLE_STICKY_NOTE_ANNOTATION_BUTTON)
  private Boolean enableStickyNoteAnnotationButton = true;

  public static final String SERIALIZED_NAME_ENABLE_TWAIN_ACQUISITION_BUTTON = "EnableTwainAcquisitionButton";
  @SerializedName(SERIALIZED_NAME_ENABLE_TWAIN_ACQUISITION_BUTTON)
  private Boolean enableTwainAcquisitionButton = true;

  public static final String SERIALIZED_NAME_TWAIN_SOURCE_ENABLE_CUSTOM_CONFIGURATION = "TwainSourceEnableCustomConfiguration";
  @SerializedName(SERIALIZED_NAME_TWAIN_SOURCE_ENABLE_CUSTOM_CONFIGURATION)
  private Boolean twainSourceEnableCustomConfiguration = false;

  public static final String SERIALIZED_NAME_TWAIN_SOURCE_SELECT_FEEDER = "TwainSourceSelectFeeder";
  @SerializedName(SERIALIZED_NAME_TWAIN_SOURCE_SELECT_FEEDER)
  private Boolean twainSourceSelectFeeder = true;

  public static final String SERIALIZED_NAME_TWAIN_SOURCE_BIT_DEPTH = "TwainSourceBitDepth";
  @SerializedName(SERIALIZED_NAME_TWAIN_SOURCE_BIT_DEPTH)
  private Integer twainSourceBitDepth = 24;

  public static final String SERIALIZED_NAME_TWAIN_SOURCE_RESOLUTION = "TwainSourceResolution";
  @SerializedName(SERIALIZED_NAME_TWAIN_SOURCE_RESOLUTION)
  private Integer twainSourceResolution = 200;

  public static final String SERIALIZED_NAME_TWAIN_SOURCE_ENABLE_DUPLEX = "TwainSourceEnableDuplex";
  @SerializedName(SERIALIZED_NAME_TWAIN_SOURCE_ENABLE_DUPLEX)
  private Boolean twainSourceEnableDuplex = false;

  public static final String SERIALIZED_NAME_TWAIN_SOURCE_HIDE_U_I = "TwainSourceHideUI";
  @SerializedName(SERIALIZED_NAME_TWAIN_SOURCE_HIDE_U_I)
  private Boolean twainSourceHideUI = true;

  public static final String SERIALIZED_NAME_FREE_HAND_CONTINUOUS_DRAWING_MODE = "FreeHandContinuousDrawingMode";
  @SerializedName(SERIALIZED_NAME_FREE_HAND_CONTINUOUS_DRAWING_MODE)
  private Boolean freeHandContinuousDrawingMode = true;

  public static final String SERIALIZED_NAME_SHOW_TEXT_SEARCH_SNAP_IN = "ShowTextSearchSnapIn";
  @SerializedName(SERIALIZED_NAME_SHOW_TEXT_SEARCH_SNAP_IN)
  private Boolean showTextSearchSnapIn = true;

  public static final String SERIALIZED_NAME_SHOW_THUMBNAILS_SNAP_IN = "ShowThumbnailsSnapIn";
  @SerializedName(SERIALIZED_NAME_SHOW_THUMBNAILS_SNAP_IN)
  private Boolean showThumbnailsSnapIn = true;

  public static final String SERIALIZED_NAME_SHOW_BOOKMARKS_SNAP_IN = "ShowBookmarksSnapIn";
  @SerializedName(SERIALIZED_NAME_SHOW_BOOKMARKS_SNAP_IN)
  private Boolean showBookmarksSnapIn = true;

  public static final String SERIALIZED_NAME_SHOW_ANNOTATIONS_SNAP_IN = "ShowAnnotationsSnapIn";
  @SerializedName(SERIALIZED_NAME_SHOW_ANNOTATIONS_SNAP_IN)
  private Boolean showAnnotationsSnapIn = true;

  public static final String SERIALIZED_NAME_SHOW_ANNOTATIONS_COMMENTS_SNAP_IN = "ShowAnnotationsCommentsSnapIn";
  @SerializedName(SERIALIZED_NAME_SHOW_ANNOTATIONS_COMMENTS_SNAP_IN)
  private Boolean showAnnotationsCommentsSnapIn = true;

  public static final String SERIALIZED_NAME_SHOW_REDACTION_SNAP_IN = "ShowRedactionSnapIn";
  @SerializedName(SERIALIZED_NAME_SHOW_REDACTION_SNAP_IN)
  private Boolean showRedactionSnapIn = true;

  public static final String SERIALIZED_NAME_SHOW_DIGITAL_SIGNATURE_SNAP_IN = "ShowDigitalSignatureSnapIn";
  @SerializedName(SERIALIZED_NAME_SHOW_DIGITAL_SIGNATURE_SNAP_IN)
  private Boolean showDigitalSignatureSnapIn = false;

  public static final String SERIALIZED_NAME_THUMBNAIL_WIDTH = "ThumbnailWidth";
  @SerializedName(SERIALIZED_NAME_THUMBNAIL_WIDTH)
  private Integer thumbnailWidth = 192;

  public static final String SERIALIZED_NAME_THUMBNAIL_HEIGHT = "ThumbnailHeight";
  @SerializedName(SERIALIZED_NAME_THUMBNAIL_HEIGHT)
  private Integer thumbnailHeight = 256;

  public static final String SERIALIZED_NAME_SNAP_IN_PANEL_DEFAULT_WIDTH = "SnapInPanelDefaultWidth";
  @SerializedName(SERIALIZED_NAME_SNAP_IN_PANEL_DEFAULT_WIDTH)
  private String snapInPanelDefaultWidth = "280px";

  public static final String SERIALIZED_NAME_COLLAPSED_SNAP_IN = "CollapsedSnapIn";
  @SerializedName(SERIALIZED_NAME_COLLAPSED_SNAP_IN)
  private Boolean collapsedSnapIn = false;

  public static final String SERIALIZED_NAME_COLLAPSE_SNAPIN_ON_DOCUMENT_CLOSED = "CollapseSnapinOnDocumentClosed";
  @SerializedName(SERIALIZED_NAME_COLLAPSE_SNAPIN_ON_DOCUMENT_CLOSED)
  private Boolean collapseSnapinOnDocumentClosed = true;

  public static final String SERIALIZED_NAME_SHOW_SNAP_IN_COLLAPSE_BUTTON = "ShowSnapInCollapseButton";
  @SerializedName(SERIALIZED_NAME_SHOW_SNAP_IN_COLLAPSE_BUTTON)
  private Boolean showSnapInCollapseButton = true;

  public static final String SERIALIZED_NAME_SHOW_SNAP_IN_PANEL_HEADER = "ShowSnapInPanelHeader";
  @SerializedName(SERIALIZED_NAME_SHOW_SNAP_IN_PANEL_HEADER)
  private Boolean showSnapInPanelHeader = true;

  public static final String SERIALIZED_NAME_SHOW_SNAP_IN_BUTTON_STRIP = "ShowSnapInButtonStrip";
  @SerializedName(SERIALIZED_NAME_SHOW_SNAP_IN_BUTTON_STRIP)
  private Boolean showSnapInButtonStrip = true;

  public static final String SERIALIZED_NAME_SHOW_TOOLBAR = "ShowToolbar";
  @SerializedName(SERIALIZED_NAME_SHOW_TOOLBAR)
  private Boolean showToolbar = true;

  public static final String SERIALIZED_NAME_TOOLBAR_STYLE = "ToolbarStyle";
  @SerializedName(SERIALIZED_NAME_TOOLBAR_STYLE)
  private ToolbarStyle toolbarStyle;

  public static final String SERIALIZED_NAME_TOOLBAR_BUTTONS_SPACING = "ToolbarButtonsSpacing";
  @SerializedName(SERIALIZED_NAME_TOOLBAR_BUTTONS_SPACING)
  private Integer toolbarButtonsSpacing = 12;

  public static final String SERIALIZED_NAME_TOOLBAR_HEIGHT = "ToolbarHeight";
  @SerializedName(SERIALIZED_NAME_TOOLBAR_HEIGHT)
  private Integer toolbarHeight = 48;

  public static final String SERIALIZED_NAME_STROKE_COLOR = "StrokeColor";
  @SerializedName(SERIALIZED_NAME_STROKE_COLOR)
  private String strokeColor = "#646464";

  public static final String SERIALIZED_NAME_MISC_BORDER_COLOR = "MiscBorderColor";
  @SerializedName(SERIALIZED_NAME_MISC_BORDER_COLOR)
  private String miscBorderColor = "#DCDCDC";

  public static final String SERIALIZED_NAME_HEADER_COLOR = "HeaderColor";
  @SerializedName(SERIALIZED_NAME_HEADER_COLOR)
  private String headerColor = "#213E4E";

  public static final String SERIALIZED_NAME_PANEL_BACK_COLOR = "PanelBackColor";
  @SerializedName(SERIALIZED_NAME_PANEL_BACK_COLOR)
  private String panelBackColor = "#FFFFFF";

  public static final String SERIALIZED_NAME_VIEWER_BACK_COLOR = "ViewerBackColor";
  @SerializedName(SERIALIZED_NAME_VIEWER_BACK_COLOR)
  private String viewerBackColor = "#565656";

  public static final String SERIALIZED_NAME_ACTIVE_SELECTED_COLOR = "ActiveSelectedColor";
  @SerializedName(SERIALIZED_NAME_ACTIVE_SELECTED_COLOR)
  private String activeSelectedColor = "#0382D4";

  public static final String SERIALIZED_NAME_TOOLBAR_BACK_COLOR = "ToolbarBackColor";
  @SerializedName(SERIALIZED_NAME_TOOLBAR_BACK_COLOR)
  private String toolbarBackColor = "#F2F2F2";

  public static final String SERIALIZED_NAME_CUSTOM_NOTIFICATION_ICON_ERROR = "CustomNotificationIconError";
  @SerializedName(SERIALIZED_NAME_CUSTOM_NOTIFICATION_ICON_ERROR)
  private String customNotificationIconError = "";

  public static final String SERIALIZED_NAME_CUSTOM_NOTIFICATION_ICON_QUESTION = "CustomNotificationIconQuestion";
  @SerializedName(SERIALIZED_NAME_CUSTOM_NOTIFICATION_ICON_QUESTION)
  private String customNotificationIconQuestion = "";

  public static final String SERIALIZED_NAME_CUSTOM_NOTIFICATION_ICON_WARNING = "CustomNotificationIconWarning";
  @SerializedName(SERIALIZED_NAME_CUSTOM_NOTIFICATION_ICON_WARNING)
  private String customNotificationIconWarning = "";

  public static final String SERIALIZED_NAME_CUSTOM_NOTIFICATION_ICON_INFO = "CustomNotificationIconInfo";
  @SerializedName(SERIALIZED_NAME_CUSTOM_NOTIFICATION_ICON_INFO)
  private String customNotificationIconInfo = "";

  public static final String SERIALIZED_NAME_CUSTOM_NOTIFICATION_ICON_OK = "CustomNotificationIconOk";
  @SerializedName(SERIALIZED_NAME_CUSTOM_NOTIFICATION_ICON_OK)
  private String customNotificationIconOk = "";

  public static final String SERIALIZED_NAME_ALLOWED_EXPORT_FORMATS = "AllowedExportFormats";
  @SerializedName(SERIALIZED_NAME_ALLOWED_EXPORT_FORMATS)
  private String allowedExportFormats = "*";

  public static final String SERIALIZED_NAME_DISABLE_ANNOTATION_DRAWING_MODE_PANEL = "DisableAnnotationDrawingModePanel";
  @SerializedName(SERIALIZED_NAME_DISABLE_ANNOTATION_DRAWING_MODE_PANEL)
  private Boolean disableAnnotationDrawingModePanel = false;

  public static final String SERIALIZED_NAME_IMAGE_QUALITY = "ImageQuality";
  @SerializedName(SERIALIZED_NAME_IMAGE_QUALITY)
  private Integer imageQuality = 10;

  public static final String SERIALIZED_NAME_PRINT_QUALITY = "PrintQuality";
  @SerializedName(SERIALIZED_NAME_PRINT_QUALITY)
  private PrintQuality printQuality;

  public static final String SERIALIZED_NAME_ENABLE_DOCUMENTS_DROP = "EnableDocumentsDrop";
  @SerializedName(SERIALIZED_NAME_ENABLE_DOCUMENTS_DROP)
  private Boolean enableDocumentsDrop = true;

  public static final String SERIALIZED_NAME_AJAX_CUSTOM_HEADERS = "AjaxCustomHeaders";
  @SerializedName(SERIALIZED_NAME_AJAX_CUSTOM_HEADERS)
  private String ajaxCustomHeaders = "";

  public static final String SERIALIZED_NAME_FILE_DOWNLOAD_CUSTOM_HEADERS = "FileDownloadCustomHeaders";
  @SerializedName(SERIALIZED_NAME_FILE_DOWNLOAD_CUSTOM_HEADERS)
  private String fileDownloadCustomHeaders = "";

  public static final String SERIALIZED_NAME_TEXT_SEARCH_MAX_RESULTS = "TextSearchMaxResults";
  @SerializedName(SERIALIZED_NAME_TEXT_SEARCH_MAX_RESULTS)
  private Integer textSearchMaxResults = 100;

  public static final String SERIALIZED_NAME_MAX_UPLOAD_SIZE = "MaxUploadSize";
  @SerializedName(SERIALIZED_NAME_MAX_UPLOAD_SIZE)
  private Integer maxUploadSize = 10485760;

  public static final String SERIALIZED_NAME_MAX_DOWNLOAD_SIZE = "MaxDownloadSize";
  @SerializedName(SERIALIZED_NAME_MAX_DOWNLOAD_SIZE)
  private Integer maxDownloadSize = 10485760;

  public static final String SERIALIZED_NAME_MAX_PAGES = "MaxPages";
  @SerializedName(SERIALIZED_NAME_MAX_PAGES)
  private Integer maxPages = 3000;

  public static final String SERIALIZED_NAME_CERTIFICATES = "Certificates";
  @SerializedName(SERIALIZED_NAME_CERTIFICATES)
  private List<DocuViewareCertificate> certificates = null;

  public static final String SERIALIZED_NAME_EXTRA_FEATURES = "ExtraFeatures";
  @SerializedName(SERIALIZED_NAME_EXTRA_FEATURES)
  private String extraFeatures = "";


  public DocuViewareControlState timeout(Integer timeout) {
    
    this.timeout = timeout;
    return this;
  }

   /**
   * Specifies the amount of time, in minutes, allowed between requests before the DocuVieware session-state provider terminates the session.&lt;br /&gt;
   * @return timeout
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the amount of time, in minutes, allowed between requests before the DocuVieware session-state provider terminates the session.<br />")

  public Integer getTimeout() {
    return timeout;
  }


  public void setTimeout(Integer timeout) {
    this.timeout = timeout;
  }


  public DocuViewareControlState controlID(String controlID) {
    
    this.controlID = controlID;
    return this;
  }

   /**
   * Specifies client the identifier associated with the control.
   * @return controlID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies client the identifier associated with the control.")

  public String getControlID() {
    return controlID;
  }


  public void setControlID(String controlID) {
    this.controlID = controlID;
  }


  public DocuViewareControlState showLogo(Boolean showLogo) {
    
    this.showLogo = showLogo;
    return this;
  }

   /**
   * Specifies if the DocuVieware logo is displayed in the toolbar.
   * @return showLogo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies if the DocuVieware logo is displayed in the toolbar.")

  public Boolean getShowLogo() {
    return showLogo;
  }


  public void setShowLogo(Boolean showLogo) {
    this.showLogo = showLogo;
  }


  public DocuViewareControlState remoteIP(String remoteIP) {
    
    this.remoteIP = remoteIP;
    return this;
  }

   /**
   * Specifies the remote IP. This property can be leaved empty if user requests don&#39;t need to be traced.
   * @return remoteIP
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the remote IP. This property can be leaved empty if user requests don't need to be traced.")

  public String getRemoteIP() {
    return remoteIP;
  }


  public void setRemoteIP(String remoteIP) {
    this.remoteIP = remoteIP;
  }


  public DocuViewareControlState fileHostingURI(String fileHostingURI) {
    
    this.fileHostingURI = fileHostingURI;
    return this;
  }

   /**
   * Get fileHostingURI
   * @return fileHostingURI
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFileHostingURI() {
    return fileHostingURI;
  }


  public void setFileHostingURI(String fileHostingURI) {
    this.fileHostingURI = fileHostingURI;
  }


  public DocuViewareControlState documentURI(String documentURI) {
    
    this.documentURI = documentURI;
    return this;
  }

   /**
   * Specifies the URI of a document to load into the control.  This can be an empty string if a document is already loaded.  Use the prefix &#39;fileid:&#39; to load a document from a file ID handled by PassportPDF. ie: &#39;fileid:00000-00000-00000-00000-00000&#39;.
   * @return documentURI
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the URI of a document to load into the control.  This can be an empty string if a document is already loaded.  Use the prefix 'fileid:' to load a document from a file ID handled by PassportPDF. ie: 'fileid:00000-00000-00000-00000-00000'.")

  public String getDocumentURI() {
    return documentURI;
  }


  public void setDocumentURI(String documentURI) {
    this.documentURI = documentURI;
  }


  public DocuViewareControlState documentFileName(String documentFileName) {
    
    this.documentFileName = documentFileName;
    return this;
  }

   /**
   * Specifies the file name of the input document. The file name can help to determine the input document format.  Default value is an empty string.
   * @return documentFileName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the file name of the input document. The file name can help to determine the input document format.  Default value is an empty string.")

  public String getDocumentFileName() {
    return documentFileName;
  }


  public void setDocumentFileName(String documentFileName) {
    this.documentFileName = documentFileName;
  }


  public DocuViewareControlState disableDownloadProgress(Boolean disableDownloadProgress) {
    
    this.disableDownloadProgress = disableDownloadProgress;
    return this;
  }

   /**
   * A flag specifying if the control should display a loading progress status bar to the end user while a document is being loaded.
   * @return disableDownloadProgress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A flag specifying if the control should display a loading progress status bar to the end user while a document is being loaded.")

  public Boolean getDisableDownloadProgress() {
    return disableDownloadProgress;
  }


  public void setDisableDownloadProgress(Boolean disableDownloadProgress) {
    this.disableDownloadProgress = disableDownloadProgress;
  }


  public DocuViewareControlState documentAlignment(DocumentAlignment documentAlignment) {
    
    this.documentAlignment = documentAlignment;
    return this;
  }

   /**
   * Get documentAlignment
   * @return documentAlignment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DocumentAlignment getDocumentAlignment() {
    return documentAlignment;
  }


  public void setDocumentAlignment(DocumentAlignment documentAlignment) {
    this.documentAlignment = documentAlignment;
  }


  public DocuViewareControlState documentPosition(DocumentPosition documentPosition) {
    
    this.documentPosition = documentPosition;
    return this;
  }

   /**
   * Get documentPosition
   * @return documentPosition
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DocumentPosition getDocumentPosition() {
    return documentPosition;
  }


  public void setDocumentPosition(DocumentPosition documentPosition) {
    this.documentPosition = documentPosition;
  }


  public DocuViewareControlState enableGdPictureAnnotations(Boolean enableGdPictureAnnotations) {
    
    this.enableGdPictureAnnotations = enableGdPictureAnnotations;
    return this;
  }

   /**
   * Specifies if GdPicture/XMP annotations support is activated.
   * @return enableGdPictureAnnotations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies if GdPicture/XMP annotations support is activated.")

  public Boolean getEnableGdPictureAnnotations() {
    return enableGdPictureAnnotations;
  }


  public void setEnableGdPictureAnnotations(Boolean enableGdPictureAnnotations) {
    this.enableGdPictureAnnotations = enableGdPictureAnnotations;
  }


  public DocuViewareControlState disableAnnotationPrinting(Boolean disableAnnotationPrinting) {
    
    this.disableAnnotationPrinting = disableAnnotationPrinting;
    return this;
  }

   /**
   * Specifies whether printing support is disabled for annotations.
   * @return disableAnnotationPrinting
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether printing support is disabled for annotations.")

  public Boolean getDisableAnnotationPrinting() {
    return disableAnnotationPrinting;
  }


  public void setDisableAnnotationPrinting(Boolean disableAnnotationPrinting) {
    this.disableAnnotationPrinting = disableAnnotationPrinting;
  }


  public DocuViewareControlState enableFormFieldsEdition(Boolean enableFormFieldsEdition) {
    
    this.enableFormFieldsEdition = enableFormFieldsEdition;
    return this;
  }

   /**
   * Specifies whether form fields can be edited into the client browser or not.
   * @return enableFormFieldsEdition
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether form fields can be edited into the client browser or not.")

  public Boolean getEnableFormFieldsEdition() {
    return enableFormFieldsEdition;
  }


  public void setEnableFormFieldsEdition(Boolean enableFormFieldsEdition) {
    this.enableFormFieldsEdition = enableFormFieldsEdition;
  }


  public DocuViewareControlState annotationEditorMode(Boolean annotationEditorMode) {
    
    this.annotationEditorMode = annotationEditorMode;
    return this;
  }

   /**
   * Specifies the editor mode for the GdPicture/XMP annotation support.&lt;br /&gt;
   * @return annotationEditorMode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the editor mode for the GdPicture/XMP annotation support.<br />")

  public Boolean getAnnotationEditorMode() {
    return annotationEditorMode;
  }


  public void setAnnotationEditorMode(Boolean annotationEditorMode) {
    this.annotationEditorMode = annotationEditorMode;
  }


  public DocuViewareControlState linkAnnotationClickBehaviour(LinkAnnotationClickBehaviour linkAnnotationClickBehaviour) {
    
    this.linkAnnotationClickBehaviour = linkAnnotationClickBehaviour;
    return this;
  }

   /**
   * Get linkAnnotationClickBehaviour
   * @return linkAnnotationClickBehaviour
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LinkAnnotationClickBehaviour getLinkAnnotationClickBehaviour() {
    return linkAnnotationClickBehaviour;
  }


  public void setLinkAnnotationClickBehaviour(LinkAnnotationClickBehaviour linkAnnotationClickBehaviour) {
    this.linkAnnotationClickBehaviour = linkAnnotationClickBehaviour;
  }


  public DocuViewareControlState zoom(Double zoom) {
    
    this.zoom = zoom;
    return this;
  }

   /**
   * Specifies the current factor of zoom applied during page rendering operations: 1 for 100%, 1.5 for 150%, 2 for 200%...
   * @return zoom
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the current factor of zoom applied during page rendering operations: 1 for 100%, 1.5 for 150%, 2 for 200%...")

  public Double getZoom() {
    return zoom;
  }


  public void setZoom(Double zoom) {
    this.zoom = zoom;
  }


  public DocuViewareControlState zoomMode(ViewerZoomMode zoomMode) {
    
    this.zoomMode = zoomMode;
    return this;
  }

   /**
   * Get zoomMode
   * @return zoomMode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ViewerZoomMode getZoomMode() {
    return zoomMode;
  }


  public void setZoomMode(ViewerZoomMode zoomMode) {
    this.zoomMode = zoomMode;
  }


  public DocuViewareControlState openZoomMode(ViewerZoomMode openZoomMode) {
    
    this.openZoomMode = openZoomMode;
    return this;
  }

   /**
   * Get openZoomMode
   * @return openZoomMode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ViewerZoomMode getOpenZoomMode() {
    return openZoomMode;
  }


  public void setOpenZoomMode(ViewerZoomMode openZoomMode) {
    this.openZoomMode = openZoomMode;
  }


  public DocuViewareControlState viewRotation(RotateFlip viewRotation) {
    
    this.viewRotation = viewRotation;
    return this;
  }

   /**
   * Get viewRotation
   * @return viewRotation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public RotateFlip getViewRotation() {
    return viewRotation;
  }


  public void setViewRotation(RotateFlip viewRotation) {
    this.viewRotation = viewRotation;
  }


  public DocuViewareControlState pageRotation(RotateFlip pageRotation) {
    
    this.pageRotation = pageRotation;
    return this;
  }

   /**
   * Get pageRotation
   * @return pageRotation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public RotateFlip getPageRotation() {
    return pageRotation;
  }


  public void setPageRotation(RotateFlip pageRotation) {
    this.pageRotation = pageRotation;
  }


  public DocuViewareControlState zoomStep(Integer zoomStep) {
    
    this.zoomStep = zoomStep;
    return this;
  }

   /**
   * Defines the percentage of increasing or decreasing level of zoom for &#39;Zoom In&#39; and &#39;Zoom Out&#39; operations.
   * @return zoomStep
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Defines the percentage of increasing or decreasing level of zoom for 'Zoom In' and 'Zoom Out' operations.")

  public Integer getZoomStep() {
    return zoomStep;
  }


  public void setZoomStep(Integer zoomStep) {
    this.zoomStep = zoomStep;
  }


  public DocuViewareControlState scrollBars(Boolean scrollBars) {
    
    this.scrollBars = scrollBars;
    return this;
  }

   /**
   * Specifies whether scrollbars can be displayed or not within the viewer.&lt;br /&gt;
   * @return scrollBars
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether scrollbars can be displayed or not within the viewer.<br />")

  public Boolean getScrollBars() {
    return scrollBars;
  }


  public void setScrollBars(Boolean scrollBars) {
    this.scrollBars = scrollBars;
  }


  public DocuViewareControlState forceScrollBars(Boolean forceScrollBars) {
    
    this.forceScrollBars = forceScrollBars;
    return this;
  }

   /**
   * Specifies whether the viewer shall always show scrollbars.
   * @return forceScrollBars
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the viewer shall always show scrollbars.")

  public Boolean getForceScrollBars() {
    return forceScrollBars;
  }


  public void setForceScrollBars(Boolean forceScrollBars) {
    this.forceScrollBars = forceScrollBars;
  }


  public DocuViewareControlState pageViewMode(PageViewMode pageViewMode) {
    
    this.pageViewMode = pageViewMode;
    return this;
  }

   /**
   * Get pageViewMode
   * @return pageViewMode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PageViewMode getPageViewMode() {
    return pageViewMode;
  }


  public void setPageViewMode(PageViewMode pageViewMode) {
    this.pageViewMode = pageViewMode;
  }


  public DocuViewareControlState enableTextSelection(Boolean enableTextSelection) {
    
    this.enableTextSelection = enableTextSelection;
    return this;
  }

   /**
   * Specifies if text selection is permitted.
   * @return enableTextSelection
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies if text selection is permitted.")

  public Boolean getEnableTextSelection() {
    return enableTextSelection;
  }


  public void setEnableTextSelection(Boolean enableTextSelection) {
    this.enableTextSelection = enableTextSelection;
  }


  public DocuViewareControlState enableTextSelectionAnnotation(Boolean enableTextSelectionAnnotation) {
    
    this.enableTextSelectionAnnotation = enableTextSelectionAnnotation;
    return this;
  }

   /**
   * Specifies whether the selected text context menu options should contain annotations entries.
   * @return enableTextSelectionAnnotation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the selected text context menu options should contain annotations entries.")

  public Boolean getEnableTextSelectionAnnotation() {
    return enableTextSelectionAnnotation;
  }


  public void setEnableTextSelectionAnnotation(Boolean enableTextSelectionAnnotation) {
    this.enableTextSelectionAnnotation = enableTextSelectionAnnotation;
  }


  public DocuViewareControlState locale(DocuViewareLocale locale) {
    
    this.locale = locale;
    return this;
  }

   /**
   * Get locale
   * @return locale
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DocuViewareLocale getLocale() {
    return locale;
  }


  public void setLocale(DocuViewareLocale locale) {
    this.locale = locale;
  }


  public DocuViewareControlState userLanguages(List<String> userLanguages) {
    
    this.userLanguages = userLanguages;
    return this;
  }

  public DocuViewareControlState addUserLanguagesItem(String userLanguagesItem) {
    if (this.userLanguages == null) {
      this.userLanguages = new ArrayList<String>();
    }
    this.userLanguages.add(userLanguagesItem);
    return this;
  }

   /**
   * Specifies the different languages used by the user&#39;s browser.
   * @return userLanguages
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the different languages used by the user's browser.")

  public List<String> getUserLanguages() {
    return userLanguages;
  }


  public void setUserLanguages(List<String> userLanguages) {
    this.userLanguages = userLanguages;
  }


  public DocuViewareControlState controlWidth(String controlWidth) {
    
    this.controlWidth = controlWidth;
    return this;
  }

   /**
   * Specifies the width of the control within its container.
   * @return controlWidth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the width of the control within its container.")

  public String getControlWidth() {
    return controlWidth;
  }


  public void setControlWidth(String controlWidth) {
    this.controlWidth = controlWidth;
  }


  public DocuViewareControlState controlHeight(String controlHeight) {
    
    this.controlHeight = controlHeight;
    return this;
  }

   /**
   * Specifies, the height of the control within its container.
   * @return controlHeight
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies, the height of the control within its container.")

  public String getControlHeight() {
    return controlHeight;
  }


  public void setControlHeight(String controlHeight) {
    this.controlHeight = controlHeight;
  }


  public DocuViewareControlState annotationDropShadow(Boolean annotationDropShadow) {
    
    this.annotationDropShadow = annotationDropShadow;
    return this;
  }

   /**
   * Specifies whether GdPicture/XMP annotations are rendered with a drop shadow effect.
   * @return annotationDropShadow
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether GdPicture/XMP annotations are rendered with a drop shadow effect.")

  public Boolean getAnnotationDropShadow() {
    return annotationDropShadow;
  }


  public void setAnnotationDropShadow(Boolean annotationDropShadow) {
    this.annotationDropShadow = annotationDropShadow;
  }


  public DocuViewareControlState allowPrint(Boolean allowPrint) {
    
    this.allowPrint = allowPrint;
    return this;
  }

   /**
   * Specifies whether printing is allowed.
   * @return allowPrint
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether printing is allowed.")

  public Boolean getAllowPrint() {
    return allowPrint;
  }


  public void setAllowPrint(Boolean allowPrint) {
    this.allowPrint = allowPrint;
  }


  public DocuViewareControlState allowUpload(Boolean allowUpload) {
    
    this.allowUpload = allowUpload;
    return this;
  }

   /**
   * Specifies whether file upload is allowed.
   * @return allowUpload
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether file upload is allowed.")

  public Boolean getAllowUpload() {
    return allowUpload;
  }


  public void setAllowUpload(Boolean allowUpload) {
    this.allowUpload = allowUpload;
  }


  public DocuViewareControlState enableMultipleThumbnailSelection(Boolean enableMultipleThumbnailSelection) {
    
    this.enableMultipleThumbnailSelection = enableMultipleThumbnailSelection;
    return this;
  }

   /**
   * Specifies whether multiple thumbnails selection is allowed.
   * @return enableMultipleThumbnailSelection
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether multiple thumbnails selection is allowed.")

  public Boolean getEnableMultipleThumbnailSelection() {
    return enableMultipleThumbnailSelection;
  }


  public void setEnableMultipleThumbnailSelection(Boolean enableMultipleThumbnailSelection) {
    this.enableMultipleThumbnailSelection = enableMultipleThumbnailSelection;
  }


  public DocuViewareControlState enableThumbnailDragDrop(Boolean enableThumbnailDragDrop) {
    
    this.enableThumbnailDragDrop = enableThumbnailDragDrop;
    return this;
  }

   /**
   * Specifies whether the thumbnails can be moved by drag and drop.
   * @return enableThumbnailDragDrop
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the thumbnails can be moved by drag and drop.")

  public Boolean getEnableThumbnailDragDrop() {
    return enableThumbnailDragDrop;
  }


  public void setEnableThumbnailDragDrop(Boolean enableThumbnailDragDrop) {
    this.enableThumbnailDragDrop = enableThumbnailDragDrop;
  }


  public DocuViewareControlState enableFileUploadButton(Boolean enableFileUploadButton) {
    
    this.enableFileUploadButton = enableFileUploadButton;
    return this;
  }

   /**
   * Specifies whether the open button shall be enabled.
   * @return enableFileUploadButton
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the open button shall be enabled.")

  public Boolean getEnableFileUploadButton() {
    return enableFileUploadButton;
  }


  public void setEnableFileUploadButton(Boolean enableFileUploadButton) {
    this.enableFileUploadButton = enableFileUploadButton;
  }


  public DocuViewareControlState enableLoadFromUriButton(Boolean enableLoadFromUriButton) {
    
    this.enableLoadFromUriButton = enableLoadFromUriButton;
    return this;
  }

   /**
   * Specifies whether the &#39;open from uri&#39; button shall be enabled.
   * @return enableLoadFromUriButton
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the 'open from uri' button shall be enabled.")

  public Boolean getEnableLoadFromUriButton() {
    return enableLoadFromUriButton;
  }


  public void setEnableLoadFromUriButton(Boolean enableLoadFromUriButton) {
    this.enableLoadFromUriButton = enableLoadFromUriButton;
  }


  public DocuViewareControlState enableSaveButton(Boolean enableSaveButton) {
    
    this.enableSaveButton = enableSaveButton;
    return this;
  }

   /**
   * Specifies whether the save button shall be enabled.
   * @return enableSaveButton
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the save button shall be enabled.")

  public Boolean getEnableSaveButton() {
    return enableSaveButton;
  }


  public void setEnableSaveButton(Boolean enableSaveButton) {
    this.enableSaveButton = enableSaveButton;
  }


  public DocuViewareControlState enablePagesNavigationButtons(Boolean enablePagesNavigationButtons) {
    
    this.enablePagesNavigationButtons = enablePagesNavigationButtons;
    return this;
  }

   /**
   * Specifies whether the save button shall be enabled.
   * @return enablePagesNavigationButtons
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the save button shall be enabled.")

  public Boolean getEnablePagesNavigationButtons() {
    return enablePagesNavigationButtons;
  }


  public void setEnablePagesNavigationButtons(Boolean enablePagesNavigationButtons) {
    this.enablePagesNavigationButtons = enablePagesNavigationButtons;
  }


  public DocuViewareControlState enablePrintButton(Boolean enablePrintButton) {
    
    this.enablePrintButton = enablePrintButton;
    return this;
  }

   /**
   * Specifies whether the print button shall be enabled.
   * @return enablePrintButton
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the print button shall be enabled.")

  public Boolean getEnablePrintButton() {
    return enablePrintButton;
  }


  public void setEnablePrintButton(Boolean enablePrintButton) {
    this.enablePrintButton = enablePrintButton;
  }


  public DocuViewareControlState enablePrintToPDF(Boolean enablePrintToPDF) {
    
    this.enablePrintToPDF = enablePrintToPDF;
    return this;
  }

   /**
   * Specifies whether the print to pdf option shall be enabled.
   * @return enablePrintToPDF
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the print to pdf option shall be enabled.")

  public Boolean getEnablePrintToPDF() {
    return enablePrintToPDF;
  }


  public void setEnablePrintToPDF(Boolean enablePrintToPDF) {
    this.enablePrintToPDF = enablePrintToPDF;
  }


  public DocuViewareControlState enableFitWidthButton(Boolean enableFitWidthButton) {
    
    this.enableFitWidthButton = enableFitWidthButton;
    return this;
  }

   /**
   * Specifies whether the fit width button shall be enabled.
   * @return enableFitWidthButton
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the fit width button shall be enabled.")

  public Boolean getEnableFitWidthButton() {
    return enableFitWidthButton;
  }


  public void setEnableFitWidthButton(Boolean enableFitWidthButton) {
    this.enableFitWidthButton = enableFitWidthButton;
  }


  public DocuViewareControlState enableZoom100Button(Boolean enableZoom100Button) {
    
    this.enableZoom100Button = enableZoom100Button;
    return this;
  }

   /**
   * Specifies whether the fit original size button shall be enabled.
   * @return enableZoom100Button
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the fit original size button shall be enabled.")

  public Boolean getEnableZoom100Button() {
    return enableZoom100Button;
  }


  public void setEnableZoom100Button(Boolean enableZoom100Button) {
    this.enableZoom100Button = enableZoom100Button;
  }


  public DocuViewareControlState enableMouseModeButtons(Boolean enableMouseModeButtons) {
    
    this.enableMouseModeButtons = enableMouseModeButtons;
    return this;
  }

   /**
   * Specifies whether the mouse mode button group shall be enabled.
   * @return enableMouseModeButtons
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the mouse mode button group shall be enabled.")

  public Boolean getEnableMouseModeButtons() {
    return enableMouseModeButtons;
  }


  public void setEnableMouseModeButtons(Boolean enableMouseModeButtons) {
    this.enableMouseModeButtons = enableMouseModeButtons;
  }


  public DocuViewareControlState enablePanModeButton(Boolean enablePanModeButton) {
    
    this.enablePanModeButton = enablePanModeButton;
    return this;
  }

   /**
   * Specifies whether the pan mode button shall be enabled.
   * @return enablePanModeButton
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the pan mode button shall be enabled.")

  public Boolean getEnablePanModeButton() {
    return enablePanModeButton;
  }


  public void setEnablePanModeButton(Boolean enablePanModeButton) {
    this.enablePanModeButton = enablePanModeButton;
  }


  public DocuViewareControlState enableSelectModeButton(Boolean enableSelectModeButton) {
    
    this.enableSelectModeButton = enableSelectModeButton;
    return this;
  }

   /**
   * Specifies whether the select mode button shall be enabled.
   * @return enableSelectModeButton
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the select mode button shall be enabled.")

  public Boolean getEnableSelectModeButton() {
    return enableSelectModeButton;
  }


  public void setEnableSelectModeButton(Boolean enableSelectModeButton) {
    this.enableSelectModeButton = enableSelectModeButton;
  }


  public DocuViewareControlState enableMarqueeZoomModeButton(Boolean enableMarqueeZoomModeButton) {
    
    this.enableMarqueeZoomModeButton = enableMarqueeZoomModeButton;
    return this;
  }

   /**
   * Specifies whether the marquee zoom mode button shall be enabled.
   * @return enableMarqueeZoomModeButton
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the marquee zoom mode button shall be enabled.")

  public Boolean getEnableMarqueeZoomModeButton() {
    return enableMarqueeZoomModeButton;
  }


  public void setEnableMarqueeZoomModeButton(Boolean enableMarqueeZoomModeButton) {
    this.enableMarqueeZoomModeButton = enableMarqueeZoomModeButton;
  }


  public DocuViewareControlState enableFullScreenButton(Boolean enableFullScreenButton) {
    
    this.enableFullScreenButton = enableFullScreenButton;
    return this;
  }

   /**
   * Specifies whether the fullscreen button shall be enabled.
   * @return enableFullScreenButton
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the fullscreen button shall be enabled.")

  public Boolean getEnableFullScreenButton() {
    return enableFullScreenButton;
  }


  public void setEnableFullScreenButton(Boolean enableFullScreenButton) {
    this.enableFullScreenButton = enableFullScreenButton;
  }


  public DocuViewareControlState enableFitPageButton(Boolean enableFitPageButton) {
    
    this.enableFitPageButton = enableFitPageButton;
    return this;
  }

   /**
   * Specifies whether the &#39;Fit Page&#39; button shall be enabled.
   * @return enableFitPageButton
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the 'Fit Page' button shall be enabled.")

  public Boolean getEnableFitPageButton() {
    return enableFitPageButton;
  }


  public void setEnableFitPageButton(Boolean enableFitPageButton) {
    this.enableFitPageButton = enableFitPageButton;
  }


  public DocuViewareControlState enableZoomButtons(Boolean enableZoomButtons) {
    
    this.enableZoomButtons = enableZoomButtons;
    return this;
  }

   /**
   * Specifies whether the zoom button group shall be enabled.
   * @return enableZoomButtons
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the zoom button group shall be enabled.")

  public Boolean getEnableZoomButtons() {
    return enableZoomButtons;
  }


  public void setEnableZoomButtons(Boolean enableZoomButtons) {
    this.enableZoomButtons = enableZoomButtons;
  }


  public DocuViewareControlState enablePageViewButtons(Boolean enablePageViewButtons) {
    
    this.enablePageViewButtons = enablePageViewButtons;
    return this;
  }

   /**
   * Specifies whether the page view mode button shall be enabled.
   * @return enablePageViewButtons
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the page view mode button shall be enabled.")

  public Boolean getEnablePageViewButtons() {
    return enablePageViewButtons;
  }


  public void setEnablePageViewButtons(Boolean enablePageViewButtons) {
    this.enablePageViewButtons = enablePageViewButtons;
  }


  public DocuViewareControlState rotateButtonsMode(RotateMode rotateButtonsMode) {
    
    this.rotateButtonsMode = rotateButtonsMode;
    return this;
  }

   /**
   * Get rotateButtonsMode
   * @return rotateButtonsMode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public RotateMode getRotateButtonsMode() {
    return rotateButtonsMode;
  }


  public void setRotateButtonsMode(RotateMode rotateButtonsMode) {
    this.rotateButtonsMode = rotateButtonsMode;
  }


  public DocuViewareControlState enableRotateButtons(Boolean enableRotateButtons) {
    
    this.enableRotateButtons = enableRotateButtons;
    return this;
  }

   /**
   * Specifies whether the rotation button group shall be enabled.
   * @return enableRotateButtons
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the rotation button group shall be enabled.")

  public Boolean getEnableRotateButtons() {
    return enableRotateButtons;
  }


  public void setEnableRotateButtons(Boolean enableRotateButtons) {
    this.enableRotateButtons = enableRotateButtons;
  }


  public DocuViewareControlState enableAnnotationActionButtons(Boolean enableAnnotationActionButtons) {
    
    this.enableAnnotationActionButtons = enableAnnotationActionButtons;
    return this;
  }

   /**
   * Specifies whether the action buttons shall be enabled when an annotation is selected.  This property is only effective if EnableGdPictureAnnotations is set to true.
   * @return enableAnnotationActionButtons
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the action buttons shall be enabled when an annotation is selected.  This property is only effective if EnableGdPictureAnnotations is set to true.")

  public Boolean getEnableAnnotationActionButtons() {
    return enableAnnotationActionButtons;
  }


  public void setEnableAnnotationActionButtons(Boolean enableAnnotationActionButtons) {
    this.enableAnnotationActionButtons = enableAnnotationActionButtons;
  }


  public DocuViewareControlState enableSelectedTextAnnotationEdition(Boolean enableSelectedTextAnnotationEdition) {
    
    this.enableSelectedTextAnnotationEdition = enableSelectedTextAnnotationEdition;
    return this;
  }

   /**
   * Specifies whether the selected text annotations shall be editable.
   * @return enableSelectedTextAnnotationEdition
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the selected text annotations shall be editable.")

  public Boolean getEnableSelectedTextAnnotationEdition() {
    return enableSelectedTextAnnotationEdition;
  }


  public void setEnableSelectedTextAnnotationEdition(Boolean enableSelectedTextAnnotationEdition) {
    this.enableSelectedTextAnnotationEdition = enableSelectedTextAnnotationEdition;
  }


  public DocuViewareControlState enableRectangleHighlighterAnnotationButton(Boolean enableRectangleHighlighterAnnotationButton) {
    
    this.enableRectangleHighlighterAnnotationButton = enableRectangleHighlighterAnnotationButton;
    return this;
  }

   /**
   * Specifies whether the rectangle highlighter annotation button shall be enabled. &lt;br /&gt;  This property is only effective if EnableGdPictureAnnotations is set to true.
   * @return enableRectangleHighlighterAnnotationButton
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the rectangle highlighter annotation button shall be enabled. <br />  This property is only effective if EnableGdPictureAnnotations is set to true.")

  public Boolean getEnableRectangleHighlighterAnnotationButton() {
    return enableRectangleHighlighterAnnotationButton;
  }


  public void setEnableRectangleHighlighterAnnotationButton(Boolean enableRectangleHighlighterAnnotationButton) {
    this.enableRectangleHighlighterAnnotationButton = enableRectangleHighlighterAnnotationButton;
  }


  public DocuViewareControlState enableFreehandHighlighterAnnotationButton(Boolean enableFreehandHighlighterAnnotationButton) {
    
    this.enableFreehandHighlighterAnnotationButton = enableFreehandHighlighterAnnotationButton;
    return this;
  }

   /**
   * Specifies whether the freehand highlighter annotation button shall be enabled.&lt;br /&gt;  This property is only effective if EnableGdPictureAnnotations is set to true.
   * @return enableFreehandHighlighterAnnotationButton
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the freehand highlighter annotation button shall be enabled.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.")

  public Boolean getEnableFreehandHighlighterAnnotationButton() {
    return enableFreehandHighlighterAnnotationButton;
  }


  public void setEnableFreehandHighlighterAnnotationButton(Boolean enableFreehandHighlighterAnnotationButton) {
    this.enableFreehandHighlighterAnnotationButton = enableFreehandHighlighterAnnotationButton;
  }


  public DocuViewareControlState enableRubberStampAnnotationButton(Boolean enableRubberStampAnnotationButton) {
    
    this.enableRubberStampAnnotationButton = enableRubberStampAnnotationButton;
    return this;
  }

   /**
   * Specifies whether the rubber stamp annotation button shall be enabled.&lt;br /&gt;  This property is only effective if EnableGdPictureAnnotations is set to true.
   * @return enableRubberStampAnnotationButton
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the rubber stamp annotation button shall be enabled.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.")

  public Boolean getEnableRubberStampAnnotationButton() {
    return enableRubberStampAnnotationButton;
  }


  public void setEnableRubberStampAnnotationButton(Boolean enableRubberStampAnnotationButton) {
    this.enableRubberStampAnnotationButton = enableRubberStampAnnotationButton;
  }


  public DocuViewareControlState enableRectangleAnnotationButton(Boolean enableRectangleAnnotationButton) {
    
    this.enableRectangleAnnotationButton = enableRectangleAnnotationButton;
    return this;
  }

   /**
   * Specifies whether the rectangle annotation button shall be enabled.&lt;br /&gt;  This property is only effective if EnableGdPictureAnnotations is set to true.
   * @return enableRectangleAnnotationButton
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the rectangle annotation button shall be enabled.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.")

  public Boolean getEnableRectangleAnnotationButton() {
    return enableRectangleAnnotationButton;
  }


  public void setEnableRectangleAnnotationButton(Boolean enableRectangleAnnotationButton) {
    this.enableRectangleAnnotationButton = enableRectangleAnnotationButton;
  }


  public DocuViewareControlState enableEllipseAnnotationButton(Boolean enableEllipseAnnotationButton) {
    
    this.enableEllipseAnnotationButton = enableEllipseAnnotationButton;
    return this;
  }

   /**
   * Specifies whether the ellipse annotation button shall be enabled.&lt;br /&gt;  This property is only effective if EnableGdPictureAnnotations is set to true.
   * @return enableEllipseAnnotationButton
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the ellipse annotation button shall be enabled.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.")

  public Boolean getEnableEllipseAnnotationButton() {
    return enableEllipseAnnotationButton;
  }


  public void setEnableEllipseAnnotationButton(Boolean enableEllipseAnnotationButton) {
    this.enableEllipseAnnotationButton = enableEllipseAnnotationButton;
  }


  public DocuViewareControlState enableLineAnnotationButton(Boolean enableLineAnnotationButton) {
    
    this.enableLineAnnotationButton = enableLineAnnotationButton;
    return this;
  }

   /**
   * Specifies whether the line annotation button shall be enabled.&lt;br /&gt;  This property is only effective if EnableGdPictureAnnotations is set to true.
   * @return enableLineAnnotationButton
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the line annotation button shall be enabled.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.")

  public Boolean getEnableLineAnnotationButton() {
    return enableLineAnnotationButton;
  }


  public void setEnableLineAnnotationButton(Boolean enableLineAnnotationButton) {
    this.enableLineAnnotationButton = enableLineAnnotationButton;
  }


  public DocuViewareControlState enableConnectedLineAnnotationButton(Boolean enableConnectedLineAnnotationButton) {
    
    this.enableConnectedLineAnnotationButton = enableConnectedLineAnnotationButton;
    return this;
  }

   /**
   * Specifies whether the connected line annotation button shall be enabled.&lt;br /&gt;  This property is only effective if EnableGdPictureAnnotations is set to true.
   * @return enableConnectedLineAnnotationButton
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the connected line annotation button shall be enabled.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.")

  public Boolean getEnableConnectedLineAnnotationButton() {
    return enableConnectedLineAnnotationButton;
  }


  public void setEnableConnectedLineAnnotationButton(Boolean enableConnectedLineAnnotationButton) {
    this.enableConnectedLineAnnotationButton = enableConnectedLineAnnotationButton;
  }


  public DocuViewareControlState enableFreehandAnnotationButton(Boolean enableFreehandAnnotationButton) {
    
    this.enableFreehandAnnotationButton = enableFreehandAnnotationButton;
    return this;
  }

   /**
   * Specifies whether the freehand annotation button shall be enabled.&lt;br /&gt;  This property is only effective if EnableGdPictureAnnotations is set to true.
   * @return enableFreehandAnnotationButton
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the freehand annotation button shall be enabled.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.")

  public Boolean getEnableFreehandAnnotationButton() {
    return enableFreehandAnnotationButton;
  }


  public void setEnableFreehandAnnotationButton(Boolean enableFreehandAnnotationButton) {
    this.enableFreehandAnnotationButton = enableFreehandAnnotationButton;
  }


  public DocuViewareControlState enableLineArrowAnnotationButton(Boolean enableLineArrowAnnotationButton) {
    
    this.enableLineArrowAnnotationButton = enableLineArrowAnnotationButton;
    return this;
  }

   /**
   * Specifies whether the line arrow annotation button shall be enabled.&lt;br /&gt;  This property is only effective if EnableGdPictureAnnotations is set to true.
   * @return enableLineArrowAnnotationButton
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the line arrow annotation button shall be enabled.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.")

  public Boolean getEnableLineArrowAnnotationButton() {
    return enableLineArrowAnnotationButton;
  }


  public void setEnableLineArrowAnnotationButton(Boolean enableLineArrowAnnotationButton) {
    this.enableLineArrowAnnotationButton = enableLineArrowAnnotationButton;
  }


  public DocuViewareControlState enableLinkAnnotationButton(Boolean enableLinkAnnotationButton) {
    
    this.enableLinkAnnotationButton = enableLinkAnnotationButton;
    return this;
  }

   /**
   * Specifies whether the link annotation button shall be enabled.&lt;br /&gt;  This property is only effective if EnableGdPictureAnnotations is set to true.
   * @return enableLinkAnnotationButton
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the link annotation button shall be enabled.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.")

  public Boolean getEnableLinkAnnotationButton() {
    return enableLinkAnnotationButton;
  }


  public void setEnableLinkAnnotationButton(Boolean enableLinkAnnotationButton) {
    this.enableLinkAnnotationButton = enableLinkAnnotationButton;
  }


  public DocuViewareControlState enableRulerAnnotationButton(Boolean enableRulerAnnotationButton) {
    
    this.enableRulerAnnotationButton = enableRulerAnnotationButton;
    return this;
  }

   /**
   * Specifies whether the ruler annotation button shall be enabled.&lt;br /&gt;  This property is only effective if EnableGdPictureAnnotations is set to true.
   * @return enableRulerAnnotationButton
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the ruler annotation button shall be enabled.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.")

  public Boolean getEnableRulerAnnotationButton() {
    return enableRulerAnnotationButton;
  }


  public void setEnableRulerAnnotationButton(Boolean enableRulerAnnotationButton) {
    this.enableRulerAnnotationButton = enableRulerAnnotationButton;
  }


  public DocuViewareControlState enablePolyRulerAnnotationButton(Boolean enablePolyRulerAnnotationButton) {
    
    this.enablePolyRulerAnnotationButton = enablePolyRulerAnnotationButton;
    return this;
  }

   /**
   * Get enablePolyRulerAnnotationButton
   * @return enablePolyRulerAnnotationButton
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getEnablePolyRulerAnnotationButton() {
    return enablePolyRulerAnnotationButton;
  }


  public void setEnablePolyRulerAnnotationButton(Boolean enablePolyRulerAnnotationButton) {
    this.enablePolyRulerAnnotationButton = enablePolyRulerAnnotationButton;
  }


  public DocuViewareControlState enableTextAnnotationButton(Boolean enableTextAnnotationButton) {
    
    this.enableTextAnnotationButton = enableTextAnnotationButton;
    return this;
  }

   /**
   * Specifies whether the text annotation button shall be enabled.&lt;br /&gt;  This property is only effective if EnableGdPictureAnnotations is set to true.
   * @return enableTextAnnotationButton
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the text annotation button shall be enabled.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.")

  public Boolean getEnableTextAnnotationButton() {
    return enableTextAnnotationButton;
  }


  public void setEnableTextAnnotationButton(Boolean enableTextAnnotationButton) {
    this.enableTextAnnotationButton = enableTextAnnotationButton;
  }


  public DocuViewareControlState enableStickyNoteAnnotationButton(Boolean enableStickyNoteAnnotationButton) {
    
    this.enableStickyNoteAnnotationButton = enableStickyNoteAnnotationButton;
    return this;
  }

   /**
   * Specifies whether the sticky note annotation button shall be enabled.&lt;br /&gt;  This property is only effective if EnableGdPictureAnnotations is set to true.
   * @return enableStickyNoteAnnotationButton
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the sticky note annotation button shall be enabled.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.")

  public Boolean getEnableStickyNoteAnnotationButton() {
    return enableStickyNoteAnnotationButton;
  }


  public void setEnableStickyNoteAnnotationButton(Boolean enableStickyNoteAnnotationButton) {
    this.enableStickyNoteAnnotationButton = enableStickyNoteAnnotationButton;
  }


  public DocuViewareControlState enableTwainAcquisitionButton(Boolean enableTwainAcquisitionButton) {
    
    this.enableTwainAcquisitionButton = enableTwainAcquisitionButton;
    return this;
  }

   /**
   * Specifies whether the TWAIN acquisition button shall be enabled.
   * @return enableTwainAcquisitionButton
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the TWAIN acquisition button shall be enabled.")

  public Boolean getEnableTwainAcquisitionButton() {
    return enableTwainAcquisitionButton;
  }


  public void setEnableTwainAcquisitionButton(Boolean enableTwainAcquisitionButton) {
    this.enableTwainAcquisitionButton = enableTwainAcquisitionButton;
  }


  public DocuViewareControlState twainSourceEnableCustomConfiguration(Boolean twainSourceEnableCustomConfiguration) {
    
    this.twainSourceEnableCustomConfiguration = twainSourceEnableCustomConfiguration;
    return this;
  }

   /**
   * Enables the custom configuration support for the TWAIN source.
   * @return twainSourceEnableCustomConfiguration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Enables the custom configuration support for the TWAIN source.")

  public Boolean getTwainSourceEnableCustomConfiguration() {
    return twainSourceEnableCustomConfiguration;
  }


  public void setTwainSourceEnableCustomConfiguration(Boolean twainSourceEnableCustomConfiguration) {
    this.twainSourceEnableCustomConfiguration = twainSourceEnableCustomConfiguration;
  }


  public DocuViewareControlState twainSourceSelectFeeder(Boolean twainSourceSelectFeeder) {
    
    this.twainSourceSelectFeeder = twainSourceSelectFeeder;
    return this;
  }

   /**
   * Specifies whether the TWAIN acquisition source shall acquire from the document feeder or the flatbed.  This property is only effective if TwainSourceSetCustomConfiguration is set to true.
   * @return twainSourceSelectFeeder
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the TWAIN acquisition source shall acquire from the document feeder or the flatbed.  This property is only effective if TwainSourceSetCustomConfiguration is set to true.")

  public Boolean getTwainSourceSelectFeeder() {
    return twainSourceSelectFeeder;
  }


  public void setTwainSourceSelectFeeder(Boolean twainSourceSelectFeeder) {
    this.twainSourceSelectFeeder = twainSourceSelectFeeder;
  }


  public DocuViewareControlState twainSourceBitDepth(Integer twainSourceBitDepth) {
    
    this.twainSourceBitDepth = twainSourceBitDepth;
    return this;
  }

   /**
   * Specifies the bit depth the TWAIN acquisition source should acquire at. &lt;br /&gt;  This property is only effective if TwainSourceSetCustomConfiguration is set to true.
   * @return twainSourceBitDepth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the bit depth the TWAIN acquisition source should acquire at. <br />  This property is only effective if TwainSourceSetCustomConfiguration is set to true.")

  public Integer getTwainSourceBitDepth() {
    return twainSourceBitDepth;
  }


  public void setTwainSourceBitDepth(Integer twainSourceBitDepth) {
    this.twainSourceBitDepth = twainSourceBitDepth;
  }


  public DocuViewareControlState twainSourceResolution(Integer twainSourceResolution) {
    
    this.twainSourceResolution = twainSourceResolution;
    return this;
  }

   /**
   * Specifies the resolution the TWAIN acquisition source should acquire at. &lt;br /&gt;  This property is only effective if TwainSourceSetCustomConfiguration is set to true.
   * @return twainSourceResolution
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the resolution the TWAIN acquisition source should acquire at. <br />  This property is only effective if TwainSourceSetCustomConfiguration is set to true.")

  public Integer getTwainSourceResolution() {
    return twainSourceResolution;
  }


  public void setTwainSourceResolution(Integer twainSourceResolution) {
    this.twainSourceResolution = twainSourceResolution;
  }


  public DocuViewareControlState twainSourceEnableDuplex(Boolean twainSourceEnableDuplex) {
    
    this.twainSourceEnableDuplex = twainSourceEnableDuplex;
    return this;
  }

   /**
   * Specifies whether the TWAIN acquisition source shall enable duplex acquisition. &lt;br /&gt;  This property is only effective if TwainSourceSetCustomConfiguration is set to true.
   * @return twainSourceEnableDuplex
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the TWAIN acquisition source shall enable duplex acquisition. <br />  This property is only effective if TwainSourceSetCustomConfiguration is set to true.")

  public Boolean getTwainSourceEnableDuplex() {
    return twainSourceEnableDuplex;
  }


  public void setTwainSourceEnableDuplex(Boolean twainSourceEnableDuplex) {
    this.twainSourceEnableDuplex = twainSourceEnableDuplex;
  }


  public DocuViewareControlState twainSourceHideUI(Boolean twainSourceHideUI) {
    
    this.twainSourceHideUI = twainSourceHideUI;
    return this;
  }

   /**
   * Specifies whether the TWAIN acquisition source shall hide or show the device driver user interface before acquisition. &lt;br /&gt;  This property is only effective if TwainSourceSetCustomConfiguration is set to true.
   * @return twainSourceHideUI
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the TWAIN acquisition source shall hide or show the device driver user interface before acquisition. <br />  This property is only effective if TwainSourceSetCustomConfiguration is set to true.")

  public Boolean getTwainSourceHideUI() {
    return twainSourceHideUI;
  }


  public void setTwainSourceHideUI(Boolean twainSourceHideUI) {
    this.twainSourceHideUI = twainSourceHideUI;
  }


  public DocuViewareControlState freeHandContinuousDrawingMode(Boolean freeHandContinuousDrawingMode) {
    
    this.freeHandContinuousDrawingMode = freeHandContinuousDrawingMode;
    return this;
  }

   /**
   * Specifies whether the drawing mode for freehand annotation is multi line or not.&lt;br /&gt;  This property is only effective if EnableGdPictureAnnotations is set to true.
   * @return freeHandContinuousDrawingMode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the drawing mode for freehand annotation is multi line or not.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.")

  public Boolean getFreeHandContinuousDrawingMode() {
    return freeHandContinuousDrawingMode;
  }


  public void setFreeHandContinuousDrawingMode(Boolean freeHandContinuousDrawingMode) {
    this.freeHandContinuousDrawingMode = freeHandContinuousDrawingMode;
  }


  public DocuViewareControlState showTextSearchSnapIn(Boolean showTextSearchSnapIn) {
    
    this.showTextSearchSnapIn = showTextSearchSnapIn;
    return this;
  }

   /**
   * Specifies whether the text search SnapIn is enabled.
   * @return showTextSearchSnapIn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the text search SnapIn is enabled.")

  public Boolean getShowTextSearchSnapIn() {
    return showTextSearchSnapIn;
  }


  public void setShowTextSearchSnapIn(Boolean showTextSearchSnapIn) {
    this.showTextSearchSnapIn = showTextSearchSnapIn;
  }


  public DocuViewareControlState showThumbnailsSnapIn(Boolean showThumbnailsSnapIn) {
    
    this.showThumbnailsSnapIn = showThumbnailsSnapIn;
    return this;
  }

   /**
   * Specifies whether the Thumbnails SnapIn is enabled.
   * @return showThumbnailsSnapIn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the Thumbnails SnapIn is enabled.")

  public Boolean getShowThumbnailsSnapIn() {
    return showThumbnailsSnapIn;
  }


  public void setShowThumbnailsSnapIn(Boolean showThumbnailsSnapIn) {
    this.showThumbnailsSnapIn = showThumbnailsSnapIn;
  }


  public DocuViewareControlState showBookmarksSnapIn(Boolean showBookmarksSnapIn) {
    
    this.showBookmarksSnapIn = showBookmarksSnapIn;
    return this;
  }

   /**
   * Specifies whether the Bookmarks SnapIn is enabled.
   * @return showBookmarksSnapIn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the Bookmarks SnapIn is enabled.")

  public Boolean getShowBookmarksSnapIn() {
    return showBookmarksSnapIn;
  }


  public void setShowBookmarksSnapIn(Boolean showBookmarksSnapIn) {
    this.showBookmarksSnapIn = showBookmarksSnapIn;
  }


  public DocuViewareControlState showAnnotationsSnapIn(Boolean showAnnotationsSnapIn) {
    
    this.showAnnotationsSnapIn = showAnnotationsSnapIn;
    return this;
  }

   /**
   * Specifies whether the annotations SnapIn is enabled.
   * @return showAnnotationsSnapIn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the annotations SnapIn is enabled.")

  public Boolean getShowAnnotationsSnapIn() {
    return showAnnotationsSnapIn;
  }


  public void setShowAnnotationsSnapIn(Boolean showAnnotationsSnapIn) {
    this.showAnnotationsSnapIn = showAnnotationsSnapIn;
  }


  public DocuViewareControlState showAnnotationsCommentsSnapIn(Boolean showAnnotationsCommentsSnapIn) {
    
    this.showAnnotationsCommentsSnapIn = showAnnotationsCommentsSnapIn;
    return this;
  }

   /**
   * Specifies whether the Annotations Comments SnapIn is enabled.
   * @return showAnnotationsCommentsSnapIn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the Annotations Comments SnapIn is enabled.")

  public Boolean getShowAnnotationsCommentsSnapIn() {
    return showAnnotationsCommentsSnapIn;
  }


  public void setShowAnnotationsCommentsSnapIn(Boolean showAnnotationsCommentsSnapIn) {
    this.showAnnotationsCommentsSnapIn = showAnnotationsCommentsSnapIn;
  }


  public DocuViewareControlState showRedactionSnapIn(Boolean showRedactionSnapIn) {
    
    this.showRedactionSnapIn = showRedactionSnapIn;
    return this;
  }

   /**
   * Specifies whether the Redaction Snap-In is enabled or not.  &lt;remarks&gt;  Default value is true.  &lt;/remarks&gt;
   * @return showRedactionSnapIn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the Redaction Snap-In is enabled or not.  <remarks>  Default value is true.  </remarks>")

  public Boolean getShowRedactionSnapIn() {
    return showRedactionSnapIn;
  }


  public void setShowRedactionSnapIn(Boolean showRedactionSnapIn) {
    this.showRedactionSnapIn = showRedactionSnapIn;
  }


  public DocuViewareControlState showDigitalSignatureSnapIn(Boolean showDigitalSignatureSnapIn) {
    
    this.showDigitalSignatureSnapIn = showDigitalSignatureSnapIn;
    return this;
  }

   /**
   * Specifies whether the Digital Signature Snap-In is enabled or not.  &lt;remarks&gt;  Default value is false.  &lt;/remarks&gt;
   * @return showDigitalSignatureSnapIn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the Digital Signature Snap-In is enabled or not.  <remarks>  Default value is false.  </remarks>")

  public Boolean getShowDigitalSignatureSnapIn() {
    return showDigitalSignatureSnapIn;
  }


  public void setShowDigitalSignatureSnapIn(Boolean showDigitalSignatureSnapIn) {
    this.showDigitalSignatureSnapIn = showDigitalSignatureSnapIn;
  }


  public DocuViewareControlState thumbnailWidth(Integer thumbnailWidth) {
    
    this.thumbnailWidth = thumbnailWidth;
    return this;
  }

   /**
   * The width, in pixels, of each thumbnail.
   * @return thumbnailWidth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The width, in pixels, of each thumbnail.")

  public Integer getThumbnailWidth() {
    return thumbnailWidth;
  }


  public void setThumbnailWidth(Integer thumbnailWidth) {
    this.thumbnailWidth = thumbnailWidth;
  }


  public DocuViewareControlState thumbnailHeight(Integer thumbnailHeight) {
    
    this.thumbnailHeight = thumbnailHeight;
    return this;
  }

   /**
   * The height, in pixels, of each thumbnail.
   * @return thumbnailHeight
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The height, in pixels, of each thumbnail.")

  public Integer getThumbnailHeight() {
    return thumbnailHeight;
  }


  public void setThumbnailHeight(Integer thumbnailHeight) {
    this.thumbnailHeight = thumbnailHeight;
  }


  public DocuViewareControlState snapInPanelDefaultWidth(String snapInPanelDefaultWidth) {
    
    this.snapInPanelDefaultWidth = snapInPanelDefaultWidth;
    return this;
  }

   /**
   * Specifies the Snap-in panel default width.
   * @return snapInPanelDefaultWidth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the Snap-in panel default width.")

  public String getSnapInPanelDefaultWidth() {
    return snapInPanelDefaultWidth;
  }


  public void setSnapInPanelDefaultWidth(String snapInPanelDefaultWidth) {
    this.snapInPanelDefaultWidth = snapInPanelDefaultWidth;
  }


  public DocuViewareControlState collapsedSnapIn(Boolean collapsedSnapIn) {
    
    this.collapsedSnapIn = collapsedSnapIn;
    return this;
  }

   /**
   * Specifies whether the Snap-in panel is collapsed or not.
   * @return collapsedSnapIn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the Snap-in panel is collapsed or not.")

  public Boolean getCollapsedSnapIn() {
    return collapsedSnapIn;
  }


  public void setCollapsedSnapIn(Boolean collapsedSnapIn) {
    this.collapsedSnapIn = collapsedSnapIn;
  }


  public DocuViewareControlState collapseSnapinOnDocumentClosed(Boolean collapseSnapinOnDocumentClosed) {
    
    this.collapseSnapinOnDocumentClosed = collapseSnapinOnDocumentClosed;
    return this;
  }

   /**
   * Specifies whether the Snap-in panel should be automatically collapsed when the displayed document is closed.
   * @return collapseSnapinOnDocumentClosed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the Snap-in panel should be automatically collapsed when the displayed document is closed.")

  public Boolean getCollapseSnapinOnDocumentClosed() {
    return collapseSnapinOnDocumentClosed;
  }


  public void setCollapseSnapinOnDocumentClosed(Boolean collapseSnapinOnDocumentClosed) {
    this.collapseSnapinOnDocumentClosed = collapseSnapinOnDocumentClosed;
  }


  public DocuViewareControlState showSnapInCollapseButton(Boolean showSnapInCollapseButton) {
    
    this.showSnapInCollapseButton = showSnapInCollapseButton;
    return this;
  }

   /**
   * Specifies whether the button that collapses the Snap-in panel is displayed or not.
   * @return showSnapInCollapseButton
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the button that collapses the Snap-in panel is displayed or not.")

  public Boolean getShowSnapInCollapseButton() {
    return showSnapInCollapseButton;
  }


  public void setShowSnapInCollapseButton(Boolean showSnapInCollapseButton) {
    this.showSnapInCollapseButton = showSnapInCollapseButton;
  }


  public DocuViewareControlState showSnapInPanelHeader(Boolean showSnapInPanelHeader) {
    
    this.showSnapInPanelHeader = showSnapInPanelHeader;
    return this;
  }

   /**
   * Specifies whether the header of the Snap-in panel is displayed or not.
   * @return showSnapInPanelHeader
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the header of the Snap-in panel is displayed or not.")

  public Boolean getShowSnapInPanelHeader() {
    return showSnapInPanelHeader;
  }


  public void setShowSnapInPanelHeader(Boolean showSnapInPanelHeader) {
    this.showSnapInPanelHeader = showSnapInPanelHeader;
  }


  public DocuViewareControlState showSnapInButtonStrip(Boolean showSnapInButtonStrip) {
    
    this.showSnapInButtonStrip = showSnapInButtonStrip;
    return this;
  }

   /**
   * Specifies whether the Snap-in button strip is displayed or not.
   * @return showSnapInButtonStrip
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the Snap-in button strip is displayed or not.")

  public Boolean getShowSnapInButtonStrip() {
    return showSnapInButtonStrip;
  }


  public void setShowSnapInButtonStrip(Boolean showSnapInButtonStrip) {
    this.showSnapInButtonStrip = showSnapInButtonStrip;
  }


  public DocuViewareControlState showToolbar(Boolean showToolbar) {
    
    this.showToolbar = showToolbar;
    return this;
  }

   /**
   * Specifies whether the Toolbars are visible or not.
   * @return showToolbar
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the Toolbars are visible or not.")

  public Boolean getShowToolbar() {
    return showToolbar;
  }


  public void setShowToolbar(Boolean showToolbar) {
    this.showToolbar = showToolbar;
  }


  public DocuViewareControlState toolbarStyle(ToolbarStyle toolbarStyle) {
    
    this.toolbarStyle = toolbarStyle;
    return this;
  }

   /**
   * Get toolbarStyle
   * @return toolbarStyle
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ToolbarStyle getToolbarStyle() {
    return toolbarStyle;
  }


  public void setToolbarStyle(ToolbarStyle toolbarStyle) {
    this.toolbarStyle = toolbarStyle;
  }


  public DocuViewareControlState toolbarButtonsSpacing(Integer toolbarButtonsSpacing) {
    
    this.toolbarButtonsSpacing = toolbarButtonsSpacing;
    return this;
  }

   /**
   * The space, in pixels, between each button of the toolbar.
   * @return toolbarButtonsSpacing
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The space, in pixels, between each button of the toolbar.")

  public Integer getToolbarButtonsSpacing() {
    return toolbarButtonsSpacing;
  }


  public void setToolbarButtonsSpacing(Integer toolbarButtonsSpacing) {
    this.toolbarButtonsSpacing = toolbarButtonsSpacing;
  }


  public DocuViewareControlState toolbarHeight(Integer toolbarHeight) {
    
    this.toolbarHeight = toolbarHeight;
    return this;
  }

   /**
   * The height, in pixels, of the toolbar.
   * @return toolbarHeight
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The height, in pixels, of the toolbar.")

  public Integer getToolbarHeight() {
    return toolbarHeight;
  }


  public void setToolbarHeight(Integer toolbarHeight) {
    this.toolbarHeight = toolbarHeight;
  }


  public DocuViewareControlState strokeColor(String strokeColor) {
    
    this.strokeColor = strokeColor;
    return this;
  }

   /**
   * Specifies the color used to stroke viewer elements such borders, toolbar icons and thumbnail text.
   * @return strokeColor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the color used to stroke viewer elements such borders, toolbar icons and thumbnail text.")

  public String getStrokeColor() {
    return strokeColor;
  }


  public void setStrokeColor(String strokeColor) {
    this.strokeColor = strokeColor;
  }


  public DocuViewareControlState miscBorderColor(String miscBorderColor) {
    
    this.miscBorderColor = miscBorderColor;
    return this;
  }

   /**
   * Specifies the color used to define dropdowns borders, buttons separators, line separators.
   * @return miscBorderColor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the color used to define dropdowns borders, buttons separators, line separators.")

  public String getMiscBorderColor() {
    return miscBorderColor;
  }


  public void setMiscBorderColor(String miscBorderColor) {
    this.miscBorderColor = miscBorderColor;
  }


  public DocuViewareControlState headerColor(String headerColor) {
    
    this.headerColor = headerColor;
    return this;
  }

   /**
   * Specifies the color used in both dialogs and snap-ins headers.
   * @return headerColor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the color used in both dialogs and snap-ins headers.")

  public String getHeaderColor() {
    return headerColor;
  }


  public void setHeaderColor(String headerColor) {
    this.headerColor = headerColor;
  }


  public DocuViewareControlState panelBackColor(String panelBackColor) {
    
    this.panelBackColor = panelBackColor;
    return this;
  }

   /**
   * Specifies the color used in both dialogs and snap-ins body background.
   * @return panelBackColor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the color used in both dialogs and snap-ins body background.")

  public String getPanelBackColor() {
    return panelBackColor;
  }


  public void setPanelBackColor(String panelBackColor) {
    this.panelBackColor = panelBackColor;
  }


  public DocuViewareControlState viewerBackColor(String viewerBackColor) {
    
    this.viewerBackColor = viewerBackColor;
    return this;
  }

   /**
   * Specifies the viewer area background color.
   * @return viewerBackColor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the viewer area background color.")

  public String getViewerBackColor() {
    return viewerBackColor;
  }


  public void setViewerBackColor(String viewerBackColor) {
    this.viewerBackColor = viewerBackColor;
  }


  public DocuViewareControlState activeSelectedColor(String activeSelectedColor) {
    
    this.activeSelectedColor = activeSelectedColor;
    return this;
  }

   /**
   * Specifies the selected and active elements stroke color.
   * @return activeSelectedColor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the selected and active elements stroke color.")

  public String getActiveSelectedColor() {
    return activeSelectedColor;
  }


  public void setActiveSelectedColor(String activeSelectedColor) {
    this.activeSelectedColor = activeSelectedColor;
  }


  public DocuViewareControlState toolbarBackColor(String toolbarBackColor) {
    
    this.toolbarBackColor = toolbarBackColor;
    return this;
  }

   /**
   * Viewer Toolbar Background Color.
   * @return toolbarBackColor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Viewer Toolbar Background Color.")

  public String getToolbarBackColor() {
    return toolbarBackColor;
  }


  public void setToolbarBackColor(String toolbarBackColor) {
    this.toolbarBackColor = toolbarBackColor;
  }


  public DocuViewareControlState customNotificationIconError(String customNotificationIconError) {
    
    this.customNotificationIconError = customNotificationIconError;
    return this;
  }

   /**
   * Custom error notification icon.&lt;br /&gt;  Used to specify a custom icon within errors notification boxes.
   * @return customNotificationIconError
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Custom error notification icon.<br />  Used to specify a custom icon within errors notification boxes.")

  public String getCustomNotificationIconError() {
    return customNotificationIconError;
  }


  public void setCustomNotificationIconError(String customNotificationIconError) {
    this.customNotificationIconError = customNotificationIconError;
  }


  public DocuViewareControlState customNotificationIconQuestion(String customNotificationIconQuestion) {
    
    this.customNotificationIconQuestion = customNotificationIconQuestion;
    return this;
  }

   /**
   * Custom question notification icon.&lt;br /&gt;  Used to specify a custom icon within questions notification boxes.
   * @return customNotificationIconQuestion
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Custom question notification icon.<br />  Used to specify a custom icon within questions notification boxes.")

  public String getCustomNotificationIconQuestion() {
    return customNotificationIconQuestion;
  }


  public void setCustomNotificationIconQuestion(String customNotificationIconQuestion) {
    this.customNotificationIconQuestion = customNotificationIconQuestion;
  }


  public DocuViewareControlState customNotificationIconWarning(String customNotificationIconWarning) {
    
    this.customNotificationIconWarning = customNotificationIconWarning;
    return this;
  }

   /**
   * Custom warning notification icon.&lt;br /&gt;  Used to specify a custom icon within warnings notification boxes.
   * @return customNotificationIconWarning
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Custom warning notification icon.<br />  Used to specify a custom icon within warnings notification boxes.")

  public String getCustomNotificationIconWarning() {
    return customNotificationIconWarning;
  }


  public void setCustomNotificationIconWarning(String customNotificationIconWarning) {
    this.customNotificationIconWarning = customNotificationIconWarning;
  }


  public DocuViewareControlState customNotificationIconInfo(String customNotificationIconInfo) {
    
    this.customNotificationIconInfo = customNotificationIconInfo;
    return this;
  }

   /**
   * Custom info notification icon.&lt;br /&gt;  Used to specify a custom icon within information notification boxes.
   * @return customNotificationIconInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Custom info notification icon.<br />  Used to specify a custom icon within information notification boxes.")

  public String getCustomNotificationIconInfo() {
    return customNotificationIconInfo;
  }


  public void setCustomNotificationIconInfo(String customNotificationIconInfo) {
    this.customNotificationIconInfo = customNotificationIconInfo;
  }


  public DocuViewareControlState customNotificationIconOk(String customNotificationIconOk) {
    
    this.customNotificationIconOk = customNotificationIconOk;
    return this;
  }

   /**
   * Custom success notification icon.&lt;br /&gt;  Used to specify a custom icon within success notification boxes.
   * @return customNotificationIconOk
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Custom success notification icon.<br />  Used to specify a custom icon within success notification boxes.")

  public String getCustomNotificationIconOk() {
    return customNotificationIconOk;
  }


  public void setCustomNotificationIconOk(String customNotificationIconOk) {
    this.customNotificationIconOk = customNotificationIconOk;
  }


  public DocuViewareControlState allowedExportFormats(String allowedExportFormats) {
    
    this.allowedExportFormats = allowedExportFormats;
    return this;
  }

   /**
   * Specifies extensions of the allowed formats for export. Each extension must be separated by a coma.&lt;br /&gt;  Wildcard character &#39;*&#39; can be used to specify any supported format.&lt;br /&gt;  The following extensions are currently supported: \&quot;PDF\&quot;, \&quot;TIFF\&quot;.&lt;br /&gt;  For example use \&quot;*\&quot; to allow all supported format for export, \&quot;PDF\&quot; to allow only PDF export and \&quot;PDF,TIFF\&quot; to allow PDF and TIFF export.
   * @return allowedExportFormats
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies extensions of the allowed formats for export. Each extension must be separated by a coma.<br />  Wildcard character '*' can be used to specify any supported format.<br />  The following extensions are currently supported: \"PDF\", \"TIFF\".<br />  For example use \"*\" to allow all supported format for export, \"PDF\" to allow only PDF export and \"PDF,TIFF\" to allow PDF and TIFF export.")

  public String getAllowedExportFormats() {
    return allowedExportFormats;
  }


  public void setAllowedExportFormats(String allowedExportFormats) {
    this.allowedExportFormats = allowedExportFormats;
  }


  public DocuViewareControlState disableAnnotationDrawingModePanel(Boolean disableAnnotationDrawingModePanel) {
    
    this.disableAnnotationDrawingModePanel = disableAnnotationDrawingModePanel;
    return this;
  }

   /**
   * Specifies whether the drawing mode panel shall be enabled while user is drawing a free hand annotation.&lt;br /&gt;  This property is only effective if EnableGdPictureAnnotations is set to true.
   * @return disableAnnotationDrawingModePanel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the drawing mode panel shall be enabled while user is drawing a free hand annotation.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.")

  public Boolean getDisableAnnotationDrawingModePanel() {
    return disableAnnotationDrawingModePanel;
  }


  public void setDisableAnnotationDrawingModePanel(Boolean disableAnnotationDrawingModePanel) {
    this.disableAnnotationDrawingModePanel = disableAnnotationDrawingModePanel;
  }


  public DocuViewareControlState imageQuality(Integer imageQuality) {
    
    this.imageQuality = imageQuality;
    return this;
  }

   /**
   * Get imageQuality
   * @return imageQuality
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getImageQuality() {
    return imageQuality;
  }


  public void setImageQuality(Integer imageQuality) {
    this.imageQuality = imageQuality;
  }


  public DocuViewareControlState printQuality(PrintQuality printQuality) {
    
    this.printQuality = printQuality;
    return this;
  }

   /**
   * Get printQuality
   * @return printQuality
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PrintQuality getPrintQuality() {
    return printQuality;
  }


  public void setPrintQuality(PrintQuality printQuality) {
    this.printQuality = printQuality;
  }


  public DocuViewareControlState enableDocumentsDrop(Boolean enableDocumentsDrop) {
    
    this.enableDocumentsDrop = enableDocumentsDrop;
    return this;
  }

   /**
   * Specifies whether documents drag &amp; drop is allowed into the viewer area.
   * @return enableDocumentsDrop
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether documents drag & drop is allowed into the viewer area.")

  public Boolean getEnableDocumentsDrop() {
    return enableDocumentsDrop;
  }


  public void setEnableDocumentsDrop(Boolean enableDocumentsDrop) {
    this.enableDocumentsDrop = enableDocumentsDrop;
  }


  public DocuViewareControlState ajaxCustomHeaders(String ajaxCustomHeaders) {
    
    this.ajaxCustomHeaders = ajaxCustomHeaders;
    return this;
  }

   /**
   * Specifies custom headers for the generated AJAX requests.  Value must be a (properly escaped) JSON-formatted string. Default value is null.
   * @return ajaxCustomHeaders
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies custom headers for the generated AJAX requests.  Value must be a (properly escaped) JSON-formatted string. Default value is null.")

  public String getAjaxCustomHeaders() {
    return ajaxCustomHeaders;
  }


  public void setAjaxCustomHeaders(String ajaxCustomHeaders) {
    this.ajaxCustomHeaders = ajaxCustomHeaders;
  }


  public DocuViewareControlState fileDownloadCustomHeaders(String fileDownloadCustomHeaders) {
    
    this.fileDownloadCustomHeaders = fileDownloadCustomHeaders;
    return this;
  }

   /**
   * Specifies custom headers to be used for the file download JavaScript API requests (for instance LoadFromUri and LoadFromUriEx). Headers that are set through this property won&#39;t be exposed client-side.  Value must be a (properly escaped) JSON-formatted string. Default value is null.
   * @return fileDownloadCustomHeaders
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies custom headers to be used for the file download JavaScript API requests (for instance LoadFromUri and LoadFromUriEx). Headers that are set through this property won't be exposed client-side.  Value must be a (properly escaped) JSON-formatted string. Default value is null.")

  public String getFileDownloadCustomHeaders() {
    return fileDownloadCustomHeaders;
  }


  public void setFileDownloadCustomHeaders(String fileDownloadCustomHeaders) {
    this.fileDownloadCustomHeaders = fileDownloadCustomHeaders;
  }


  public DocuViewareControlState textSearchMaxResults(Integer textSearchMaxResults) {
    
    this.textSearchMaxResults = textSearchMaxResults;
    return this;
  }

   /**
   * Specifies the maximum number of results provided by a text search request.
   * @return textSearchMaxResults
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the maximum number of results provided by a text search request.")

  public Integer getTextSearchMaxResults() {
    return textSearchMaxResults;
  }


  public void setTextSearchMaxResults(Integer textSearchMaxResults) {
    this.textSearchMaxResults = textSearchMaxResults;
  }


  public DocuViewareControlState maxUploadSize(Integer maxUploadSize) {
    
    this.maxUploadSize = maxUploadSize;
    return this;
  }

   /**
   * Specifies, in bytes, the upload size limit.
   * @return maxUploadSize
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies, in bytes, the upload size limit.")

  public Integer getMaxUploadSize() {
    return maxUploadSize;
  }


  public void setMaxUploadSize(Integer maxUploadSize) {
    this.maxUploadSize = maxUploadSize;
  }


  public DocuViewareControlState maxDownloadSize(Integer maxDownloadSize) {
    
    this.maxDownloadSize = maxDownloadSize;
    return this;
  }

   /**
   * Specifies, in bytes, the download size limit.
   * @return maxDownloadSize
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies, in bytes, the download size limit.")

  public Integer getMaxDownloadSize() {
    return maxDownloadSize;
  }


  public void setMaxDownloadSize(Integer maxDownloadSize) {
    this.maxDownloadSize = maxDownloadSize;
  }


  public DocuViewareControlState maxPages(Integer maxPages) {
    
    this.maxPages = maxPages;
    return this;
  }

   /**
   * Specifies the maximum of pages per loaded document.
   * @return maxPages
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the maximum of pages per loaded document.")

  public Integer getMaxPages() {
    return maxPages;
  }


  public void setMaxPages(Integer maxPages) {
    this.maxPages = maxPages;
  }


  public DocuViewareControlState certificates(List<DocuViewareCertificate> certificates) {
    
    this.certificates = certificates;
    return this;
  }

  public DocuViewareControlState addCertificatesItem(DocuViewareCertificate certificatesItem) {
    if (this.certificates == null) {
      this.certificates = new ArrayList<DocuViewareCertificate>();
    }
    this.certificates.add(certificatesItem);
    return this;
  }

   /**
   * Specifies a list of certificates to be made available on the client side to apply digital signature to documents.
   * @return certificates
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies a list of certificates to be made available on the client side to apply digital signature to documents.")

  public List<DocuViewareCertificate> getCertificates() {
    return certificates;
  }


  public void setCertificates(List<DocuViewareCertificate> certificates) {
    this.certificates = certificates;
  }


  public DocuViewareControlState extraFeatures(String extraFeatures) {
    
    this.extraFeatures = extraFeatures;
    return this;
  }

   /**
   * A formatted string specifying undocumented extra features to handle.
   * @return extraFeatures
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A formatted string specifying undocumented extra features to handle.")

  public String getExtraFeatures() {
    return extraFeatures;
  }


  public void setExtraFeatures(String extraFeatures) {
    this.extraFeatures = extraFeatures;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocuViewareControlState docuViewareControlState = (DocuViewareControlState) o;
    return Objects.equals(this.timeout, docuViewareControlState.timeout) &&
        Objects.equals(this.controlID, docuViewareControlState.controlID) &&
        Objects.equals(this.showLogo, docuViewareControlState.showLogo) &&
        Objects.equals(this.remoteIP, docuViewareControlState.remoteIP) &&
        Objects.equals(this.fileHostingURI, docuViewareControlState.fileHostingURI) &&
        Objects.equals(this.documentURI, docuViewareControlState.documentURI) &&
        Objects.equals(this.documentFileName, docuViewareControlState.documentFileName) &&
        Objects.equals(this.disableDownloadProgress, docuViewareControlState.disableDownloadProgress) &&
        Objects.equals(this.documentAlignment, docuViewareControlState.documentAlignment) &&
        Objects.equals(this.documentPosition, docuViewareControlState.documentPosition) &&
        Objects.equals(this.enableGdPictureAnnotations, docuViewareControlState.enableGdPictureAnnotations) &&
        Objects.equals(this.disableAnnotationPrinting, docuViewareControlState.disableAnnotationPrinting) &&
        Objects.equals(this.enableFormFieldsEdition, docuViewareControlState.enableFormFieldsEdition) &&
        Objects.equals(this.annotationEditorMode, docuViewareControlState.annotationEditorMode) &&
        Objects.equals(this.linkAnnotationClickBehaviour, docuViewareControlState.linkAnnotationClickBehaviour) &&
        Objects.equals(this.zoom, docuViewareControlState.zoom) &&
        Objects.equals(this.zoomMode, docuViewareControlState.zoomMode) &&
        Objects.equals(this.openZoomMode, docuViewareControlState.openZoomMode) &&
        Objects.equals(this.viewRotation, docuViewareControlState.viewRotation) &&
        Objects.equals(this.pageRotation, docuViewareControlState.pageRotation) &&
        Objects.equals(this.zoomStep, docuViewareControlState.zoomStep) &&
        Objects.equals(this.scrollBars, docuViewareControlState.scrollBars) &&
        Objects.equals(this.forceScrollBars, docuViewareControlState.forceScrollBars) &&
        Objects.equals(this.pageViewMode, docuViewareControlState.pageViewMode) &&
        Objects.equals(this.enableTextSelection, docuViewareControlState.enableTextSelection) &&
        Objects.equals(this.enableTextSelectionAnnotation, docuViewareControlState.enableTextSelectionAnnotation) &&
        Objects.equals(this.locale, docuViewareControlState.locale) &&
        Objects.equals(this.userLanguages, docuViewareControlState.userLanguages) &&
        Objects.equals(this.controlWidth, docuViewareControlState.controlWidth) &&
        Objects.equals(this.controlHeight, docuViewareControlState.controlHeight) &&
        Objects.equals(this.annotationDropShadow, docuViewareControlState.annotationDropShadow) &&
        Objects.equals(this.allowPrint, docuViewareControlState.allowPrint) &&
        Objects.equals(this.allowUpload, docuViewareControlState.allowUpload) &&
        Objects.equals(this.enableMultipleThumbnailSelection, docuViewareControlState.enableMultipleThumbnailSelection) &&
        Objects.equals(this.enableThumbnailDragDrop, docuViewareControlState.enableThumbnailDragDrop) &&
        Objects.equals(this.enableFileUploadButton, docuViewareControlState.enableFileUploadButton) &&
        Objects.equals(this.enableLoadFromUriButton, docuViewareControlState.enableLoadFromUriButton) &&
        Objects.equals(this.enableSaveButton, docuViewareControlState.enableSaveButton) &&
        Objects.equals(this.enablePagesNavigationButtons, docuViewareControlState.enablePagesNavigationButtons) &&
        Objects.equals(this.enablePrintButton, docuViewareControlState.enablePrintButton) &&
        Objects.equals(this.enablePrintToPDF, docuViewareControlState.enablePrintToPDF) &&
        Objects.equals(this.enableFitWidthButton, docuViewareControlState.enableFitWidthButton) &&
        Objects.equals(this.enableZoom100Button, docuViewareControlState.enableZoom100Button) &&
        Objects.equals(this.enableMouseModeButtons, docuViewareControlState.enableMouseModeButtons) &&
        Objects.equals(this.enablePanModeButton, docuViewareControlState.enablePanModeButton) &&
        Objects.equals(this.enableSelectModeButton, docuViewareControlState.enableSelectModeButton) &&
        Objects.equals(this.enableMarqueeZoomModeButton, docuViewareControlState.enableMarqueeZoomModeButton) &&
        Objects.equals(this.enableFullScreenButton, docuViewareControlState.enableFullScreenButton) &&
        Objects.equals(this.enableFitPageButton, docuViewareControlState.enableFitPageButton) &&
        Objects.equals(this.enableZoomButtons, docuViewareControlState.enableZoomButtons) &&
        Objects.equals(this.enablePageViewButtons, docuViewareControlState.enablePageViewButtons) &&
        Objects.equals(this.rotateButtonsMode, docuViewareControlState.rotateButtonsMode) &&
        Objects.equals(this.enableRotateButtons, docuViewareControlState.enableRotateButtons) &&
        Objects.equals(this.enableAnnotationActionButtons, docuViewareControlState.enableAnnotationActionButtons) &&
        Objects.equals(this.enableSelectedTextAnnotationEdition, docuViewareControlState.enableSelectedTextAnnotationEdition) &&
        Objects.equals(this.enableRectangleHighlighterAnnotationButton, docuViewareControlState.enableRectangleHighlighterAnnotationButton) &&
        Objects.equals(this.enableFreehandHighlighterAnnotationButton, docuViewareControlState.enableFreehandHighlighterAnnotationButton) &&
        Objects.equals(this.enableRubberStampAnnotationButton, docuViewareControlState.enableRubberStampAnnotationButton) &&
        Objects.equals(this.enableRectangleAnnotationButton, docuViewareControlState.enableRectangleAnnotationButton) &&
        Objects.equals(this.enableEllipseAnnotationButton, docuViewareControlState.enableEllipseAnnotationButton) &&
        Objects.equals(this.enableLineAnnotationButton, docuViewareControlState.enableLineAnnotationButton) &&
        Objects.equals(this.enableConnectedLineAnnotationButton, docuViewareControlState.enableConnectedLineAnnotationButton) &&
        Objects.equals(this.enableFreehandAnnotationButton, docuViewareControlState.enableFreehandAnnotationButton) &&
        Objects.equals(this.enableLineArrowAnnotationButton, docuViewareControlState.enableLineArrowAnnotationButton) &&
        Objects.equals(this.enableLinkAnnotationButton, docuViewareControlState.enableLinkAnnotationButton) &&
        Objects.equals(this.enableRulerAnnotationButton, docuViewareControlState.enableRulerAnnotationButton) &&
        Objects.equals(this.enablePolyRulerAnnotationButton, docuViewareControlState.enablePolyRulerAnnotationButton) &&
        Objects.equals(this.enableTextAnnotationButton, docuViewareControlState.enableTextAnnotationButton) &&
        Objects.equals(this.enableStickyNoteAnnotationButton, docuViewareControlState.enableStickyNoteAnnotationButton) &&
        Objects.equals(this.enableTwainAcquisitionButton, docuViewareControlState.enableTwainAcquisitionButton) &&
        Objects.equals(this.twainSourceEnableCustomConfiguration, docuViewareControlState.twainSourceEnableCustomConfiguration) &&
        Objects.equals(this.twainSourceSelectFeeder, docuViewareControlState.twainSourceSelectFeeder) &&
        Objects.equals(this.twainSourceBitDepth, docuViewareControlState.twainSourceBitDepth) &&
        Objects.equals(this.twainSourceResolution, docuViewareControlState.twainSourceResolution) &&
        Objects.equals(this.twainSourceEnableDuplex, docuViewareControlState.twainSourceEnableDuplex) &&
        Objects.equals(this.twainSourceHideUI, docuViewareControlState.twainSourceHideUI) &&
        Objects.equals(this.freeHandContinuousDrawingMode, docuViewareControlState.freeHandContinuousDrawingMode) &&
        Objects.equals(this.showTextSearchSnapIn, docuViewareControlState.showTextSearchSnapIn) &&
        Objects.equals(this.showThumbnailsSnapIn, docuViewareControlState.showThumbnailsSnapIn) &&
        Objects.equals(this.showBookmarksSnapIn, docuViewareControlState.showBookmarksSnapIn) &&
        Objects.equals(this.showAnnotationsSnapIn, docuViewareControlState.showAnnotationsSnapIn) &&
        Objects.equals(this.showAnnotationsCommentsSnapIn, docuViewareControlState.showAnnotationsCommentsSnapIn) &&
        Objects.equals(this.showRedactionSnapIn, docuViewareControlState.showRedactionSnapIn) &&
        Objects.equals(this.showDigitalSignatureSnapIn, docuViewareControlState.showDigitalSignatureSnapIn) &&
        Objects.equals(this.thumbnailWidth, docuViewareControlState.thumbnailWidth) &&
        Objects.equals(this.thumbnailHeight, docuViewareControlState.thumbnailHeight) &&
        Objects.equals(this.snapInPanelDefaultWidth, docuViewareControlState.snapInPanelDefaultWidth) &&
        Objects.equals(this.collapsedSnapIn, docuViewareControlState.collapsedSnapIn) &&
        Objects.equals(this.collapseSnapinOnDocumentClosed, docuViewareControlState.collapseSnapinOnDocumentClosed) &&
        Objects.equals(this.showSnapInCollapseButton, docuViewareControlState.showSnapInCollapseButton) &&
        Objects.equals(this.showSnapInPanelHeader, docuViewareControlState.showSnapInPanelHeader) &&
        Objects.equals(this.showSnapInButtonStrip, docuViewareControlState.showSnapInButtonStrip) &&
        Objects.equals(this.showToolbar, docuViewareControlState.showToolbar) &&
        Objects.equals(this.toolbarStyle, docuViewareControlState.toolbarStyle) &&
        Objects.equals(this.toolbarButtonsSpacing, docuViewareControlState.toolbarButtonsSpacing) &&
        Objects.equals(this.toolbarHeight, docuViewareControlState.toolbarHeight) &&
        Objects.equals(this.strokeColor, docuViewareControlState.strokeColor) &&
        Objects.equals(this.miscBorderColor, docuViewareControlState.miscBorderColor) &&
        Objects.equals(this.headerColor, docuViewareControlState.headerColor) &&
        Objects.equals(this.panelBackColor, docuViewareControlState.panelBackColor) &&
        Objects.equals(this.viewerBackColor, docuViewareControlState.viewerBackColor) &&
        Objects.equals(this.activeSelectedColor, docuViewareControlState.activeSelectedColor) &&
        Objects.equals(this.toolbarBackColor, docuViewareControlState.toolbarBackColor) &&
        Objects.equals(this.customNotificationIconError, docuViewareControlState.customNotificationIconError) &&
        Objects.equals(this.customNotificationIconQuestion, docuViewareControlState.customNotificationIconQuestion) &&
        Objects.equals(this.customNotificationIconWarning, docuViewareControlState.customNotificationIconWarning) &&
        Objects.equals(this.customNotificationIconInfo, docuViewareControlState.customNotificationIconInfo) &&
        Objects.equals(this.customNotificationIconOk, docuViewareControlState.customNotificationIconOk) &&
        Objects.equals(this.allowedExportFormats, docuViewareControlState.allowedExportFormats) &&
        Objects.equals(this.disableAnnotationDrawingModePanel, docuViewareControlState.disableAnnotationDrawingModePanel) &&
        Objects.equals(this.imageQuality, docuViewareControlState.imageQuality) &&
        Objects.equals(this.printQuality, docuViewareControlState.printQuality) &&
        Objects.equals(this.enableDocumentsDrop, docuViewareControlState.enableDocumentsDrop) &&
        Objects.equals(this.ajaxCustomHeaders, docuViewareControlState.ajaxCustomHeaders) &&
        Objects.equals(this.fileDownloadCustomHeaders, docuViewareControlState.fileDownloadCustomHeaders) &&
        Objects.equals(this.textSearchMaxResults, docuViewareControlState.textSearchMaxResults) &&
        Objects.equals(this.maxUploadSize, docuViewareControlState.maxUploadSize) &&
        Objects.equals(this.maxDownloadSize, docuViewareControlState.maxDownloadSize) &&
        Objects.equals(this.maxPages, docuViewareControlState.maxPages) &&
        Objects.equals(this.certificates, docuViewareControlState.certificates) &&
        Objects.equals(this.extraFeatures, docuViewareControlState.extraFeatures);
  }

  @Override
  public int hashCode() {
    return Objects.hash(timeout, controlID, showLogo, remoteIP, fileHostingURI, documentURI, documentFileName, disableDownloadProgress, documentAlignment, documentPosition, enableGdPictureAnnotations, disableAnnotationPrinting, enableFormFieldsEdition, annotationEditorMode, linkAnnotationClickBehaviour, zoom, zoomMode, openZoomMode, viewRotation, pageRotation, zoomStep, scrollBars, forceScrollBars, pageViewMode, enableTextSelection, enableTextSelectionAnnotation, locale, userLanguages, controlWidth, controlHeight, annotationDropShadow, allowPrint, allowUpload, enableMultipleThumbnailSelection, enableThumbnailDragDrop, enableFileUploadButton, enableLoadFromUriButton, enableSaveButton, enablePagesNavigationButtons, enablePrintButton, enablePrintToPDF, enableFitWidthButton, enableZoom100Button, enableMouseModeButtons, enablePanModeButton, enableSelectModeButton, enableMarqueeZoomModeButton, enableFullScreenButton, enableFitPageButton, enableZoomButtons, enablePageViewButtons, rotateButtonsMode, enableRotateButtons, enableAnnotationActionButtons, enableSelectedTextAnnotationEdition, enableRectangleHighlighterAnnotationButton, enableFreehandHighlighterAnnotationButton, enableRubberStampAnnotationButton, enableRectangleAnnotationButton, enableEllipseAnnotationButton, enableLineAnnotationButton, enableConnectedLineAnnotationButton, enableFreehandAnnotationButton, enableLineArrowAnnotationButton, enableLinkAnnotationButton, enableRulerAnnotationButton, enablePolyRulerAnnotationButton, enableTextAnnotationButton, enableStickyNoteAnnotationButton, enableTwainAcquisitionButton, twainSourceEnableCustomConfiguration, twainSourceSelectFeeder, twainSourceBitDepth, twainSourceResolution, twainSourceEnableDuplex, twainSourceHideUI, freeHandContinuousDrawingMode, showTextSearchSnapIn, showThumbnailsSnapIn, showBookmarksSnapIn, showAnnotationsSnapIn, showAnnotationsCommentsSnapIn, showRedactionSnapIn, showDigitalSignatureSnapIn, thumbnailWidth, thumbnailHeight, snapInPanelDefaultWidth, collapsedSnapIn, collapseSnapinOnDocumentClosed, showSnapInCollapseButton, showSnapInPanelHeader, showSnapInButtonStrip, showToolbar, toolbarStyle, toolbarButtonsSpacing, toolbarHeight, strokeColor, miscBorderColor, headerColor, panelBackColor, viewerBackColor, activeSelectedColor, toolbarBackColor, customNotificationIconError, customNotificationIconQuestion, customNotificationIconWarning, customNotificationIconInfo, customNotificationIconOk, allowedExportFormats, disableAnnotationDrawingModePanel, imageQuality, printQuality, enableDocumentsDrop, ajaxCustomHeaders, fileDownloadCustomHeaders, textSearchMaxResults, maxUploadSize, maxDownloadSize, maxPages, certificates, extraFeatures);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocuViewareControlState {\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("    controlID: ").append(toIndentedString(controlID)).append("\n");
    sb.append("    showLogo: ").append(toIndentedString(showLogo)).append("\n");
    sb.append("    remoteIP: ").append(toIndentedString(remoteIP)).append("\n");
    sb.append("    fileHostingURI: ").append(toIndentedString(fileHostingURI)).append("\n");
    sb.append("    documentURI: ").append(toIndentedString(documentURI)).append("\n");
    sb.append("    documentFileName: ").append(toIndentedString(documentFileName)).append("\n");
    sb.append("    disableDownloadProgress: ").append(toIndentedString(disableDownloadProgress)).append("\n");
    sb.append("    documentAlignment: ").append(toIndentedString(documentAlignment)).append("\n");
    sb.append("    documentPosition: ").append(toIndentedString(documentPosition)).append("\n");
    sb.append("    enableGdPictureAnnotations: ").append(toIndentedString(enableGdPictureAnnotations)).append("\n");
    sb.append("    disableAnnotationPrinting: ").append(toIndentedString(disableAnnotationPrinting)).append("\n");
    sb.append("    enableFormFieldsEdition: ").append(toIndentedString(enableFormFieldsEdition)).append("\n");
    sb.append("    annotationEditorMode: ").append(toIndentedString(annotationEditorMode)).append("\n");
    sb.append("    linkAnnotationClickBehaviour: ").append(toIndentedString(linkAnnotationClickBehaviour)).append("\n");
    sb.append("    zoom: ").append(toIndentedString(zoom)).append("\n");
    sb.append("    zoomMode: ").append(toIndentedString(zoomMode)).append("\n");
    sb.append("    openZoomMode: ").append(toIndentedString(openZoomMode)).append("\n");
    sb.append("    viewRotation: ").append(toIndentedString(viewRotation)).append("\n");
    sb.append("    pageRotation: ").append(toIndentedString(pageRotation)).append("\n");
    sb.append("    zoomStep: ").append(toIndentedString(zoomStep)).append("\n");
    sb.append("    scrollBars: ").append(toIndentedString(scrollBars)).append("\n");
    sb.append("    forceScrollBars: ").append(toIndentedString(forceScrollBars)).append("\n");
    sb.append("    pageViewMode: ").append(toIndentedString(pageViewMode)).append("\n");
    sb.append("    enableTextSelection: ").append(toIndentedString(enableTextSelection)).append("\n");
    sb.append("    enableTextSelectionAnnotation: ").append(toIndentedString(enableTextSelectionAnnotation)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    userLanguages: ").append(toIndentedString(userLanguages)).append("\n");
    sb.append("    controlWidth: ").append(toIndentedString(controlWidth)).append("\n");
    sb.append("    controlHeight: ").append(toIndentedString(controlHeight)).append("\n");
    sb.append("    annotationDropShadow: ").append(toIndentedString(annotationDropShadow)).append("\n");
    sb.append("    allowPrint: ").append(toIndentedString(allowPrint)).append("\n");
    sb.append("    allowUpload: ").append(toIndentedString(allowUpload)).append("\n");
    sb.append("    enableMultipleThumbnailSelection: ").append(toIndentedString(enableMultipleThumbnailSelection)).append("\n");
    sb.append("    enableThumbnailDragDrop: ").append(toIndentedString(enableThumbnailDragDrop)).append("\n");
    sb.append("    enableFileUploadButton: ").append(toIndentedString(enableFileUploadButton)).append("\n");
    sb.append("    enableLoadFromUriButton: ").append(toIndentedString(enableLoadFromUriButton)).append("\n");
    sb.append("    enableSaveButton: ").append(toIndentedString(enableSaveButton)).append("\n");
    sb.append("    enablePagesNavigationButtons: ").append(toIndentedString(enablePagesNavigationButtons)).append("\n");
    sb.append("    enablePrintButton: ").append(toIndentedString(enablePrintButton)).append("\n");
    sb.append("    enablePrintToPDF: ").append(toIndentedString(enablePrintToPDF)).append("\n");
    sb.append("    enableFitWidthButton: ").append(toIndentedString(enableFitWidthButton)).append("\n");
    sb.append("    enableZoom100Button: ").append(toIndentedString(enableZoom100Button)).append("\n");
    sb.append("    enableMouseModeButtons: ").append(toIndentedString(enableMouseModeButtons)).append("\n");
    sb.append("    enablePanModeButton: ").append(toIndentedString(enablePanModeButton)).append("\n");
    sb.append("    enableSelectModeButton: ").append(toIndentedString(enableSelectModeButton)).append("\n");
    sb.append("    enableMarqueeZoomModeButton: ").append(toIndentedString(enableMarqueeZoomModeButton)).append("\n");
    sb.append("    enableFullScreenButton: ").append(toIndentedString(enableFullScreenButton)).append("\n");
    sb.append("    enableFitPageButton: ").append(toIndentedString(enableFitPageButton)).append("\n");
    sb.append("    enableZoomButtons: ").append(toIndentedString(enableZoomButtons)).append("\n");
    sb.append("    enablePageViewButtons: ").append(toIndentedString(enablePageViewButtons)).append("\n");
    sb.append("    rotateButtonsMode: ").append(toIndentedString(rotateButtonsMode)).append("\n");
    sb.append("    enableRotateButtons: ").append(toIndentedString(enableRotateButtons)).append("\n");
    sb.append("    enableAnnotationActionButtons: ").append(toIndentedString(enableAnnotationActionButtons)).append("\n");
    sb.append("    enableSelectedTextAnnotationEdition: ").append(toIndentedString(enableSelectedTextAnnotationEdition)).append("\n");
    sb.append("    enableRectangleHighlighterAnnotationButton: ").append(toIndentedString(enableRectangleHighlighterAnnotationButton)).append("\n");
    sb.append("    enableFreehandHighlighterAnnotationButton: ").append(toIndentedString(enableFreehandHighlighterAnnotationButton)).append("\n");
    sb.append("    enableRubberStampAnnotationButton: ").append(toIndentedString(enableRubberStampAnnotationButton)).append("\n");
    sb.append("    enableRectangleAnnotationButton: ").append(toIndentedString(enableRectangleAnnotationButton)).append("\n");
    sb.append("    enableEllipseAnnotationButton: ").append(toIndentedString(enableEllipseAnnotationButton)).append("\n");
    sb.append("    enableLineAnnotationButton: ").append(toIndentedString(enableLineAnnotationButton)).append("\n");
    sb.append("    enableConnectedLineAnnotationButton: ").append(toIndentedString(enableConnectedLineAnnotationButton)).append("\n");
    sb.append("    enableFreehandAnnotationButton: ").append(toIndentedString(enableFreehandAnnotationButton)).append("\n");
    sb.append("    enableLineArrowAnnotationButton: ").append(toIndentedString(enableLineArrowAnnotationButton)).append("\n");
    sb.append("    enableLinkAnnotationButton: ").append(toIndentedString(enableLinkAnnotationButton)).append("\n");
    sb.append("    enableRulerAnnotationButton: ").append(toIndentedString(enableRulerAnnotationButton)).append("\n");
    sb.append("    enablePolyRulerAnnotationButton: ").append(toIndentedString(enablePolyRulerAnnotationButton)).append("\n");
    sb.append("    enableTextAnnotationButton: ").append(toIndentedString(enableTextAnnotationButton)).append("\n");
    sb.append("    enableStickyNoteAnnotationButton: ").append(toIndentedString(enableStickyNoteAnnotationButton)).append("\n");
    sb.append("    enableTwainAcquisitionButton: ").append(toIndentedString(enableTwainAcquisitionButton)).append("\n");
    sb.append("    twainSourceEnableCustomConfiguration: ").append(toIndentedString(twainSourceEnableCustomConfiguration)).append("\n");
    sb.append("    twainSourceSelectFeeder: ").append(toIndentedString(twainSourceSelectFeeder)).append("\n");
    sb.append("    twainSourceBitDepth: ").append(toIndentedString(twainSourceBitDepth)).append("\n");
    sb.append("    twainSourceResolution: ").append(toIndentedString(twainSourceResolution)).append("\n");
    sb.append("    twainSourceEnableDuplex: ").append(toIndentedString(twainSourceEnableDuplex)).append("\n");
    sb.append("    twainSourceHideUI: ").append(toIndentedString(twainSourceHideUI)).append("\n");
    sb.append("    freeHandContinuousDrawingMode: ").append(toIndentedString(freeHandContinuousDrawingMode)).append("\n");
    sb.append("    showTextSearchSnapIn: ").append(toIndentedString(showTextSearchSnapIn)).append("\n");
    sb.append("    showThumbnailsSnapIn: ").append(toIndentedString(showThumbnailsSnapIn)).append("\n");
    sb.append("    showBookmarksSnapIn: ").append(toIndentedString(showBookmarksSnapIn)).append("\n");
    sb.append("    showAnnotationsSnapIn: ").append(toIndentedString(showAnnotationsSnapIn)).append("\n");
    sb.append("    showAnnotationsCommentsSnapIn: ").append(toIndentedString(showAnnotationsCommentsSnapIn)).append("\n");
    sb.append("    showRedactionSnapIn: ").append(toIndentedString(showRedactionSnapIn)).append("\n");
    sb.append("    showDigitalSignatureSnapIn: ").append(toIndentedString(showDigitalSignatureSnapIn)).append("\n");
    sb.append("    thumbnailWidth: ").append(toIndentedString(thumbnailWidth)).append("\n");
    sb.append("    thumbnailHeight: ").append(toIndentedString(thumbnailHeight)).append("\n");
    sb.append("    snapInPanelDefaultWidth: ").append(toIndentedString(snapInPanelDefaultWidth)).append("\n");
    sb.append("    collapsedSnapIn: ").append(toIndentedString(collapsedSnapIn)).append("\n");
    sb.append("    collapseSnapinOnDocumentClosed: ").append(toIndentedString(collapseSnapinOnDocumentClosed)).append("\n");
    sb.append("    showSnapInCollapseButton: ").append(toIndentedString(showSnapInCollapseButton)).append("\n");
    sb.append("    showSnapInPanelHeader: ").append(toIndentedString(showSnapInPanelHeader)).append("\n");
    sb.append("    showSnapInButtonStrip: ").append(toIndentedString(showSnapInButtonStrip)).append("\n");
    sb.append("    showToolbar: ").append(toIndentedString(showToolbar)).append("\n");
    sb.append("    toolbarStyle: ").append(toIndentedString(toolbarStyle)).append("\n");
    sb.append("    toolbarButtonsSpacing: ").append(toIndentedString(toolbarButtonsSpacing)).append("\n");
    sb.append("    toolbarHeight: ").append(toIndentedString(toolbarHeight)).append("\n");
    sb.append("    strokeColor: ").append(toIndentedString(strokeColor)).append("\n");
    sb.append("    miscBorderColor: ").append(toIndentedString(miscBorderColor)).append("\n");
    sb.append("    headerColor: ").append(toIndentedString(headerColor)).append("\n");
    sb.append("    panelBackColor: ").append(toIndentedString(panelBackColor)).append("\n");
    sb.append("    viewerBackColor: ").append(toIndentedString(viewerBackColor)).append("\n");
    sb.append("    activeSelectedColor: ").append(toIndentedString(activeSelectedColor)).append("\n");
    sb.append("    toolbarBackColor: ").append(toIndentedString(toolbarBackColor)).append("\n");
    sb.append("    customNotificationIconError: ").append(toIndentedString(customNotificationIconError)).append("\n");
    sb.append("    customNotificationIconQuestion: ").append(toIndentedString(customNotificationIconQuestion)).append("\n");
    sb.append("    customNotificationIconWarning: ").append(toIndentedString(customNotificationIconWarning)).append("\n");
    sb.append("    customNotificationIconInfo: ").append(toIndentedString(customNotificationIconInfo)).append("\n");
    sb.append("    customNotificationIconOk: ").append(toIndentedString(customNotificationIconOk)).append("\n");
    sb.append("    allowedExportFormats: ").append(toIndentedString(allowedExportFormats)).append("\n");
    sb.append("    disableAnnotationDrawingModePanel: ").append(toIndentedString(disableAnnotationDrawingModePanel)).append("\n");
    sb.append("    imageQuality: ").append(toIndentedString(imageQuality)).append("\n");
    sb.append("    printQuality: ").append(toIndentedString(printQuality)).append("\n");
    sb.append("    enableDocumentsDrop: ").append(toIndentedString(enableDocumentsDrop)).append("\n");
    sb.append("    ajaxCustomHeaders: ").append(toIndentedString(ajaxCustomHeaders)).append("\n");
    sb.append("    fileDownloadCustomHeaders: ").append(toIndentedString(fileDownloadCustomHeaders)).append("\n");
    sb.append("    textSearchMaxResults: ").append(toIndentedString(textSearchMaxResults)).append("\n");
    sb.append("    maxUploadSize: ").append(toIndentedString(maxUploadSize)).append("\n");
    sb.append("    maxDownloadSize: ").append(toIndentedString(maxDownloadSize)).append("\n");
    sb.append("    maxPages: ").append(toIndentedString(maxPages)).append("\n");
    sb.append("    certificates: ").append(toIndentedString(certificates)).append("\n");
    sb.append("    extraFeatures: ").append(toIndentedString(extraFeatures)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


/*
 * PassportPDF API
 * Another brick in the cloud
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.MICRSymbolInfo;

/**
 * Represents the result of a MICR operation run on a document given page.
 */
@ApiModel(description = "Represents the result of a MICR operation run on a document given page.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-04-27T13:23:36.328+02:00[Europe/Paris]")
public class MICRResult {
  public static final String SERIALIZED_NAME_PAGE_NUMBER = "PageNumber";
  @SerializedName(SERIALIZED_NAME_PAGE_NUMBER)
  private Integer pageNumber;

  public static final String SERIALIZED_NAME_DATA = "Data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private String data;

  public static final String SERIALIZED_NAME_DETECTED_SYMBOLS = "DetectedSymbols";
  @SerializedName(SERIALIZED_NAME_DETECTED_SYMBOLS)
  private List<MICRSymbolInfo> detectedSymbols = null;


  public MICRResult pageNumber(Integer pageNumber) {
    
    this.pageNumber = pageNumber;
    return this;
  }

   /**
   * Specifies the number of the page on which the symbols have been detected.
   * @return pageNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the number of the page on which the symbols have been detected.")

  public Integer getPageNumber() {
    return pageNumber;
  }


  public void setPageNumber(Integer pageNumber) {
    this.pageNumber = pageNumber;
  }


  public MICRResult data(String data) {
    
    this.data = data;
    return this;
  }

   /**
   * The detected data.
   * @return data
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The detected data.")

  public String getData() {
    return data;
  }


  public void setData(String data) {
    this.data = data;
  }


  public MICRResult detectedSymbols(List<MICRSymbolInfo> detectedSymbols) {
    
    this.detectedSymbols = detectedSymbols;
    return this;
  }

  public MICRResult addDetectedSymbolsItem(MICRSymbolInfo detectedSymbolsItem) {
    if (this.detectedSymbols == null) {
      this.detectedSymbols = new ArrayList<MICRSymbolInfo>();
    }
    this.detectedSymbols.add(detectedSymbolsItem);
    return this;
  }

   /**
   * Holds detailed information about every single symbol which has been detected.
   * @return detectedSymbols
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Holds detailed information about every single symbol which has been detected.")

  public List<MICRSymbolInfo> getDetectedSymbols() {
    return detectedSymbols;
  }


  public void setDetectedSymbols(List<MICRSymbolInfo> detectedSymbols) {
    this.detectedSymbols = detectedSymbols;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MICRResult miCRResult = (MICRResult) o;
    return Objects.equals(this.pageNumber, miCRResult.pageNumber) &&
        Objects.equals(this.data, miCRResult.data) &&
        Objects.equals(this.detectedSymbols, miCRResult.detectedSymbols);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pageNumber, data, detectedSymbols);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MICRResult {\n");
    sb.append("    pageNumber: ").append(toIndentedString(pageNumber)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    detectedSymbols: ").append(toIndentedString(detectedSymbols)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


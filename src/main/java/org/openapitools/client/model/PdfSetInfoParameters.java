/*
 * PassportPDF API
 * Another brick in the cloud
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Represents the parameters for a set info action.
 */
@ApiModel(description = "Represents the parameters for a set info action.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-04-27T13:23:36.328+02:00[Europe/Paris]")
public class PdfSetInfoParameters {
  public static final String SERIALIZED_NAME_FILE_ID = "FileId";
  @SerializedName(SERIALIZED_NAME_FILE_ID)
  private String fileId;

  public static final String SERIALIZED_NAME_AUTHOR = "Author";
  @SerializedName(SERIALIZED_NAME_AUTHOR)
  private String author = "";

  public static final String SERIALIZED_NAME_TITLE = "Title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title = "";

  public static final String SERIALIZED_NAME_SUBJECT = "Subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject = "";

  public static final String SERIALIZED_NAME_PRODUCER = "Producer";
  @SerializedName(SERIALIZED_NAME_PRODUCER)
  private String producer = "";

  public static final String SERIALIZED_NAME_METADATA = "Metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private String metadata = "";

  public static final String SERIALIZED_NAME_KEYWORDS = "Keywords";
  @SerializedName(SERIALIZED_NAME_KEYWORDS)
  private String keywords = "";

  public static final String SERIALIZED_NAME_CLEAR_EMPTY_VALUES = "ClearEmptyValues";
  @SerializedName(SERIALIZED_NAME_CLEAR_EMPTY_VALUES)
  private Boolean clearEmptyValues = false;


  public PdfSetInfoParameters fileId(String fileId) {
    
    this.fileId = fileId;
    return this;
  }

   /**
   * The identifier of the previously uploaded file to be processed.
   * @return fileId
  **/
  @ApiModelProperty(required = true, value = "The identifier of the previously uploaded file to be processed.")

  public String getFileId() {
    return fileId;
  }


  public void setFileId(String fileId) {
    this.fileId = fileId;
  }


  public PdfSetInfoParameters author(String author) {
    
    this.author = author;
    return this;
  }

   /**
   * Specifies the author name specified within the PDF, if any.
   * @return author
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the author name specified within the PDF, if any.")

  public String getAuthor() {
    return author;
  }


  public void setAuthor(String author) {
    this.author = author;
  }


  public PdfSetInfoParameters title(String title) {
    
    this.title = title;
    return this;
  }

   /**
   * Specifies the document title specified within the PDF, if any.
   * @return title
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the document title specified within the PDF, if any.")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    this.title = title;
  }


  public PdfSetInfoParameters subject(String subject) {
    
    this.subject = subject;
    return this;
  }

   /**
   * Specifies the document subject specified within the PDF, if any.
   * @return subject
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the document subject specified within the PDF, if any.")

  public String getSubject() {
    return subject;
  }


  public void setSubject(String subject) {
    this.subject = subject;
  }


  public PdfSetInfoParameters producer(String producer) {
    
    this.producer = producer;
    return this;
  }

   /**
   * Specifies the producer name specified within the PDF, if any.
   * @return producer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the producer name specified within the PDF, if any.")

  public String getProducer() {
    return producer;
  }


  public void setProducer(String producer) {
    this.producer = producer;
  }


  public PdfSetInfoParameters metadata(String metadata) {
    
    this.metadata = metadata;
    return this;
  }

   /**
   * Specifies the metadata contained within the PDF, if any.
   * @return metadata
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the metadata contained within the PDF, if any.")

  public String getMetadata() {
    return metadata;
  }


  public void setMetadata(String metadata) {
    this.metadata = metadata;
  }


  public PdfSetInfoParameters keywords(String keywords) {
    
    this.keywords = keywords;
    return this;
  }

   /**
   * Specifies the keywords associated with the PDF, if any.
   * @return keywords
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the keywords associated with the PDF, if any.")

  public String getKeywords() {
    return keywords;
  }


  public void setKeywords(String keywords) {
    this.keywords = keywords;
  }


  public PdfSetInfoParameters clearEmptyValues(Boolean clearEmptyValues) {
    
    this.clearEmptyValues = clearEmptyValues;
    return this;
  }

   /**
   * Specifies whether the empty info values shall be cleared.
   * @return clearEmptyValues
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the empty info values shall be cleared.")

  public Boolean getClearEmptyValues() {
    return clearEmptyValues;
  }


  public void setClearEmptyValues(Boolean clearEmptyValues) {
    this.clearEmptyValues = clearEmptyValues;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PdfSetInfoParameters pdfSetInfoParameters = (PdfSetInfoParameters) o;
    return Objects.equals(this.fileId, pdfSetInfoParameters.fileId) &&
        Objects.equals(this.author, pdfSetInfoParameters.author) &&
        Objects.equals(this.title, pdfSetInfoParameters.title) &&
        Objects.equals(this.subject, pdfSetInfoParameters.subject) &&
        Objects.equals(this.producer, pdfSetInfoParameters.producer) &&
        Objects.equals(this.metadata, pdfSetInfoParameters.metadata) &&
        Objects.equals(this.keywords, pdfSetInfoParameters.keywords) &&
        Objects.equals(this.clearEmptyValues, pdfSetInfoParameters.clearEmptyValues);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fileId, author, title, subject, producer, metadata, keywords, clearEmptyValues);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PdfSetInfoParameters {\n");
    sb.append("    fileId: ").append(toIndentedString(fileId)).append("\n");
    sb.append("    author: ").append(toIndentedString(author)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    producer: ").append(toIndentedString(producer)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    keywords: ").append(toIndentedString(keywords)).append("\n");
    sb.append("    clearEmptyValues: ").append(toIndentedString(clearEmptyValues)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


/*
 * PassportPDF API
 * Another brick in the cloud
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.PdfAConformance;

/**
 * Represents the parameters for a convert to PDF/A action.
 */
@ApiModel(description = "Represents the parameters for a convert to PDF/A action.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-04-27T13:23:36.328+02:00[Europe/Paris]")
public class PdfConvertToPDFAParameters {
  public static final String SERIALIZED_NAME_FILE_ID = "FileId";
  @SerializedName(SERIALIZED_NAME_FILE_ID)
  private String fileId;

  public static final String SERIALIZED_NAME_CONFORMANCE = "Conformance";
  @SerializedName(SERIALIZED_NAME_CONFORMANCE)
  private PdfAConformance conformance;

  public static final String SERIALIZED_NAME_ALLOW_VECTORIZATION = "AllowVectorization";
  @SerializedName(SERIALIZED_NAME_ALLOW_VECTORIZATION)
  private Boolean allowVectorization = true;

  public static final String SERIALIZED_NAME_ALLOW_RASTERIZATION = "AllowRasterization";
  @SerializedName(SERIALIZED_NAME_ALLOW_RASTERIZATION)
  private Boolean allowRasterization = true;


  public PdfConvertToPDFAParameters fileId(String fileId) {
    
    this.fileId = fileId;
    return this;
  }

   /**
   * The identifier of the previously uploaded file to be processed.
   * @return fileId
  **/
  @ApiModelProperty(required = true, value = "The identifier of the previously uploaded file to be processed.")

  public String getFileId() {
    return fileId;
  }


  public void setFileId(String fileId) {
    this.fileId = fileId;
  }


  public PdfConvertToPDFAParameters conformance(PdfAConformance conformance) {
    
    this.conformance = conformance;
    return this;
  }

   /**
   * Get conformance
   * @return conformance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PdfAConformance getConformance() {
    return conformance;
  }


  public void setConformance(PdfAConformance conformance) {
    this.conformance = conformance;
  }


  public PdfConvertToPDFAParameters allowVectorization(Boolean allowVectorization) {
    
    this.allowVectorization = allowVectorization;
    return this;
  }

   /**
   * If set to true, conversion engine will use the page vectorization in case direct conversion is not possible.
   * @return allowVectorization
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If set to true, conversion engine will use the page vectorization in case direct conversion is not possible.")

  public Boolean getAllowVectorization() {
    return allowVectorization;
  }


  public void setAllowVectorization(Boolean allowVectorization) {
    this.allowVectorization = allowVectorization;
  }


  public PdfConvertToPDFAParameters allowRasterization(Boolean allowRasterization) {
    
    this.allowRasterization = allowRasterization;
    return this;
  }

   /**
   * If set to true, conversion engine will use the page rasterization in case direct conversion and verorization are not possible or allowed.
   * @return allowRasterization
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If set to true, conversion engine will use the page rasterization in case direct conversion and verorization are not possible or allowed.")

  public Boolean getAllowRasterization() {
    return allowRasterization;
  }


  public void setAllowRasterization(Boolean allowRasterization) {
    this.allowRasterization = allowRasterization;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PdfConvertToPDFAParameters pdfConvertToPDFAParameters = (PdfConvertToPDFAParameters) o;
    return Objects.equals(this.fileId, pdfConvertToPDFAParameters.fileId) &&
        Objects.equals(this.conformance, pdfConvertToPDFAParameters.conformance) &&
        Objects.equals(this.allowVectorization, pdfConvertToPDFAParameters.allowVectorization) &&
        Objects.equals(this.allowRasterization, pdfConvertToPDFAParameters.allowRasterization);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fileId, conformance, allowVectorization, allowRasterization);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PdfConvertToPDFAParameters {\n");
    sb.append("    fileId: ").append(toIndentedString(fileId)).append("\n");
    sb.append("    conformance: ").append(toIndentedString(conformance)).append("\n");
    sb.append("    allowVectorization: ").append(toIndentedString(allowVectorization)).append("\n");
    sb.append("    allowRasterization: ").append(toIndentedString(allowRasterization)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


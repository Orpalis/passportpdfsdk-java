/*
 * PassportPDF API
 * Another brick in the cloud
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.DrawableContentLayoutParameters;
import org.openapitools.client.model.RubberStampAnnotationIcon;

/**
 * Represents information about the Rubber Stamp Annotation.
 */
@ApiModel(description = "Represents information about the Rubber Stamp Annotation.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-04-27T13:23:36.328+02:00[Europe/Paris]")
public class RubberStampAnnotationParameters {
  public static final String SERIALIZED_NAME_ANNOTATION_LAYOUT = "AnnotationLayout";
  @SerializedName(SERIALIZED_NAME_ANNOTATION_LAYOUT)
  private DrawableContentLayoutParameters annotationLayout;

  public static final String SERIALIZED_NAME_RUBBER_STAMP_ICON = "RubberStampIcon";
  @SerializedName(SERIALIZED_NAME_RUBBER_STAMP_ICON)
  private RubberStampAnnotationIcon rubberStampIcon;

  public static final String SERIALIZED_NAME_TITLE = "Title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_CONTENT = "Content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private String content;

  public static final String SERIALIZED_NAME_COLOR = "Color";
  @SerializedName(SERIALIZED_NAME_COLOR)
  private String color = "red";


  public RubberStampAnnotationParameters annotationLayout(DrawableContentLayoutParameters annotationLayout) {
    
    this.annotationLayout = annotationLayout;
    return this;
  }

   /**
   * Get annotationLayout
   * @return annotationLayout
  **/
  @ApiModelProperty(required = true, value = "")

  public DrawableContentLayoutParameters getAnnotationLayout() {
    return annotationLayout;
  }


  public void setAnnotationLayout(DrawableContentLayoutParameters annotationLayout) {
    this.annotationLayout = annotationLayout;
  }


  public RubberStampAnnotationParameters rubberStampIcon(RubberStampAnnotationIcon rubberStampIcon) {
    
    this.rubberStampIcon = rubberStampIcon;
    return this;
  }

   /**
   * Get rubberStampIcon
   * @return rubberStampIcon
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public RubberStampAnnotationIcon getRubberStampIcon() {
    return rubberStampIcon;
  }


  public void setRubberStampIcon(RubberStampAnnotationIcon rubberStampIcon) {
    this.rubberStampIcon = rubberStampIcon;
  }


  public RubberStampAnnotationParameters title(String title) {
    
    this.title = title;
    return this;
  }

   /**
   * Specifies the title of the annotation, if any.
   * @return title
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the title of the annotation, if any.")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    this.title = title;
  }


  public RubberStampAnnotationParameters content(String content) {
    
    this.content = content;
    return this;
  }

   /**
   * Specify the content of the annotation, if any.
   * @return content
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specify the content of the annotation, if any.")

  public String getContent() {
    return content;
  }


  public void setContent(String content) {
    this.content = content;
  }


  public RubberStampAnnotationParameters color(String color) {
    
    this.color = color;
    return this;
  }

   /**
   * Specifies the color of the annotation, using the color name (ie: \&quot;red\&quot;) or its RGBa code (ie: \&quot;rgba(255,0,0,1)\&quot;).
   * @return color
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the color of the annotation, using the color name (ie: \"red\") or its RGBa code (ie: \"rgba(255,0,0,1)\").")

  public String getColor() {
    return color;
  }


  public void setColor(String color) {
    this.color = color;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RubberStampAnnotationParameters rubberStampAnnotationParameters = (RubberStampAnnotationParameters) o;
    return Objects.equals(this.annotationLayout, rubberStampAnnotationParameters.annotationLayout) &&
        Objects.equals(this.rubberStampIcon, rubberStampAnnotationParameters.rubberStampIcon) &&
        Objects.equals(this.title, rubberStampAnnotationParameters.title) &&
        Objects.equals(this.content, rubberStampAnnotationParameters.content) &&
        Objects.equals(this.color, rubberStampAnnotationParameters.color);
  }

  @Override
  public int hashCode() {
    return Objects.hash(annotationLayout, rubberStampIcon, title, content, color);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RubberStampAnnotationParameters {\n");
    sb.append("    annotationLayout: ").append(toIndentedString(annotationLayout)).append("\n");
    sb.append("    rubberStampIcon: ").append(toIndentedString(rubberStampIcon)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


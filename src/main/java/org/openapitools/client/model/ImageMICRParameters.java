/*
 * PassportPDF API
 *       Introduction:    PassportPDF API is a REST API that lets you perform complex operations on documents and images easily.  You may consume the API by using our.NET SDK (other platforms / languages are soon to come), or any REST client by sending your requests to the appropriate endpoints.   A list of all the available endpoints can be found on the API reference page at https://passportpdfapi.com/references/api/index.html        Authentication:    Each available operation has a predefined cost, expressed as a number of tokens.  These tokens are deducted from your \"passport,\" which has a unique identifier that acts as an API key. This key is, therefore, required to be provided with each request for the latter to be honored(except if the operation does not have a cost, typically when you request a simple data with a GET).  Your key must be included in the header of the request, under the name \"X-PassportPdf-API-Key.\"  If you are using the.NET SDK, you can either set your key in the ApiKey property of your API instance(PdfApi or ImageApi, for example) or set it globally in the GlobalConfiguration instance if you want to set it once for the whole life cycle of your application.          Communication with the API:    All the available actions are listed on the API reference page, as previously mentioned.  There are several different controllers, i.e., routes, which categorize the actions.For example, you may use the PDF controller(\"/api/pdf\" route) to perform PDF - related operations, and the Image controller(\"/api/image\") for images.  Each action defines what kind of parameters(if any) is expected, and what kind of response is served.Parameters and responses are represented using data models, or \"schemas,\" and are listed in the \"Schemas\" section of the reference.   Parameters and response models of a given action are both prefixed by the controller name, the action name, and \"Parameters\" / \"Response,\" e.g. \"api/pdf/reduce\" respectively receives and serves a PdfReduceParameters and PdfReduceResponse models.  Using the .NET SDK, you will find the objects to interact with the different controllers in the PassportPDF.Api namespace and all the schemas in the PassportPDF.Model namespace.        Processing documents:    Each document manipulation starts with importing the file onto the API.  The LoadDocument action of the PDF controller lets you import your document as a PDF.  Note that the GetPDFImportSupportedFileExtensions action of the same controller will let you know all the different types of files that you may import as a PDF. LoadDocument responds with a JSON-serialized PdfLoadDocumentResponse model, which contains a \"FileId\" property.This identifier is required for the API to know about your document for further manipulations, hence the presence of a \"FileId\" property in the PdfReduceParameters schema (and many other parameters schemas). To download the changes made to a file, you need, of course, to download the new version of the file from the API.  To save your document as a PDF, you will need to use the SaveDocument action of the PDF controller and provide a PdfSaveDocumentParameters data model that contains the identifier of your file.        Errors:    Conventional HTTP response codes are used to indicate the success or failure of an API request.   The Error data model also defines some information about an error that occurred on the API.   Each response model has an Error in its definition, and its sole existence in the serialized response - which should thus always be checked - indicates that something went wrong.  Among the information given by the Error schema, \"ResultCode\" specifies a value of the \"PassportPDFStatus\" enumeration, that defines a first level of error information. \"InternalErrorId\" defines a unique identifier for the error, which comes very handy for us to troubleshoot any issue you may encounter quickly.        Efficiency considerations:    Multipart upload/download is available and lets you directly stream a file to/from the API.  In the PDF controller, LoadDocument/LoadDocumentMultipart and SaveDocument/SaveDocumentToFile may be used to upload/download a document using respectively binary data serialization and streaming multipart HTTP requests.  The second approach should be favored when dealing with large files, as it will be much more efficient in that context.  
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.MicrContext;
import org.openapitools.client.model.MicrFont;

/**
 * Represents the parameters for a MICR action.
 */
@ApiModel(description = "Represents the parameters for a MICR action.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-04-10T16:23:29.092+02:00[Europe/Paris]")
public class ImageMICRParameters {
  public static final String SERIALIZED_NAME_FILE_ID = "FileId";
  @SerializedName(SERIALIZED_NAME_FILE_ID)
  private String fileId;

  public static final String SERIALIZED_NAME_PAGE_RANGE = "PageRange";
  @SerializedName(SERIALIZED_NAME_PAGE_RANGE)
  private String pageRange;

  public static final String SERIALIZED_NAME_FONT = "Font";
  @SerializedName(SERIALIZED_NAME_FONT)
  private MicrFont font;

  public static final String SERIALIZED_NAME_CONTEXT = "Context";
  @SerializedName(SERIALIZED_NAME_CONTEXT)
  private MicrContext context;

  public static final String SERIALIZED_NAME_WHITE_LIST = "WhiteList";
  @SerializedName(SERIALIZED_NAME_WHITE_LIST)
  private String whiteList = "";

  public static final String SERIALIZED_NAME_ROI_LEFT = "RoiLeft";
  @SerializedName(SERIALIZED_NAME_ROI_LEFT)
  private Integer roiLeft = 0;

  public static final String SERIALIZED_NAME_ROI_TOP = "RoiTop";
  @SerializedName(SERIALIZED_NAME_ROI_TOP)
  private Integer roiTop = 0;

  public static final String SERIALIZED_NAME_ROI_WIDTH = "RoiWidth";
  @SerializedName(SERIALIZED_NAME_ROI_WIDTH)
  private Integer roiWidth = 0;

  public static final String SERIALIZED_NAME_ROI_HEIGHT = "RoiHeight";
  @SerializedName(SERIALIZED_NAME_ROI_HEIGHT)
  private Integer roiHeight = 0;

  public static final String SERIALIZED_NAME_EXPECTED_SYMBOLS_COUNT = "ExpectedSymbolsCount";
  @SerializedName(SERIALIZED_NAME_EXPECTED_SYMBOLS_COUNT)
  private Integer expectedSymbolsCount = 0;


  public ImageMICRParameters fileId(String fileId) {
    
    this.fileId = fileId;
    return this;
  }

   /**
   * The identifier of the previously uploaded file to be processed.
   * @return fileId
  **/
  @ApiModelProperty(required = true, value = "The identifier of the previously uploaded file to be processed.")

  public String getFileId() {
    return fileId;
  }


  public void setFileId(String fileId) {
    this.fileId = fileId;
  }


  public ImageMICRParameters pageRange(String pageRange) {
    
    this.pageRange = pageRange;
    return this;
  }

   /**
   * Specifies the page or the range of page to be processed.
   * @return pageRange
  **/
  @ApiModelProperty(required = true, value = "Specifies the page or the range of page to be processed.")

  public String getPageRange() {
    return pageRange;
  }


  public void setPageRange(String pageRange) {
    this.pageRange = pageRange;
  }


  public ImageMICRParameters font(MicrFont font) {
    
    this.font = font;
    return this;
  }

   /**
   * Get font
   * @return font
  **/
  @ApiModelProperty(required = true, value = "")

  public MicrFont getFont() {
    return font;
  }


  public void setFont(MicrFont font) {
    this.font = font;
  }


  public ImageMICRParameters context(MicrContext context) {
    
    this.context = context;
    return this;
  }

   /**
   * Get context
   * @return context
  **/
  @ApiModelProperty(required = true, value = "")

  public MicrContext getContext() {
    return context;
  }


  public void setContext(MicrContext context) {
    this.context = context;
  }


  public ImageMICRParameters whiteList(String whiteList) {
    
    this.whiteList = whiteList;
    return this;
  }

   /**
   * Specifies the characters to be ignored by the recognition process.
   * @return whiteList
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the characters to be ignored by the recognition process.")

  public String getWhiteList() {
    return whiteList;
  }


  public void setWhiteList(String whiteList) {
    this.whiteList = whiteList;
  }


  public ImageMICRParameters roiLeft(Integer roiLeft) {
    
    this.roiLeft = roiLeft;
    return this;
  }

   /**
   * Specifies the left coordinate, in pixel, of the region to process.
   * @return roiLeft
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the left coordinate, in pixel, of the region to process.")

  public Integer getRoiLeft() {
    return roiLeft;
  }


  public void setRoiLeft(Integer roiLeft) {
    this.roiLeft = roiLeft;
  }


  public ImageMICRParameters roiTop(Integer roiTop) {
    
    this.roiTop = roiTop;
    return this;
  }

   /**
   * Specifies the top coordinate, in pixel, of the region to process.
   * @return roiTop
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the top coordinate, in pixel, of the region to process.")

  public Integer getRoiTop() {
    return roiTop;
  }


  public void setRoiTop(Integer roiTop) {
    this.roiTop = roiTop;
  }


  public ImageMICRParameters roiWidth(Integer roiWidth) {
    
    this.roiWidth = roiWidth;
    return this;
  }

   /**
   * Specifies the width, in pixel, of the region to process. 0 causes the entire image to be processed.
   * @return roiWidth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the width, in pixel, of the region to process. 0 causes the entire image to be processed.")

  public Integer getRoiWidth() {
    return roiWidth;
  }


  public void setRoiWidth(Integer roiWidth) {
    this.roiWidth = roiWidth;
  }


  public ImageMICRParameters roiHeight(Integer roiHeight) {
    
    this.roiHeight = roiHeight;
    return this;
  }

   /**
   * Specifies the height, in pixel, of the region to process. 0 causes the entire image to be processed.
   * @return roiHeight
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the height, in pixel, of the region to process. 0 causes the entire image to be processed.")

  public Integer getRoiHeight() {
    return roiHeight;
  }


  public void setRoiHeight(Integer roiHeight) {
    this.roiHeight = roiHeight;
  }


  public ImageMICRParameters expectedSymbolsCount(Integer expectedSymbolsCount) {
    
    this.expectedSymbolsCount = expectedSymbolsCount;
    return this;
  }

   /**
   * Specifies the number of symbols expected to be detected, use 0 if unknown.
   * @return expectedSymbolsCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the number of symbols expected to be detected, use 0 if unknown.")

  public Integer getExpectedSymbolsCount() {
    return expectedSymbolsCount;
  }


  public void setExpectedSymbolsCount(Integer expectedSymbolsCount) {
    this.expectedSymbolsCount = expectedSymbolsCount;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImageMICRParameters imageMICRParameters = (ImageMICRParameters) o;
    return Objects.equals(this.fileId, imageMICRParameters.fileId) &&
        Objects.equals(this.pageRange, imageMICRParameters.pageRange) &&
        Objects.equals(this.font, imageMICRParameters.font) &&
        Objects.equals(this.context, imageMICRParameters.context) &&
        Objects.equals(this.whiteList, imageMICRParameters.whiteList) &&
        Objects.equals(this.roiLeft, imageMICRParameters.roiLeft) &&
        Objects.equals(this.roiTop, imageMICRParameters.roiTop) &&
        Objects.equals(this.roiWidth, imageMICRParameters.roiWidth) &&
        Objects.equals(this.roiHeight, imageMICRParameters.roiHeight) &&
        Objects.equals(this.expectedSymbolsCount, imageMICRParameters.expectedSymbolsCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fileId, pageRange, font, context, whiteList, roiLeft, roiTop, roiWidth, roiHeight, expectedSymbolsCount);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImageMICRParameters {\n");
    sb.append("    fileId: ").append(toIndentedString(fileId)).append("\n");
    sb.append("    pageRange: ").append(toIndentedString(pageRange)).append("\n");
    sb.append("    font: ").append(toIndentedString(font)).append("\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("    whiteList: ").append(toIndentedString(whiteList)).append("\n");
    sb.append("    roiLeft: ").append(toIndentedString(roiLeft)).append("\n");
    sb.append("    roiTop: ").append(toIndentedString(roiTop)).append("\n");
    sb.append("    roiWidth: ").append(toIndentedString(roiWidth)).append("\n");
    sb.append("    roiHeight: ").append(toIndentedString(roiHeight)).append("\n");
    sb.append("    expectedSymbolsCount: ").append(toIndentedString(expectedSymbolsCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


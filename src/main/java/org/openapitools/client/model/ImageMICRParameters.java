/*
 * PassportPDF API
 * Another brick in the cloud
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.MicrContext;
import org.openapitools.client.model.MicrFont;

/**
 * Represents the parameters for a MICR action.
 */
@ApiModel(description = "Represents the parameters for a MICR action.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-04-27T13:23:36.328+02:00[Europe/Paris]")
public class ImageMICRParameters {
  public static final String SERIALIZED_NAME_FILE_ID = "FileId";
  @SerializedName(SERIALIZED_NAME_FILE_ID)
  private String fileId;

  public static final String SERIALIZED_NAME_PAGE_RANGE = "PageRange";
  @SerializedName(SERIALIZED_NAME_PAGE_RANGE)
  private String pageRange;

  public static final String SERIALIZED_NAME_FONT = "Font";
  @SerializedName(SERIALIZED_NAME_FONT)
  private MicrFont font;

  public static final String SERIALIZED_NAME_CONTEXT = "Context";
  @SerializedName(SERIALIZED_NAME_CONTEXT)
  private MicrContext context;

  public static final String SERIALIZED_NAME_WHITE_LIST = "WhiteList";
  @SerializedName(SERIALIZED_NAME_WHITE_LIST)
  private String whiteList = "";

  public static final String SERIALIZED_NAME_ROI_LEFT = "RoiLeft";
  @SerializedName(SERIALIZED_NAME_ROI_LEFT)
  private Integer roiLeft = 0;

  public static final String SERIALIZED_NAME_ROI_TOP = "RoiTop";
  @SerializedName(SERIALIZED_NAME_ROI_TOP)
  private Integer roiTop = 0;

  public static final String SERIALIZED_NAME_ROI_WIDTH = "RoiWidth";
  @SerializedName(SERIALIZED_NAME_ROI_WIDTH)
  private Integer roiWidth = 0;

  public static final String SERIALIZED_NAME_ROI_HEIGHT = "RoiHeight";
  @SerializedName(SERIALIZED_NAME_ROI_HEIGHT)
  private Integer roiHeight = 0;

  public static final String SERIALIZED_NAME_EXPECTED_SYMBOLS_COUNT = "ExpectedSymbolsCount";
  @SerializedName(SERIALIZED_NAME_EXPECTED_SYMBOLS_COUNT)
  private Integer expectedSymbolsCount = 0;


  public ImageMICRParameters fileId(String fileId) {
    
    this.fileId = fileId;
    return this;
  }

   /**
   * The identifier of the previously uploaded file to be processed.
   * @return fileId
  **/
  @ApiModelProperty(required = true, value = "The identifier of the previously uploaded file to be processed.")

  public String getFileId() {
    return fileId;
  }


  public void setFileId(String fileId) {
    this.fileId = fileId;
  }


  public ImageMICRParameters pageRange(String pageRange) {
    
    this.pageRange = pageRange;
    return this;
  }

   /**
   * Specifies the page or the range of page to be processed.
   * @return pageRange
  **/
  @ApiModelProperty(required = true, value = "Specifies the page or the range of page to be processed.")

  public String getPageRange() {
    return pageRange;
  }


  public void setPageRange(String pageRange) {
    this.pageRange = pageRange;
  }


  public ImageMICRParameters font(MicrFont font) {
    
    this.font = font;
    return this;
  }

   /**
   * Get font
   * @return font
  **/
  @ApiModelProperty(required = true, value = "")

  public MicrFont getFont() {
    return font;
  }


  public void setFont(MicrFont font) {
    this.font = font;
  }


  public ImageMICRParameters context(MicrContext context) {
    
    this.context = context;
    return this;
  }

   /**
   * Get context
   * @return context
  **/
  @ApiModelProperty(required = true, value = "")

  public MicrContext getContext() {
    return context;
  }


  public void setContext(MicrContext context) {
    this.context = context;
  }


  public ImageMICRParameters whiteList(String whiteList) {
    
    this.whiteList = whiteList;
    return this;
  }

   /**
   * Specifies the characters to be ignored by the recognition process.
   * @return whiteList
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the characters to be ignored by the recognition process.")

  public String getWhiteList() {
    return whiteList;
  }


  public void setWhiteList(String whiteList) {
    this.whiteList = whiteList;
  }


  public ImageMICRParameters roiLeft(Integer roiLeft) {
    
    this.roiLeft = roiLeft;
    return this;
  }

   /**
   * Specifies the left coordinate, in pixel, of the region to process.
   * @return roiLeft
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the left coordinate, in pixel, of the region to process.")

  public Integer getRoiLeft() {
    return roiLeft;
  }


  public void setRoiLeft(Integer roiLeft) {
    this.roiLeft = roiLeft;
  }


  public ImageMICRParameters roiTop(Integer roiTop) {
    
    this.roiTop = roiTop;
    return this;
  }

   /**
   * Specifies the top coordinate, in pixel, of the region to process.
   * @return roiTop
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the top coordinate, in pixel, of the region to process.")

  public Integer getRoiTop() {
    return roiTop;
  }


  public void setRoiTop(Integer roiTop) {
    this.roiTop = roiTop;
  }


  public ImageMICRParameters roiWidth(Integer roiWidth) {
    
    this.roiWidth = roiWidth;
    return this;
  }

   /**
   * Specifies the width, in pixel, of the region to process. 0 causes the entire image to be processed.
   * @return roiWidth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the width, in pixel, of the region to process. 0 causes the entire image to be processed.")

  public Integer getRoiWidth() {
    return roiWidth;
  }


  public void setRoiWidth(Integer roiWidth) {
    this.roiWidth = roiWidth;
  }


  public ImageMICRParameters roiHeight(Integer roiHeight) {
    
    this.roiHeight = roiHeight;
    return this;
  }

   /**
   * Specifies the height, in pixel, of the region to process. 0 causes the entire image to be processed.
   * @return roiHeight
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the height, in pixel, of the region to process. 0 causes the entire image to be processed.")

  public Integer getRoiHeight() {
    return roiHeight;
  }


  public void setRoiHeight(Integer roiHeight) {
    this.roiHeight = roiHeight;
  }


  public ImageMICRParameters expectedSymbolsCount(Integer expectedSymbolsCount) {
    
    this.expectedSymbolsCount = expectedSymbolsCount;
    return this;
  }

   /**
   * Specifies the number of symbols expected to be detected, use 0 if unknown.
   * @return expectedSymbolsCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the number of symbols expected to be detected, use 0 if unknown.")

  public Integer getExpectedSymbolsCount() {
    return expectedSymbolsCount;
  }


  public void setExpectedSymbolsCount(Integer expectedSymbolsCount) {
    this.expectedSymbolsCount = expectedSymbolsCount;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImageMICRParameters imageMICRParameters = (ImageMICRParameters) o;
    return Objects.equals(this.fileId, imageMICRParameters.fileId) &&
        Objects.equals(this.pageRange, imageMICRParameters.pageRange) &&
        Objects.equals(this.font, imageMICRParameters.font) &&
        Objects.equals(this.context, imageMICRParameters.context) &&
        Objects.equals(this.whiteList, imageMICRParameters.whiteList) &&
        Objects.equals(this.roiLeft, imageMICRParameters.roiLeft) &&
        Objects.equals(this.roiTop, imageMICRParameters.roiTop) &&
        Objects.equals(this.roiWidth, imageMICRParameters.roiWidth) &&
        Objects.equals(this.roiHeight, imageMICRParameters.roiHeight) &&
        Objects.equals(this.expectedSymbolsCount, imageMICRParameters.expectedSymbolsCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fileId, pageRange, font, context, whiteList, roiLeft, roiTop, roiWidth, roiHeight, expectedSymbolsCount);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImageMICRParameters {\n");
    sb.append("    fileId: ").append(toIndentedString(fileId)).append("\n");
    sb.append("    pageRange: ").append(toIndentedString(pageRange)).append("\n");
    sb.append("    font: ").append(toIndentedString(font)).append("\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("    whiteList: ").append(toIndentedString(whiteList)).append("\n");
    sb.append("    roiLeft: ").append(toIndentedString(roiLeft)).append("\n");
    sb.append("    roiTop: ").append(toIndentedString(roiTop)).append("\n");
    sb.append("    roiWidth: ").append(toIndentedString(roiWidth)).append("\n");
    sb.append("    roiHeight: ").append(toIndentedString(roiHeight)).append("\n");
    sb.append("    expectedSymbolsCount: ").append(toIndentedString(expectedSymbolsCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


/*
 * PassportPDF API
 *       Introduction:    PassportPDF API is a REST API that lets you perform complex operations on documents and images easily.  You may consume the API by using our.NET SDK (other platforms / languages are soon to come), or any REST client by sending your requests to the appropriate endpoints.   A list of all the available endpoints can be found on the API reference page at https://passportpdfapi.com/references/api/index.html        Authentication:    Each available operation has a predefined cost, expressed as a number of tokens.  These tokens are deducted from your \"passport,\" which has a unique identifier that acts as an API key. This key is, therefore, required to be provided with each request for the latter to be honored(except if the operation does not have a cost, typically when you request a simple data with a GET).  Your key must be included in the header of the request, under the name \"X-PassportPdf-API-Key.\"  If you are using the.NET SDK, you can either set your key in the ApiKey property of your API instance(PdfApi or ImageApi, for example) or set it globally in the GlobalConfiguration instance if you want to set it once for the whole life cycle of your application.          Communication with the API:    All the available actions are listed on the API reference page, as previously mentioned.  There are several different controllers, i.e., routes, which categorize the actions.For example, you may use the PDF controller(\"/api/pdf\" route) to perform PDF - related operations, and the Image controller(\"/api/image\") for images.  Each action defines what kind of parameters(if any) is expected, and what kind of response is served.Parameters and responses are represented using data models, or \"schemas,\" and are listed in the \"Schemas\" section of the reference.   Parameters and response models of a given action are both prefixed by the controller name, the action name, and \"Parameters\" / \"Response,\" e.g. \"api/pdf/reduce\" respectively receives and serves a PdfReduceParameters and PdfReduceResponse models.  Using the .NET SDK, you will find the objects to interact with the different controllers in the PassportPDF.Api namespace and all the schemas in the PassportPDF.Model namespace.        Processing documents:    Each document manipulation starts with importing the file onto the API.  The LoadDocument action of the PDF controller lets you import your document as a PDF.  Note that the GetPDFImportSupportedFileExtensions action of the same controller will let you know all the different types of files that you may import as a PDF. LoadDocument responds with a JSON-serialized PdfLoadDocumentResponse model, which contains a \"FileId\" property.This identifier is required for the API to know about your document for further manipulations, hence the presence of a \"FileId\" property in the PdfReduceParameters schema (and many other parameters schemas). To download the changes made to a file, you need, of course, to download the new version of the file from the API.  To save your document as a PDF, you will need to use the SaveDocument action of the PDF controller and provide a PdfSaveDocumentParameters data model that contains the identifier of your file.        Errors:    Conventional HTTP response codes are used to indicate the success or failure of an API request.   The Error data model also defines some information about an error that occurred on the API.   Each response model has an Error in its definition, and its sole existence in the serialized response - which should thus always be checked - indicates that something went wrong.  Among the information given by the Error schema, \"ResultCode\" specifies a value of the \"PassportPDFStatus\" enumeration, that defines a first level of error information. \"InternalErrorId\" defines a unique identifier for the error, which comes very handy for us to troubleshoot any issue you may encounter quickly.        Efficiency considerations:    Multipart upload/download is available and lets you directly stream a file to/from the API.  In the PDF controller, LoadDocument/LoadDocumentMultipart and SaveDocument/SaveDocumentToFile may be used to upload/download a document using respectively binary data serialization and streaming multipart HTTP requests.  The second approach should be favored when dealing with large files, as it will be much more efficient in that context.  
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Holds detailed information about a magnetic ink symbol detected by a MICR process.
 */
@ApiModel(description = "Holds detailed information about a magnetic ink symbol detected by a MICR process.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-04-10T16:23:29.092+02:00[Europe/Paris]")
public class MICRSymbolInfo {
  public static final String SERIALIZED_NAME_SYMBOL_VALUE = "SymbolValue";
  @SerializedName(SERIALIZED_NAME_SYMBOL_VALUE)
  private String symbolValue;

  public static final String SERIALIZED_NAME_SYMBOL_VALUE2 = "SymbolValue2";
  @SerializedName(SERIALIZED_NAME_SYMBOL_VALUE2)
  private String symbolValue2;

  public static final String SERIALIZED_NAME_TOP = "Top";
  @SerializedName(SERIALIZED_NAME_TOP)
  private Integer top;

  public static final String SERIALIZED_NAME_LEFT = "Left";
  @SerializedName(SERIALIZED_NAME_LEFT)
  private Integer left;

  public static final String SERIALIZED_NAME_BOTTOM = "Bottom";
  @SerializedName(SERIALIZED_NAME_BOTTOM)
  private Integer bottom;

  public static final String SERIALIZED_NAME_RIGHT = "Right";
  @SerializedName(SERIALIZED_NAME_RIGHT)
  private Integer right;

  public static final String SERIALIZED_NAME_LINE = "Line";
  @SerializedName(SERIALIZED_NAME_LINE)
  private Integer line;

  public static final String SERIALIZED_NAME_CONFIDENCE = "Confidence";
  @SerializedName(SERIALIZED_NAME_CONFIDENCE)
  private Float confidence;

  public static final String SERIALIZED_NAME_CONFIDENCE2 = "Confidence2";
  @SerializedName(SERIALIZED_NAME_CONFIDENCE2)
  private Float confidence2;


  public MICRSymbolInfo symbolValue(String symbolValue) {
    
    this.symbolValue = symbolValue;
    return this;
  }

   /**
   * Specifies the best candidate for the character representation of the detected symbol.
   * @return symbolValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the best candidate for the character representation of the detected symbol.")

  public String getSymbolValue() {
    return symbolValue;
  }


  public void setSymbolValue(String symbolValue) {
    this.symbolValue = symbolValue;
  }


  public MICRSymbolInfo symbolValue2(String symbolValue2) {
    
    this.symbolValue2 = symbolValue2;
    return this;
  }

   /**
   * Specifies the second best candidate for the character representation of the detected symbol.
   * @return symbolValue2
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the second best candidate for the character representation of the detected symbol.")

  public String getSymbolValue2() {
    return symbolValue2;
  }


  public void setSymbolValue2(String symbolValue2) {
    this.symbolValue2 = symbolValue2;
  }


  public MICRSymbolInfo top(Integer top) {
    
    this.top = top;
    return this;
  }

   /**
   * Specifies the top coordinate of the symbol, in pixels.
   * @return top
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the top coordinate of the symbol, in pixels.")

  public Integer getTop() {
    return top;
  }


  public void setTop(Integer top) {
    this.top = top;
  }


  public MICRSymbolInfo left(Integer left) {
    
    this.left = left;
    return this;
  }

   /**
   * Specifies the left coordinate of the symbol, in pixels.
   * @return left
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the left coordinate of the symbol, in pixels.")

  public Integer getLeft() {
    return left;
  }


  public void setLeft(Integer left) {
    this.left = left;
  }


  public MICRSymbolInfo bottom(Integer bottom) {
    
    this.bottom = bottom;
    return this;
  }

   /**
   * Specifies the bottom coordinate of the symbol, in pixels.
   * @return bottom
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the bottom coordinate of the symbol, in pixels.")

  public Integer getBottom() {
    return bottom;
  }


  public void setBottom(Integer bottom) {
    this.bottom = bottom;
  }


  public MICRSymbolInfo right(Integer right) {
    
    this.right = right;
    return this;
  }

   /**
   * Specifies the right coordinate of the symbol, in pixels.
   * @return right
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the right coordinate of the symbol, in pixels.")

  public Integer getRight() {
    return right;
  }


  public void setRight(Integer right) {
    this.right = right;
  }


  public MICRSymbolInfo line(Integer line) {
    
    this.line = line;
    return this;
  }

   /**
   * Specifies the number of the line on which the symbol has been detected.
   * @return line
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the number of the line on which the symbol has been detected.")

  public Integer getLine() {
    return line;
  }


  public void setLine(Integer line) {
    this.line = line;
  }


  public MICRSymbolInfo confidence(Float confidence) {
    
    this.confidence = confidence;
    return this;
  }

   /**
   * Specifies the level of confidence of the best detected symbol candidate.
   * @return confidence
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the level of confidence of the best detected symbol candidate.")

  public Float getConfidence() {
    return confidence;
  }


  public void setConfidence(Float confidence) {
    this.confidence = confidence;
  }


  public MICRSymbolInfo confidence2(Float confidence2) {
    
    this.confidence2 = confidence2;
    return this;
  }

   /**
   * Specifies the level of confidence of the second best detected symbol candidate.
   * @return confidence2
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the level of confidence of the second best detected symbol candidate.")

  public Float getConfidence2() {
    return confidence2;
  }


  public void setConfidence2(Float confidence2) {
    this.confidence2 = confidence2;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MICRSymbolInfo miCRSymbolInfo = (MICRSymbolInfo) o;
    return Objects.equals(this.symbolValue, miCRSymbolInfo.symbolValue) &&
        Objects.equals(this.symbolValue2, miCRSymbolInfo.symbolValue2) &&
        Objects.equals(this.top, miCRSymbolInfo.top) &&
        Objects.equals(this.left, miCRSymbolInfo.left) &&
        Objects.equals(this.bottom, miCRSymbolInfo.bottom) &&
        Objects.equals(this.right, miCRSymbolInfo.right) &&
        Objects.equals(this.line, miCRSymbolInfo.line) &&
        Objects.equals(this.confidence, miCRSymbolInfo.confidence) &&
        Objects.equals(this.confidence2, miCRSymbolInfo.confidence2);
  }

  @Override
  public int hashCode() {
    return Objects.hash(symbolValue, symbolValue2, top, left, bottom, right, line, confidence, confidence2);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MICRSymbolInfo {\n");
    sb.append("    symbolValue: ").append(toIndentedString(symbolValue)).append("\n");
    sb.append("    symbolValue2: ").append(toIndentedString(symbolValue2)).append("\n");
    sb.append("    top: ").append(toIndentedString(top)).append("\n");
    sb.append("    left: ").append(toIndentedString(left)).append("\n");
    sb.append("    bottom: ").append(toIndentedString(bottom)).append("\n");
    sb.append("    right: ").append(toIndentedString(right)).append("\n");
    sb.append("    line: ").append(toIndentedString(line)).append("\n");
    sb.append("    confidence: ").append(toIndentedString(confidence)).append("\n");
    sb.append("    confidence2: ").append(toIndentedString(confidence2)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


/*
 * PassportPDF API
 * Another brick in the cloud
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Holds detailed information about a magnetic ink symbol detected by a MICR process.
 */
@ApiModel(description = "Holds detailed information about a magnetic ink symbol detected by a MICR process.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-04-27T13:23:36.328+02:00[Europe/Paris]")
public class MICRSymbolInfo {
  public static final String SERIALIZED_NAME_SYMBOL_VALUE = "SymbolValue";
  @SerializedName(SERIALIZED_NAME_SYMBOL_VALUE)
  private String symbolValue;

  public static final String SERIALIZED_NAME_SYMBOL_VALUE2 = "SymbolValue2";
  @SerializedName(SERIALIZED_NAME_SYMBOL_VALUE2)
  private String symbolValue2;

  public static final String SERIALIZED_NAME_TOP = "Top";
  @SerializedName(SERIALIZED_NAME_TOP)
  private Integer top;

  public static final String SERIALIZED_NAME_LEFT = "Left";
  @SerializedName(SERIALIZED_NAME_LEFT)
  private Integer left;

  public static final String SERIALIZED_NAME_BOTTOM = "Bottom";
  @SerializedName(SERIALIZED_NAME_BOTTOM)
  private Integer bottom;

  public static final String SERIALIZED_NAME_RIGHT = "Right";
  @SerializedName(SERIALIZED_NAME_RIGHT)
  private Integer right;

  public static final String SERIALIZED_NAME_LINE = "Line";
  @SerializedName(SERIALIZED_NAME_LINE)
  private Integer line;

  public static final String SERIALIZED_NAME_CONFIDENCE = "Confidence";
  @SerializedName(SERIALIZED_NAME_CONFIDENCE)
  private Float confidence;

  public static final String SERIALIZED_NAME_CONFIDENCE2 = "Confidence2";
  @SerializedName(SERIALIZED_NAME_CONFIDENCE2)
  private Float confidence2;


  public MICRSymbolInfo symbolValue(String symbolValue) {
    
    this.symbolValue = symbolValue;
    return this;
  }

   /**
   * Specifies the best candidate for the character representation of the detected symbol.
   * @return symbolValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the best candidate for the character representation of the detected symbol.")

  public String getSymbolValue() {
    return symbolValue;
  }


  public void setSymbolValue(String symbolValue) {
    this.symbolValue = symbolValue;
  }


  public MICRSymbolInfo symbolValue2(String symbolValue2) {
    
    this.symbolValue2 = symbolValue2;
    return this;
  }

   /**
   * Specifies the second best candidate for the character representation of the detected symbol.
   * @return symbolValue2
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the second best candidate for the character representation of the detected symbol.")

  public String getSymbolValue2() {
    return symbolValue2;
  }


  public void setSymbolValue2(String symbolValue2) {
    this.symbolValue2 = symbolValue2;
  }


  public MICRSymbolInfo top(Integer top) {
    
    this.top = top;
    return this;
  }

   /**
   * Specifies the top coordinate of the symbol, in pixels.
   * @return top
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the top coordinate of the symbol, in pixels.")

  public Integer getTop() {
    return top;
  }


  public void setTop(Integer top) {
    this.top = top;
  }


  public MICRSymbolInfo left(Integer left) {
    
    this.left = left;
    return this;
  }

   /**
   * Specifies the left coordinate of the symbol, in pixels.
   * @return left
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the left coordinate of the symbol, in pixels.")

  public Integer getLeft() {
    return left;
  }


  public void setLeft(Integer left) {
    this.left = left;
  }


  public MICRSymbolInfo bottom(Integer bottom) {
    
    this.bottom = bottom;
    return this;
  }

   /**
   * Specifies the bottom coordinate of the symbol, in pixels.
   * @return bottom
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the bottom coordinate of the symbol, in pixels.")

  public Integer getBottom() {
    return bottom;
  }


  public void setBottom(Integer bottom) {
    this.bottom = bottom;
  }


  public MICRSymbolInfo right(Integer right) {
    
    this.right = right;
    return this;
  }

   /**
   * Specifies the right coordinate of the symbol, in pixels.
   * @return right
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the right coordinate of the symbol, in pixels.")

  public Integer getRight() {
    return right;
  }


  public void setRight(Integer right) {
    this.right = right;
  }


  public MICRSymbolInfo line(Integer line) {
    
    this.line = line;
    return this;
  }

   /**
   * Specifies the number of the line on which the symbol has been detected.
   * @return line
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the number of the line on which the symbol has been detected.")

  public Integer getLine() {
    return line;
  }


  public void setLine(Integer line) {
    this.line = line;
  }


  public MICRSymbolInfo confidence(Float confidence) {
    
    this.confidence = confidence;
    return this;
  }

   /**
   * Specifies the level of confidence of the best detected symbol candidate.
   * @return confidence
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the level of confidence of the best detected symbol candidate.")

  public Float getConfidence() {
    return confidence;
  }


  public void setConfidence(Float confidence) {
    this.confidence = confidence;
  }


  public MICRSymbolInfo confidence2(Float confidence2) {
    
    this.confidence2 = confidence2;
    return this;
  }

   /**
   * Specifies the level of confidence of the second best detected symbol candidate.
   * @return confidence2
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the level of confidence of the second best detected symbol candidate.")

  public Float getConfidence2() {
    return confidence2;
  }


  public void setConfidence2(Float confidence2) {
    this.confidence2 = confidence2;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MICRSymbolInfo miCRSymbolInfo = (MICRSymbolInfo) o;
    return Objects.equals(this.symbolValue, miCRSymbolInfo.symbolValue) &&
        Objects.equals(this.symbolValue2, miCRSymbolInfo.symbolValue2) &&
        Objects.equals(this.top, miCRSymbolInfo.top) &&
        Objects.equals(this.left, miCRSymbolInfo.left) &&
        Objects.equals(this.bottom, miCRSymbolInfo.bottom) &&
        Objects.equals(this.right, miCRSymbolInfo.right) &&
        Objects.equals(this.line, miCRSymbolInfo.line) &&
        Objects.equals(this.confidence, miCRSymbolInfo.confidence) &&
        Objects.equals(this.confidence2, miCRSymbolInfo.confidence2);
  }

  @Override
  public int hashCode() {
    return Objects.hash(symbolValue, symbolValue2, top, left, bottom, right, line, confidence, confidence2);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MICRSymbolInfo {\n");
    sb.append("    symbolValue: ").append(toIndentedString(symbolValue)).append("\n");
    sb.append("    symbolValue2: ").append(toIndentedString(symbolValue2)).append("\n");
    sb.append("    top: ").append(toIndentedString(top)).append("\n");
    sb.append("    left: ").append(toIndentedString(left)).append("\n");
    sb.append("    bottom: ").append(toIndentedString(bottom)).append("\n");
    sb.append("    right: ").append(toIndentedString(right)).append("\n");
    sb.append("    line: ").append(toIndentedString(line)).append("\n");
    sb.append("    confidence: ").append(toIndentedString(confidence)).append("\n");
    sb.append("    confidence2: ").append(toIndentedString(confidence2)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


/*
 * PassportPDF API
 * Another brick in the cloud
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.FontStyle;
import org.openapitools.client.model.StandardFontName;

/**
 * Represents the basic parameters for text content.
 */
@ApiModel(description = "Represents the basic parameters for text content.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-04-27T13:23:36.328+02:00[Europe/Paris]")
public class PdfTextParameters {
  public static final String SERIALIZED_NAME_TEXT = "Text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public static final String SERIALIZED_NAME_TEXT_COLOR = "TextColor";
  @SerializedName(SERIALIZED_NAME_TEXT_COLOR)
  private String textColor = "black";

  public static final String SERIALIZED_NAME_FONT_NAME = "FontName";
  @SerializedName(SERIALIZED_NAME_FONT_NAME)
  private String fontName;

  public static final String SERIALIZED_NAME_STANDARD_FONT_NAME = "StandardFontName";
  @SerializedName(SERIALIZED_NAME_STANDARD_FONT_NAME)
  private StandardFontName standardFontName;

  public static final String SERIALIZED_NAME_FONT_STYLE = "FontStyle";
  @SerializedName(SERIALIZED_NAME_FONT_STYLE)
  private FontStyle fontStyle;

  public static final String SERIALIZED_NAME_FONT_SIZE = "FontSize";
  @SerializedName(SERIALIZED_NAME_FONT_SIZE)
  private Integer fontSize = 11;


  public PdfTextParameters text(String text) {
    
    this.text = text;
    return this;
  }

   /**
   * Specifies the text.
   * @return text
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the text.")

  public String getText() {
    return text;
  }


  public void setText(String text) {
    this.text = text;
  }


  public PdfTextParameters textColor(String textColor) {
    
    this.textColor = textColor;
    return this;
  }

   /**
   * Specifies the color of the text, using the color name (ie: \&quot;red\&quot;) or its RGBa code (ie: \&quot;rgba(255,0,0,1)\&quot;).
   * @return textColor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the color of the text, using the color name (ie: \"red\") or its RGBa code (ie: \"rgba(255,0,0,1)\").")

  public String getTextColor() {
    return textColor;
  }


  public void setTextColor(String textColor) {
    this.textColor = textColor;
  }


  public PdfTextParameters fontName(String fontName) {
    
    this.fontName = fontName;
    return this;
  }

   /**
   * Specifies the name of the font to be used.
   * @return fontName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the name of the font to be used.")

  public String getFontName() {
    return fontName;
  }


  public void setFontName(String fontName) {
    this.fontName = fontName;
  }


  public PdfTextParameters standardFontName(StandardFontName standardFontName) {
    
    this.standardFontName = standardFontName;
    return this;
  }

   /**
   * Get standardFontName
   * @return standardFontName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public StandardFontName getStandardFontName() {
    return standardFontName;
  }


  public void setStandardFontName(StandardFontName standardFontName) {
    this.standardFontName = standardFontName;
  }


  public PdfTextParameters fontStyle(FontStyle fontStyle) {
    
    this.fontStyle = fontStyle;
    return this;
  }

   /**
   * Get fontStyle
   * @return fontStyle
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public FontStyle getFontStyle() {
    return fontStyle;
  }


  public void setFontStyle(FontStyle fontStyle) {
    this.fontStyle = fontStyle;
  }


  public PdfTextParameters fontSize(Integer fontSize) {
    
    this.fontSize = fontSize;
    return this;
  }

   /**
   * Specifies the size of the font.
   * @return fontSize
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the size of the font.")

  public Integer getFontSize() {
    return fontSize;
  }


  public void setFontSize(Integer fontSize) {
    this.fontSize = fontSize;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PdfTextParameters pdfTextParameters = (PdfTextParameters) o;
    return Objects.equals(this.text, pdfTextParameters.text) &&
        Objects.equals(this.textColor, pdfTextParameters.textColor) &&
        Objects.equals(this.fontName, pdfTextParameters.fontName) &&
        Objects.equals(this.standardFontName, pdfTextParameters.standardFontName) &&
        Objects.equals(this.fontStyle, pdfTextParameters.fontStyle) &&
        Objects.equals(this.fontSize, pdfTextParameters.fontSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(text, textColor, fontName, standardFontName, fontStyle, fontSize);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PdfTextParameters {\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    textColor: ").append(toIndentedString(textColor)).append("\n");
    sb.append("    fontName: ").append(toIndentedString(fontName)).append("\n");
    sb.append("    standardFontName: ").append(toIndentedString(standardFontName)).append("\n");
    sb.append("    fontStyle: ").append(toIndentedString(fontStyle)).append("\n");
    sb.append("    fontSize: ").append(toIndentedString(fontSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


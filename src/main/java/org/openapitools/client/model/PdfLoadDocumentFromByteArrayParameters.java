/*
 * PassportPDF API
 *       Introduction:    PassportPDF API is a REST API that lets you perform complex operations on documents and images easily.  You may consume the API by using our.NET SDK (other platforms / languages are soon to come), or any REST client by sending your requests to the appropriate endpoints.   A list of all the available endpoints can be found on the API reference page at https://passportpdfapi.com/references/api/index.html        Authentication:    Each available operation has a predefined cost, expressed as a number of tokens.  These tokens are deducted from your \"passport,\" which has a unique identifier that acts as an API key. This key is, therefore, required to be provided with each request for the latter to be honored(except if the operation does not have a cost, typically when you request a simple data with a GET).  Your key must be included in the header of the request, under the name \"X-PassportPdf-API-Key.\"  If you are using the.NET SDK, you can either set your key in the ApiKey property of your API instance(PdfApi or ImageApi, for example) or set it globally in the GlobalConfiguration instance if you want to set it once for the whole life cycle of your application.          Communication with the API:    All the available actions are listed on the API reference page, as previously mentioned.  There are several different controllers, i.e., routes, which categorize the actions.For example, you may use the PDF controller(\"/api/pdf\" route) to perform PDF - related operations, and the Image controller(\"/api/image\") for images.  Each action defines what kind of parameters(if any) is expected, and what kind of response is served.Parameters and responses are represented using data models, or \"schemas,\" and are listed in the \"Schemas\" section of the reference.   Parameters and response models of a given action are both prefixed by the controller name, the action name, and \"Parameters\" / \"Response,\" e.g. \"api/pdf/reduce\" respectively receives and serves a PdfReduceParameters and PdfReduceResponse models.  Using the .NET SDK, you will find the objects to interact with the different controllers in the PassportPDF.Api namespace and all the schemas in the PassportPDF.Model namespace.        Processing documents:    Each document manipulation starts with importing the file onto the API.  The LoadDocument action of the PDF controller lets you import your document as a PDF.  Note that the GetPDFImportSupportedFileExtensions action of the same controller will let you know all the different types of files that you may import as a PDF. LoadDocument responds with a JSON-serialized PdfLoadDocumentResponse model, which contains a \"FileId\" property.This identifier is required for the API to know about your document for further manipulations, hence the presence of a \"FileId\" property in the PdfReduceParameters schema (and many other parameters schemas). To download the changes made to a file, you need, of course, to download the new version of the file from the API.  To save your document as a PDF, you will need to use the SaveDocument action of the PDF controller and provide a PdfSaveDocumentParameters data model that contains the identifier of your file.        Errors:    Conventional HTTP response codes are used to indicate the success or failure of an API request.   The Error data model also defines some information about an error that occurred on the API.   Each response model has an Error in its definition, and its sole existence in the serialized response - which should thus always be checked - indicates that something went wrong.  Among the information given by the Error schema, \"ResultCode\" specifies a value of the \"PassportPDFStatus\" enumeration, that defines a first level of error information. \"InternalErrorId\" defines a unique identifier for the error, which comes very handy for us to troubleshoot any issue you may encounter quickly.        Efficiency considerations:    Multipart upload/download is available and lets you directly stream a file to/from the API.  In the PDF controller, LoadDocument/LoadDocumentMultipart and SaveDocument/SaveDocumentToFile may be used to upload/download a document using respectively binary data serialization and streaming multipart HTTP requests.  The second approach should be favored when dealing with large files, as it will be much more efficient in that context.  
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.ContentEncoding;
import org.openapitools.client.model.PdfConformance;
import org.openapitools.client.model.TextAlignment;

/**
 * Represents the parameters for a load document action request.
 */
@ApiModel(description = "Represents the parameters for a load document action request.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-04-10T16:23:29.092+02:00[Europe/Paris]")
public class PdfLoadDocumentFromByteArrayParameters {
  public static final String SERIALIZED_NAME_CONTENT = "Content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private byte[] content;

  public static final String SERIALIZED_NAME_FILE_NAME = "FileName";
  @SerializedName(SERIALIZED_NAME_FILE_NAME)
  private String fileName;

  public static final String SERIALIZED_NAME_PASSWORD = "Password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_CONFORMANCE = "Conformance";
  @SerializedName(SERIALIZED_NAME_CONFORMANCE)
  private PdfConformance conformance;

  public static final String SERIALIZED_NAME_CONTENT_ENCODING = "ContentEncoding";
  @SerializedName(SERIALIZED_NAME_CONTENT_ENCODING)
  private ContentEncoding contentEncoding;

  public static final String SERIALIZED_NAME_ENABLE_COLOR_DETECTION = "EnableColorDetection";
  @SerializedName(SERIALIZED_NAME_ENABLE_COLOR_DETECTION)
  private Boolean enableColorDetection = false;

  public static final String SERIALIZED_NAME_GET_PREVIEW = "GetPreview";
  @SerializedName(SERIALIZED_NAME_GET_PREVIEW)
  private Boolean getPreview = false;

  public static final String SERIALIZED_NAME_THUMBNAIL_WIDTH = "ThumbnailWidth";
  @SerializedName(SERIALIZED_NAME_THUMBNAIL_WIDTH)
  private Integer thumbnailWidth = 140;

  public static final String SERIALIZED_NAME_THUMBNAIL_HEIGHT = "ThumbnailHeight";
  @SerializedName(SERIALIZED_NAME_THUMBNAIL_HEIGHT)
  private Integer thumbnailHeight = 220;

  public static final String SERIALIZED_NAME_THUMBNAIL_BACKGROUND_COLOR = "ThumbnailBackgroundColor";
  @SerializedName(SERIALIZED_NAME_THUMBNAIL_BACKGROUND_COLOR)
  private String thumbnailBackgroundColor = "rgba(0,0,0,0)";

  public static final String SERIALIZED_NAME_THUMBNAIL_FIT_TO_PAGE_SIZE = "ThumbnailFitToPageSize";
  @SerializedName(SERIALIZED_NAME_THUMBNAIL_FIT_TO_PAGE_SIZE)
  private Boolean thumbnailFitToPageSize = true;

  public static final String SERIALIZED_NAME_TXT_PAGE_WIDTH = "TxtPageWidth";
  @SerializedName(SERIALIZED_NAME_TXT_PAGE_WIDTH)
  private Float txtPageWidth = 595f;

  public static final String SERIALIZED_NAME_TXT_PAGE_HEIGHT = "TxtPageHeight";
  @SerializedName(SERIALIZED_NAME_TXT_PAGE_HEIGHT)
  private Float txtPageHeight = 842f;

  public static final String SERIALIZED_NAME_TXT_PAGE_MARGIN_LEFT = "TxtPageMarginLeft";
  @SerializedName(SERIALIZED_NAME_TXT_PAGE_MARGIN_LEFT)
  private Float txtPageMarginLeft = 10f;

  public static final String SERIALIZED_NAME_TXT_PAGE_MARGIN_TOP = "TxtPageMarginTop";
  @SerializedName(SERIALIZED_NAME_TXT_PAGE_MARGIN_TOP)
  private Float txtPageMarginTop = 10f;

  public static final String SERIALIZED_NAME_TXT_PAGE_MARGIN_RIGHT = "TxtPageMarginRight";
  @SerializedName(SERIALIZED_NAME_TXT_PAGE_MARGIN_RIGHT)
  private Float txtPageMarginRight = 10f;

  public static final String SERIALIZED_NAME_TXT_PAGE_MARGIN_BOTTOM = "TxtPageMarginBottom";
  @SerializedName(SERIALIZED_NAME_TXT_PAGE_MARGIN_BOTTOM)
  private Float txtPageMarginBottom = 10f;

  public static final String SERIALIZED_NAME_TXT_HORIZONTAL_TEXT_ALIGNMENT = "TxtHorizontalTextAlignment";
  @SerializedName(SERIALIZED_NAME_TXT_HORIZONTAL_TEXT_ALIGNMENT)
  private TextAlignment txtHorizontalTextAlignment;

  public static final String SERIALIZED_NAME_TXT_FONT_SIZE = "TxtFontSize";
  @SerializedName(SERIALIZED_NAME_TXT_FONT_SIZE)
  private Float txtFontSize = 12f;

  public static final String SERIALIZED_NAME_TXT_FONT_FAMILY = "TxtFontFamily";
  @SerializedName(SERIALIZED_NAME_TXT_FONT_FAMILY)
  private String txtFontFamily = "Arial Unicode MS";

  public static final String SERIALIZED_NAME_TXT_FONT_BOLD = "TxtFontBold";
  @SerializedName(SERIALIZED_NAME_TXT_FONT_BOLD)
  private Boolean txtFontBold = false;

  public static final String SERIALIZED_NAME_TXT_FONT_ITALIC = "TxtFontItalic";
  @SerializedName(SERIALIZED_NAME_TXT_FONT_ITALIC)
  private Boolean txtFontItalic = false;


  public PdfLoadDocumentFromByteArrayParameters content(byte[] content) {
    
    this.content = content;
    return this;
  }

   /**
   * Specifies the data of the document.
   * @return content
  **/
  @ApiModelProperty(required = true, value = "Specifies the data of the document.")

  public byte[] getContent() {
    return content;
  }


  public void setContent(byte[] content) {
    this.content = content;
  }


  public PdfLoadDocumentFromByteArrayParameters fileName(String fileName) {
    
    this.fileName = fileName;
    return this;
  }

   /**
   * Specifies the name of the document.
   * @return fileName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the name of the document.")

  public String getFileName() {
    return fileName;
  }


  public void setFileName(String fileName) {
    this.fileName = fileName;
  }


  public PdfLoadDocumentFromByteArrayParameters password(String password) {
    
    this.password = password;
    return this;
  }

   /**
   * Specifies the password of the document.
   * @return password
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the password of the document.")

  public String getPassword() {
    return password;
  }


  public void setPassword(String password) {
    this.password = password;
  }


  public PdfLoadDocumentFromByteArrayParameters conformance(PdfConformance conformance) {
    
    this.conformance = conformance;
    return this;
  }

   /**
   * Get conformance
   * @return conformance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PdfConformance getConformance() {
    return conformance;
  }


  public void setConformance(PdfConformance conformance) {
    this.conformance = conformance;
  }


  public PdfLoadDocumentFromByteArrayParameters contentEncoding(ContentEncoding contentEncoding) {
    
    this.contentEncoding = contentEncoding;
    return this;
  }

   /**
   * Get contentEncoding
   * @return contentEncoding
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ContentEncoding getContentEncoding() {
    return contentEncoding;
  }


  public void setContentEncoding(ContentEncoding contentEncoding) {
    this.contentEncoding = contentEncoding;
  }


  public PdfLoadDocumentFromByteArrayParameters enableColorDetection(Boolean enableColorDetection) {
    
    this.enableColorDetection = enableColorDetection;
    return this;
  }

   /**
   * Specifies whether color detection must be used while importing a raster format to PDF.
   * @return enableColorDetection
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether color detection must be used while importing a raster format to PDF.")

  public Boolean getEnableColorDetection() {
    return enableColorDetection;
  }


  public void setEnableColorDetection(Boolean enableColorDetection) {
    this.enableColorDetection = enableColorDetection;
  }


  public PdfLoadDocumentFromByteArrayParameters getPreview(Boolean getPreview) {
    
    this.getPreview = getPreview;
    return this;
  }

   /**
   * Specifies whether the response must contain a thumbnail of the first page of the document.
   * @return getPreview
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the response must contain a thumbnail of the first page of the document.")

  public Boolean getGetPreview() {
    return getPreview;
  }


  public void setGetPreview(Boolean getPreview) {
    this.getPreview = getPreview;
  }


  public PdfLoadDocumentFromByteArrayParameters thumbnailWidth(Integer thumbnailWidth) {
    
    this.thumbnailWidth = thumbnailWidth;
    return this;
  }

   /**
   * Specifies, in pixels, the width of the thumbnail to be retrieved. Only applicable if GetPreview has been set to true.
   * @return thumbnailWidth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies, in pixels, the width of the thumbnail to be retrieved. Only applicable if GetPreview has been set to true.")

  public Integer getThumbnailWidth() {
    return thumbnailWidth;
  }


  public void setThumbnailWidth(Integer thumbnailWidth) {
    this.thumbnailWidth = thumbnailWidth;
  }


  public PdfLoadDocumentFromByteArrayParameters thumbnailHeight(Integer thumbnailHeight) {
    
    this.thumbnailHeight = thumbnailHeight;
    return this;
  }

   /**
   * Specifies, in pixels, the height of the thumbnail to be retrieved.  Only applicable if GetPreview has been set to true.
   * @return thumbnailHeight
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies, in pixels, the height of the thumbnail to be retrieved.  Only applicable if GetPreview has been set to true.")

  public Integer getThumbnailHeight() {
    return thumbnailHeight;
  }


  public void setThumbnailHeight(Integer thumbnailHeight) {
    this.thumbnailHeight = thumbnailHeight;
  }


  public PdfLoadDocumentFromByteArrayParameters thumbnailBackgroundColor(String thumbnailBackgroundColor) {
    
    this.thumbnailBackgroundColor = thumbnailBackgroundColor;
    return this;
  }

   /**
   * Specifies the background color of the thumbnail, using the color name (ie: \&quot;red\&quot;) or its RGBa code (ie: \&quot;rgba(255,0,0,1)\&quot;).   Only applicable if GetPreview has been set to true.
   * @return thumbnailBackgroundColor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the background color of the thumbnail, using the color name (ie: \"red\") or its RGBa code (ie: \"rgba(255,0,0,1)\").   Only applicable if GetPreview has been set to true.")

  public String getThumbnailBackgroundColor() {
    return thumbnailBackgroundColor;
  }


  public void setThumbnailBackgroundColor(String thumbnailBackgroundColor) {
    this.thumbnailBackgroundColor = thumbnailBackgroundColor;
  }


  public PdfLoadDocumentFromByteArrayParameters thumbnailFitToPageSize(Boolean thumbnailFitToPageSize) {
    
    this.thumbnailFitToPageSize = thumbnailFitToPageSize;
    return this;
  }

   /**
   * Specifies if the size of the produced thumbnail is automatically adjusted to don&#39;t have any margin.  Only applicable if GetPreview has been set to true.
   * @return thumbnailFitToPageSize
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies if the size of the produced thumbnail is automatically adjusted to don't have any margin.  Only applicable if GetPreview has been set to true.")

  public Boolean getThumbnailFitToPageSize() {
    return thumbnailFitToPageSize;
  }


  public void setThumbnailFitToPageSize(Boolean thumbnailFitToPageSize) {
    this.thumbnailFitToPageSize = thumbnailFitToPageSize;
  }


  public PdfLoadDocumentFromByteArrayParameters txtPageWidth(Float txtPageWidth) {
    
    this.txtPageWidth = txtPageWidth;
    return this;
  }

   /**
   * Specifies the page width, in points, of produced documents from txt files.
   * @return txtPageWidth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the page width, in points, of produced documents from txt files.")

  public Float getTxtPageWidth() {
    return txtPageWidth;
  }


  public void setTxtPageWidth(Float txtPageWidth) {
    this.txtPageWidth = txtPageWidth;
  }


  public PdfLoadDocumentFromByteArrayParameters txtPageHeight(Float txtPageHeight) {
    
    this.txtPageHeight = txtPageHeight;
    return this;
  }

   /**
   * Specifies the page height, in points, of produced documents from txt files.
   * @return txtPageHeight
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the page height, in points, of produced documents from txt files.")

  public Float getTxtPageHeight() {
    return txtPageHeight;
  }


  public void setTxtPageHeight(Float txtPageHeight) {
    this.txtPageHeight = txtPageHeight;
  }


  public PdfLoadDocumentFromByteArrayParameters txtPageMarginLeft(Float txtPageMarginLeft) {
    
    this.txtPageMarginLeft = txtPageMarginLeft;
    return this;
  }

   /**
   * Specifies the page margin left, in points, of produced documents from txt files.
   * @return txtPageMarginLeft
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the page margin left, in points, of produced documents from txt files.")

  public Float getTxtPageMarginLeft() {
    return txtPageMarginLeft;
  }


  public void setTxtPageMarginLeft(Float txtPageMarginLeft) {
    this.txtPageMarginLeft = txtPageMarginLeft;
  }


  public PdfLoadDocumentFromByteArrayParameters txtPageMarginTop(Float txtPageMarginTop) {
    
    this.txtPageMarginTop = txtPageMarginTop;
    return this;
  }

   /**
   * Specifies the page margin top, in points, of produced documents from txt files.
   * @return txtPageMarginTop
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the page margin top, in points, of produced documents from txt files.")

  public Float getTxtPageMarginTop() {
    return txtPageMarginTop;
  }


  public void setTxtPageMarginTop(Float txtPageMarginTop) {
    this.txtPageMarginTop = txtPageMarginTop;
  }


  public PdfLoadDocumentFromByteArrayParameters txtPageMarginRight(Float txtPageMarginRight) {
    
    this.txtPageMarginRight = txtPageMarginRight;
    return this;
  }

   /**
   * Specifies the page margin right, in points, of produced documents from txt files.
   * @return txtPageMarginRight
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the page margin right, in points, of produced documents from txt files.")

  public Float getTxtPageMarginRight() {
    return txtPageMarginRight;
  }


  public void setTxtPageMarginRight(Float txtPageMarginRight) {
    this.txtPageMarginRight = txtPageMarginRight;
  }


  public PdfLoadDocumentFromByteArrayParameters txtPageMarginBottom(Float txtPageMarginBottom) {
    
    this.txtPageMarginBottom = txtPageMarginBottom;
    return this;
  }

   /**
   * Specifies the page margin bottom, in points, of produced documents from txt files.
   * @return txtPageMarginBottom
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the page margin bottom, in points, of produced documents from txt files.")

  public Float getTxtPageMarginBottom() {
    return txtPageMarginBottom;
  }


  public void setTxtPageMarginBottom(Float txtPageMarginBottom) {
    this.txtPageMarginBottom = txtPageMarginBottom;
  }


  public PdfLoadDocumentFromByteArrayParameters txtHorizontalTextAlignment(TextAlignment txtHorizontalTextAlignment) {
    
    this.txtHorizontalTextAlignment = txtHorizontalTextAlignment;
    return this;
  }

   /**
   * Get txtHorizontalTextAlignment
   * @return txtHorizontalTextAlignment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TextAlignment getTxtHorizontalTextAlignment() {
    return txtHorizontalTextAlignment;
  }


  public void setTxtHorizontalTextAlignment(TextAlignment txtHorizontalTextAlignment) {
    this.txtHorizontalTextAlignment = txtHorizontalTextAlignment;
  }


  public PdfLoadDocumentFromByteArrayParameters txtFontSize(Float txtFontSize) {
    
    this.txtFontSize = txtFontSize;
    return this;
  }

   /**
   * Specifies the text size, in points, to be used for producing documents from txt files.
   * @return txtFontSize
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the text size, in points, to be used for producing documents from txt files.")

  public Float getTxtFontSize() {
    return txtFontSize;
  }


  public void setTxtFontSize(Float txtFontSize) {
    this.txtFontSize = txtFontSize;
  }


  public PdfLoadDocumentFromByteArrayParameters txtFontFamily(String txtFontFamily) {
    
    this.txtFontFamily = txtFontFamily;
    return this;
  }

   /**
   * Specifies the name of the font to be used for producing documents from txt files.
   * @return txtFontFamily
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the name of the font to be used for producing documents from txt files.")

  public String getTxtFontFamily() {
    return txtFontFamily;
  }


  public void setTxtFontFamily(String txtFontFamily) {
    this.txtFontFamily = txtFontFamily;
  }


  public PdfLoadDocumentFromByteArrayParameters txtFontBold(Boolean txtFontBold) {
    
    this.txtFontBold = txtFontBold;
    return this;
  }

   /**
   * Specifies whether the font to be used for producing documents from txt files must have a bold style.
   * @return txtFontBold
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the font to be used for producing documents from txt files must have a bold style.")

  public Boolean getTxtFontBold() {
    return txtFontBold;
  }


  public void setTxtFontBold(Boolean txtFontBold) {
    this.txtFontBold = txtFontBold;
  }


  public PdfLoadDocumentFromByteArrayParameters txtFontItalic(Boolean txtFontItalic) {
    
    this.txtFontItalic = txtFontItalic;
    return this;
  }

   /**
   * Specifies whether the font to be used for producing documents from txt files must have an italic style.
   * @return txtFontItalic
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the font to be used for producing documents from txt files must have an italic style.")

  public Boolean getTxtFontItalic() {
    return txtFontItalic;
  }


  public void setTxtFontItalic(Boolean txtFontItalic) {
    this.txtFontItalic = txtFontItalic;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PdfLoadDocumentFromByteArrayParameters pdfLoadDocumentFromByteArrayParameters = (PdfLoadDocumentFromByteArrayParameters) o;
    return Arrays.equals(this.content, pdfLoadDocumentFromByteArrayParameters.content) &&
        Objects.equals(this.fileName, pdfLoadDocumentFromByteArrayParameters.fileName) &&
        Objects.equals(this.password, pdfLoadDocumentFromByteArrayParameters.password) &&
        Objects.equals(this.conformance, pdfLoadDocumentFromByteArrayParameters.conformance) &&
        Objects.equals(this.contentEncoding, pdfLoadDocumentFromByteArrayParameters.contentEncoding) &&
        Objects.equals(this.enableColorDetection, pdfLoadDocumentFromByteArrayParameters.enableColorDetection) &&
        Objects.equals(this.getPreview, pdfLoadDocumentFromByteArrayParameters.getPreview) &&
        Objects.equals(this.thumbnailWidth, pdfLoadDocumentFromByteArrayParameters.thumbnailWidth) &&
        Objects.equals(this.thumbnailHeight, pdfLoadDocumentFromByteArrayParameters.thumbnailHeight) &&
        Objects.equals(this.thumbnailBackgroundColor, pdfLoadDocumentFromByteArrayParameters.thumbnailBackgroundColor) &&
        Objects.equals(this.thumbnailFitToPageSize, pdfLoadDocumentFromByteArrayParameters.thumbnailFitToPageSize) &&
        Objects.equals(this.txtPageWidth, pdfLoadDocumentFromByteArrayParameters.txtPageWidth) &&
        Objects.equals(this.txtPageHeight, pdfLoadDocumentFromByteArrayParameters.txtPageHeight) &&
        Objects.equals(this.txtPageMarginLeft, pdfLoadDocumentFromByteArrayParameters.txtPageMarginLeft) &&
        Objects.equals(this.txtPageMarginTop, pdfLoadDocumentFromByteArrayParameters.txtPageMarginTop) &&
        Objects.equals(this.txtPageMarginRight, pdfLoadDocumentFromByteArrayParameters.txtPageMarginRight) &&
        Objects.equals(this.txtPageMarginBottom, pdfLoadDocumentFromByteArrayParameters.txtPageMarginBottom) &&
        Objects.equals(this.txtHorizontalTextAlignment, pdfLoadDocumentFromByteArrayParameters.txtHorizontalTextAlignment) &&
        Objects.equals(this.txtFontSize, pdfLoadDocumentFromByteArrayParameters.txtFontSize) &&
        Objects.equals(this.txtFontFamily, pdfLoadDocumentFromByteArrayParameters.txtFontFamily) &&
        Objects.equals(this.txtFontBold, pdfLoadDocumentFromByteArrayParameters.txtFontBold) &&
        Objects.equals(this.txtFontItalic, pdfLoadDocumentFromByteArrayParameters.txtFontItalic);
  }

  @Override
  public int hashCode() {
    return Objects.hash(Arrays.hashCode(content), fileName, password, conformance, contentEncoding, enableColorDetection, getPreview, thumbnailWidth, thumbnailHeight, thumbnailBackgroundColor, thumbnailFitToPageSize, txtPageWidth, txtPageHeight, txtPageMarginLeft, txtPageMarginTop, txtPageMarginRight, txtPageMarginBottom, txtHorizontalTextAlignment, txtFontSize, txtFontFamily, txtFontBold, txtFontItalic);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PdfLoadDocumentFromByteArrayParameters {\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    fileName: ").append(toIndentedString(fileName)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    conformance: ").append(toIndentedString(conformance)).append("\n");
    sb.append("    contentEncoding: ").append(toIndentedString(contentEncoding)).append("\n");
    sb.append("    enableColorDetection: ").append(toIndentedString(enableColorDetection)).append("\n");
    sb.append("    getPreview: ").append(toIndentedString(getPreview)).append("\n");
    sb.append("    thumbnailWidth: ").append(toIndentedString(thumbnailWidth)).append("\n");
    sb.append("    thumbnailHeight: ").append(toIndentedString(thumbnailHeight)).append("\n");
    sb.append("    thumbnailBackgroundColor: ").append(toIndentedString(thumbnailBackgroundColor)).append("\n");
    sb.append("    thumbnailFitToPageSize: ").append(toIndentedString(thumbnailFitToPageSize)).append("\n");
    sb.append("    txtPageWidth: ").append(toIndentedString(txtPageWidth)).append("\n");
    sb.append("    txtPageHeight: ").append(toIndentedString(txtPageHeight)).append("\n");
    sb.append("    txtPageMarginLeft: ").append(toIndentedString(txtPageMarginLeft)).append("\n");
    sb.append("    txtPageMarginTop: ").append(toIndentedString(txtPageMarginTop)).append("\n");
    sb.append("    txtPageMarginRight: ").append(toIndentedString(txtPageMarginRight)).append("\n");
    sb.append("    txtPageMarginBottom: ").append(toIndentedString(txtPageMarginBottom)).append("\n");
    sb.append("    txtHorizontalTextAlignment: ").append(toIndentedString(txtHorizontalTextAlignment)).append("\n");
    sb.append("    txtFontSize: ").append(toIndentedString(txtFontSize)).append("\n");
    sb.append("    txtFontFamily: ").append(toIndentedString(txtFontFamily)).append("\n");
    sb.append("    txtFontBold: ").append(toIndentedString(txtFontBold)).append("\n");
    sb.append("    txtFontItalic: ").append(toIndentedString(txtFontItalic)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


/*
 * PassportPDF API
 * Another brick in the cloud
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import io.swagger.annotations.ApiModel;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Specifies a PDF version for a reduced document.
 */
@JsonAdapter(PdfVersion.Adapter.class)
public enum PdfVersion {
  
  PDFVERSIONRETAINEXISTING("PdfVersionRetainExisting"),
  
  PDFVERSION14("PdfVersion14"),
  
  PDFVERSION15("PdfVersion15"),
  
  PDFVERSION16("PdfVersion16"),
  
  PDFVERSION17("PdfVersion17"),
  
  PDFVERSIONA1A("PdfVersionA1a"),
  
  PDFVERSIONA1B("PdfVersionA1b"),
  
  PDFVERSIONA2A("PdfVersionA2a"),
  
  PDFVERSIONA2B("PdfVersionA2b");

  private String value;

  PdfVersion(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static PdfVersion fromValue(String value) {
    for (PdfVersion b : PdfVersion.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<PdfVersion> {
    @Override
    public void write(final JsonWriter jsonWriter, final PdfVersion enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public PdfVersion read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return PdfVersion.fromValue(value);
    }
  }
}


/*
 * PassportPDF API
 * Another brick in the cloud
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import io.swagger.annotations.ApiModel;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Specifies the format of a document.
 */
@JsonAdapter(DocumentFormat.Adapter.class)
public enum DocumentFormat {
  
  UNKNOWN("UNKNOWN"),
  
  ICO("ICO"),
  
  BMP("BMP"),
  
  WBMP("WBMP"),
  
  JPEG("JPEG"),
  
  GIF("GIF"),
  
  PNG("PNG"),
  
  TIFF("TIFF"),
  
  FAXG3("FAXG3"),
  
  EXIF("EXIF"),
  
  EMF("EMF"),
  
  WMF("WMF"),
  
  JNG("JNG"),
  
  KOALA("KOALA"),
  
  IFF("IFF"),
  
  MNG("MNG"),
  
  PCD("PCD"),
  
  PCX("PCX"),
  
  PBM("PBM"),
  
  PBMRAW("PBMRAW"),
  
  PFM("PFM"),
  
  PGM("PGM"),
  
  PGMRAW("PGMRAW"),
  
  PPM("PPM"),
  
  PPMRAW("PPMRAW"),
  
  RAS("RAS"),
  
  TARGA("TARGA"),
  
  PSD("PSD"),
  
  CUT("CUT"),
  
  XBM("XBM"),
  
  XPM("XPM"),
  
  DDS("DDS"),
  
  HDR("HDR"),
  
  SGI("SGI"),
  
  EXR("EXR"),
  
  J2K("J2K"),
  
  JP2("JP2"),
  
  PICT("PICT"),
  
  RAW("RAW"),
  
  WEBP("WEBP"),
  
  DICOM("DICOM"),
  
  JBIG("JBIG"),
  
  JBIG2("JBIG2"),
  
  WSQ("WSQ"),
  
  PDF("PDF"),
  
  SVG("SVG"),
  
  TXT("TXT"),
  
  DOCX("DOCX"),
  
  RTF("RTF"),
  
  DXF("DXF"),
  
  ODT("ODT"),
  
  XLSX("XLSX"),
  
  PPTX("PPTX");

  private String value;

  DocumentFormat(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static DocumentFormat fromValue(String value) {
    for (DocumentFormat b : DocumentFormat.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<DocumentFormat> {
    @Override
    public void write(final JsonWriter jsonWriter, final DocumentFormat enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public DocumentFormat read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return DocumentFormat.fromValue(value);
    }
  }
}


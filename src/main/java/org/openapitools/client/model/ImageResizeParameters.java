/*
 * PassportPDF API
 *       Introduction:    PassportPDF API is a REST API that lets you perform complex operations on documents and images easily.  You may consume the API by using our.NET SDK (other platforms / languages are soon to come), or any REST client by sending your requests to the appropriate endpoints.   A list of all the available endpoints can be found on the API reference page at https://passportpdfapi.com/references/api/index.html        Authentication:    Each available operation has a predefined cost, expressed as a number of tokens.  These tokens are deducted from your \"passport,\" which has a unique identifier that acts as an API key. This key is, therefore, required to be provided with each request for the latter to be honored(except if the operation does not have a cost, typically when you request a simple data with a GET).  Your key must be included in the header of the request, under the name \"X-PassportPdf-API-Key.\"  If you are using the.NET SDK, you can either set your key in the ApiKey property of your API instance(PdfApi or ImageApi, for example) or set it globally in the GlobalConfiguration instance if you want to set it once for the whole life cycle of your application.          Communication with the API:    All the available actions are listed on the API reference page, as previously mentioned.  There are several different controllers, i.e., routes, which categorize the actions.For example, you may use the PDF controller(\"/api/pdf\" route) to perform PDF - related operations, and the Image controller(\"/api/image\") for images.  Each action defines what kind of parameters(if any) is expected, and what kind of response is served.Parameters and responses are represented using data models, or \"schemas,\" and are listed in the \"Schemas\" section of the reference.   Parameters and response models of a given action are both prefixed by the controller name, the action name, and \"Parameters\" / \"Response,\" e.g. \"api/pdf/reduce\" respectively receives and serves a PdfReduceParameters and PdfReduceResponse models.  Using the .NET SDK, you will find the objects to interact with the different controllers in the PassportPDF.Api namespace and all the schemas in the PassportPDF.Model namespace.        Processing documents:    Each document manipulation starts with importing the file onto the API.  The LoadDocument action of the PDF controller lets you import your document as a PDF.  Note that the GetPDFImportSupportedFileExtensions action of the same controller will let you know all the different types of files that you may import as a PDF. LoadDocument responds with a JSON-serialized PdfLoadDocumentResponse model, which contains a \"FileId\" property.This identifier is required for the API to know about your document for further manipulations, hence the presence of a \"FileId\" property in the PdfReduceParameters schema (and many other parameters schemas). To download the changes made to a file, you need, of course, to download the new version of the file from the API.  To save your document as a PDF, you will need to use the SaveDocument action of the PDF controller and provide a PdfSaveDocumentParameters data model that contains the identifier of your file.        Errors:    Conventional HTTP response codes are used to indicate the success or failure of an API request.   The Error data model also defines some information about an error that occurred on the API.   Each response model has an Error in its definition, and its sole existence in the serialized response - which should thus always be checked - indicates that something went wrong.  Among the information given by the Error schema, \"ResultCode\" specifies a value of the \"PassportPDFStatus\" enumeration, that defines a first level of error information. \"InternalErrorId\" defines a unique identifier for the error, which comes very handy for us to troubleshoot any issue you may encounter quickly.        Efficiency considerations:    Multipart upload/download is available and lets you directly stream a file to/from the API.  In the PDF controller, LoadDocument/LoadDocumentMultipart and SaveDocument/SaveDocumentToFile may be used to upload/download a document using respectively binary data serialization and streaming multipart HTTP requests.  The second approach should be favored when dealing with large files, as it will be much more efficient in that context.  
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.ResizeMode;
import org.openapitools.client.model.ResizeUnit;

/**
 * Represents the parameters for an image resize action.
 */
@ApiModel(description = "Represents the parameters for an image resize action.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-04-10T16:23:29.092+02:00[Europe/Paris]")
public class ImageResizeParameters {
  public static final String SERIALIZED_NAME_FILE_ID = "FileId";
  @SerializedName(SERIALIZED_NAME_FILE_ID)
  private String fileId;

  public static final String SERIALIZED_NAME_PAGE_RANGE = "PageRange";
  @SerializedName(SERIALIZED_NAME_PAGE_RANGE)
  private String pageRange;

  public static final String SERIALIZED_NAME_RESIZE_HORIZONTAL = "ResizeHorizontal";
  @SerializedName(SERIALIZED_NAME_RESIZE_HORIZONTAL)
  private Float resizeHorizontal;

  public static final String SERIALIZED_NAME_RESIZE_VERTICAL = "ResizeVertical";
  @SerializedName(SERIALIZED_NAME_RESIZE_VERTICAL)
  private Float resizeVertical;

  public static final String SERIALIZED_NAME_RESIZE_MODE = "ResizeMode";
  @SerializedName(SERIALIZED_NAME_RESIZE_MODE)
  private ResizeMode resizeMode;

  public static final String SERIALIZED_NAME_RESIZE_UNIT = "ResizeUnit";
  @SerializedName(SERIALIZED_NAME_RESIZE_UNIT)
  private ResizeUnit resizeUnit;


  public ImageResizeParameters fileId(String fileId) {
    
    this.fileId = fileId;
    return this;
  }

   /**
   * The identifier of the previously uploaded file to be processed.
   * @return fileId
  **/
  @ApiModelProperty(required = true, value = "The identifier of the previously uploaded file to be processed.")

  public String getFileId() {
    return fileId;
  }


  public void setFileId(String fileId) {
    this.fileId = fileId;
  }


  public ImageResizeParameters pageRange(String pageRange) {
    
    this.pageRange = pageRange;
    return this;
  }

   /**
   * Specifies the number of the page, or the range of pages to resize.
   * @return pageRange
  **/
  @ApiModelProperty(required = true, value = "Specifies the number of the page, or the range of pages to resize.")

  public String getPageRange() {
    return pageRange;
  }


  public void setPageRange(String pageRange) {
    this.pageRange = pageRange;
  }


  public ImageResizeParameters resizeHorizontal(Float resizeHorizontal) {
    
    this.resizeHorizontal = resizeHorizontal;
    return this;
  }

   /**
   * Specifies the resize horizontal parameter.
   * @return resizeHorizontal
  **/
  @ApiModelProperty(required = true, value = "Specifies the resize horizontal parameter.")

  public Float getResizeHorizontal() {
    return resizeHorizontal;
  }


  public void setResizeHorizontal(Float resizeHorizontal) {
    this.resizeHorizontal = resizeHorizontal;
  }


  public ImageResizeParameters resizeVertical(Float resizeVertical) {
    
    this.resizeVertical = resizeVertical;
    return this;
  }

   /**
   * Specifies the resize vertical parameter.
   * @return resizeVertical
  **/
  @ApiModelProperty(required = true, value = "Specifies the resize vertical parameter.")

  public Float getResizeVertical() {
    return resizeVertical;
  }


  public void setResizeVertical(Float resizeVertical) {
    this.resizeVertical = resizeVertical;
  }


  public ImageResizeParameters resizeMode(ResizeMode resizeMode) {
    
    this.resizeMode = resizeMode;
    return this;
  }

   /**
   * Get resizeMode
   * @return resizeMode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ResizeMode getResizeMode() {
    return resizeMode;
  }


  public void setResizeMode(ResizeMode resizeMode) {
    this.resizeMode = resizeMode;
  }


  public ImageResizeParameters resizeUnit(ResizeUnit resizeUnit) {
    
    this.resizeUnit = resizeUnit;
    return this;
  }

   /**
   * Get resizeUnit
   * @return resizeUnit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ResizeUnit getResizeUnit() {
    return resizeUnit;
  }


  public void setResizeUnit(ResizeUnit resizeUnit) {
    this.resizeUnit = resizeUnit;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImageResizeParameters imageResizeParameters = (ImageResizeParameters) o;
    return Objects.equals(this.fileId, imageResizeParameters.fileId) &&
        Objects.equals(this.pageRange, imageResizeParameters.pageRange) &&
        Objects.equals(this.resizeHorizontal, imageResizeParameters.resizeHorizontal) &&
        Objects.equals(this.resizeVertical, imageResizeParameters.resizeVertical) &&
        Objects.equals(this.resizeMode, imageResizeParameters.resizeMode) &&
        Objects.equals(this.resizeUnit, imageResizeParameters.resizeUnit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fileId, pageRange, resizeHorizontal, resizeVertical, resizeMode, resizeUnit);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImageResizeParameters {\n");
    sb.append("    fileId: ").append(toIndentedString(fileId)).append("\n");
    sb.append("    pageRange: ").append(toIndentedString(pageRange)).append("\n");
    sb.append("    resizeHorizontal: ").append(toIndentedString(resizeHorizontal)).append("\n");
    sb.append("    resizeVertical: ").append(toIndentedString(resizeVertical)).append("\n");
    sb.append("    resizeMode: ").append(toIndentedString(resizeMode)).append("\n");
    sb.append("    resizeUnit: ").append(toIndentedString(resizeUnit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


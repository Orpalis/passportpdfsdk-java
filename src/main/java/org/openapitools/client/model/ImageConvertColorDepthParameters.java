/*
 * PassportPDF API
 * Another brick in the cloud
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.ColorDepthConversionMethod;

/**
 * Represents the parameters for an image color depth change action.
 */
@ApiModel(description = "Represents the parameters for an image color depth change action.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-04-27T13:23:36.328+02:00[Europe/Paris]")
public class ImageConvertColorDepthParameters {
  public static final String SERIALIZED_NAME_FILE_ID = "FileId";
  @SerializedName(SERIALIZED_NAME_FILE_ID)
  private String fileId;

  public static final String SERIALIZED_NAME_PAGE_RANGE = "PageRange";
  @SerializedName(SERIALIZED_NAME_PAGE_RANGE)
  private String pageRange;

  public static final String SERIALIZED_NAME_CONVERT_COLOR_DEPTH_MODE = "ConvertColorDepthMode";
  @SerializedName(SERIALIZED_NAME_CONVERT_COLOR_DEPTH_MODE)
  private ColorDepthConversionMethod convertColorDepthMode;

  public static final String SERIALIZED_NAME_DEPTH1_BPP_OTSU_THRESHOLD = "Depth1BppOtsuThreshold";
  @SerializedName(SERIALIZED_NAME_DEPTH1_BPP_OTSU_THRESHOLD)
  private Integer depth1BppOtsuThreshold = 50;

  public static final String SERIALIZED_NAME_DEPTH1_BPP_BRADLEY_THRESHOLD = "Depth1BppBradleyThreshold";
  @SerializedName(SERIALIZED_NAME_DEPTH1_BPP_BRADLEY_THRESHOLD)
  private Integer depth1BppBradleyThreshold = 38;

  public static final String SERIALIZED_NAME_DEPTH1_BPP_SAUVOLA_FACTOR = "Depth1BppSauvolaFactor";
  @SerializedName(SERIALIZED_NAME_DEPTH1_BPP_SAUVOLA_FACTOR)
  private Float depth1BppSauvolaFactor = 0.35f;


  public ImageConvertColorDepthParameters fileId(String fileId) {
    
    this.fileId = fileId;
    return this;
  }

   /**
   * The identifier of the previously uploaded file to be processed.
   * @return fileId
  **/
  @ApiModelProperty(required = true, value = "The identifier of the previously uploaded file to be processed.")

  public String getFileId() {
    return fileId;
  }


  public void setFileId(String fileId) {
    this.fileId = fileId;
  }


  public ImageConvertColorDepthParameters pageRange(String pageRange) {
    
    this.pageRange = pageRange;
    return this;
  }

   /**
   * Specifies the number of the page, or the range of pages to process.
   * @return pageRange
  **/
  @ApiModelProperty(required = true, value = "Specifies the number of the page, or the range of pages to process.")

  public String getPageRange() {
    return pageRange;
  }


  public void setPageRange(String pageRange) {
    this.pageRange = pageRange;
  }


  public ImageConvertColorDepthParameters convertColorDepthMode(ColorDepthConversionMethod convertColorDepthMode) {
    
    this.convertColorDepthMode = convertColorDepthMode;
    return this;
  }

   /**
   * Get convertColorDepthMode
   * @return convertColorDepthMode
  **/
  @ApiModelProperty(required = true, value = "")

  public ColorDepthConversionMethod getConvertColorDepthMode() {
    return convertColorDepthMode;
  }


  public void setConvertColorDepthMode(ColorDepthConversionMethod convertColorDepthMode) {
    this.convertColorDepthMode = convertColorDepthMode;
  }


  public ImageConvertColorDepthParameters depth1BppOtsuThreshold(Integer depth1BppOtsuThreshold) {
    
    this.depth1BppOtsuThreshold = depth1BppOtsuThreshold;
    return this;
  }

   /**
   * Specifies the threshold for a conversion using the Depth1BppOtsu method.
   * @return depth1BppOtsuThreshold
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the threshold for a conversion using the Depth1BppOtsu method.")

  public Integer getDepth1BppOtsuThreshold() {
    return depth1BppOtsuThreshold;
  }


  public void setDepth1BppOtsuThreshold(Integer depth1BppOtsuThreshold) {
    this.depth1BppOtsuThreshold = depth1BppOtsuThreshold;
  }


  public ImageConvertColorDepthParameters depth1BppBradleyThreshold(Integer depth1BppBradleyThreshold) {
    
    this.depth1BppBradleyThreshold = depth1BppBradleyThreshold;
    return this;
  }

   /**
   * Specifies the threshold for a conversion using the Depth1BppBradley method.
   * @return depth1BppBradleyThreshold
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the threshold for a conversion using the Depth1BppBradley method.")

  public Integer getDepth1BppBradleyThreshold() {
    return depth1BppBradleyThreshold;
  }


  public void setDepth1BppBradleyThreshold(Integer depth1BppBradleyThreshold) {
    this.depth1BppBradleyThreshold = depth1BppBradleyThreshold;
  }


  public ImageConvertColorDepthParameters depth1BppSauvolaFactor(Float depth1BppSauvolaFactor) {
    
    this.depth1BppSauvolaFactor = depth1BppSauvolaFactor;
    return this;
  }

   /**
   * Specifies the factor for a conversion using the Depth1BppSauvola method.
   * @return depth1BppSauvolaFactor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the factor for a conversion using the Depth1BppSauvola method.")

  public Float getDepth1BppSauvolaFactor() {
    return depth1BppSauvolaFactor;
  }


  public void setDepth1BppSauvolaFactor(Float depth1BppSauvolaFactor) {
    this.depth1BppSauvolaFactor = depth1BppSauvolaFactor;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImageConvertColorDepthParameters imageConvertColorDepthParameters = (ImageConvertColorDepthParameters) o;
    return Objects.equals(this.fileId, imageConvertColorDepthParameters.fileId) &&
        Objects.equals(this.pageRange, imageConvertColorDepthParameters.pageRange) &&
        Objects.equals(this.convertColorDepthMode, imageConvertColorDepthParameters.convertColorDepthMode) &&
        Objects.equals(this.depth1BppOtsuThreshold, imageConvertColorDepthParameters.depth1BppOtsuThreshold) &&
        Objects.equals(this.depth1BppBradleyThreshold, imageConvertColorDepthParameters.depth1BppBradleyThreshold) &&
        Objects.equals(this.depth1BppSauvolaFactor, imageConvertColorDepthParameters.depth1BppSauvolaFactor);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fileId, pageRange, convertColorDepthMode, depth1BppOtsuThreshold, depth1BppBradleyThreshold, depth1BppSauvolaFactor);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImageConvertColorDepthParameters {\n");
    sb.append("    fileId: ").append(toIndentedString(fileId)).append("\n");
    sb.append("    pageRange: ").append(toIndentedString(pageRange)).append("\n");
    sb.append("    convertColorDepthMode: ").append(toIndentedString(convertColorDepthMode)).append("\n");
    sb.append("    depth1BppOtsuThreshold: ").append(toIndentedString(depth1BppOtsuThreshold)).append("\n");
    sb.append("    depth1BppBradleyThreshold: ").append(toIndentedString(depth1BppBradleyThreshold)).append("\n");
    sb.append("    depth1BppSauvolaFactor: ").append(toIndentedString(depth1BppSauvolaFactor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


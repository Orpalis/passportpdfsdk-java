/*
 * PassportPDF API
 * Another brick in the cloud
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Represents the parameters for a rotate page standard action.
 */
@ApiModel(description = "Represents the parameters for a rotate page standard action.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-04-27T13:23:36.328+02:00[Europe/Paris]")
public class PdfRotatePageStandardParameters {
  public static final String SERIALIZED_NAME_FILE_ID = "FileId";
  @SerializedName(SERIALIZED_NAME_FILE_ID)
  private String fileId;

  public static final String SERIALIZED_NAME_PAGE_RANGE = "PageRange";
  @SerializedName(SERIALIZED_NAME_PAGE_RANGE)
  private String pageRange;

  public static final String SERIALIZED_NAME_ROTATION_ANGLE = "RotationAngle";
  @SerializedName(SERIALIZED_NAME_ROTATION_ANGLE)
  private Integer rotationAngle;

  public static final String SERIALIZED_NAME_FLIP_HORIZONTALLY = "FlipHorizontally";
  @SerializedName(SERIALIZED_NAME_FLIP_HORIZONTALLY)
  private Boolean flipHorizontally = false;

  public static final String SERIALIZED_NAME_FLIP_VERTICALLY = "FlipVertically";
  @SerializedName(SERIALIZED_NAME_FLIP_VERTICALLY)
  private Boolean flipVertically = false;


  public PdfRotatePageStandardParameters fileId(String fileId) {
    
    this.fileId = fileId;
    return this;
  }

   /**
   * The identifier of the previously uploaded file to be processed.
   * @return fileId
  **/
  @ApiModelProperty(required = true, value = "The identifier of the previously uploaded file to be processed.")

  public String getFileId() {
    return fileId;
  }


  public void setFileId(String fileId) {
    this.fileId = fileId;
  }


  public PdfRotatePageStandardParameters pageRange(String pageRange) {
    
    this.pageRange = pageRange;
    return this;
  }

   /**
   * Specifies the number of the page, or the range of pages to be rotated.  You can specify different page rotations using such pattern: Page Range &#x3D; \&quot;M:1:90;2:270\&quot;. In this example, a rotation of 90 degrees will be applied to the page 1 and 270 degrees to the page 2.
   * @return pageRange
  **/
  @ApiModelProperty(required = true, value = "Specifies the number of the page, or the range of pages to be rotated.  You can specify different page rotations using such pattern: Page Range = \"M:1:90;2:270\". In this example, a rotation of 90 degrees will be applied to the page 1 and 270 degrees to the page 2.")

  public String getPageRange() {
    return pageRange;
  }


  public void setPageRange(String pageRange) {
    this.pageRange = pageRange;
  }


  public PdfRotatePageStandardParameters rotationAngle(Integer rotationAngle) {
    
    this.rotationAngle = rotationAngle;
    return this;
  }

   /**
   * Specifies the rotation angle, clockwise in degrees, which can be either positive and negative and any multiple of 90.  Use 0 in case of special pattern usage for the PageRange property.
   * @return rotationAngle
  **/
  @ApiModelProperty(required = true, value = "Specifies the rotation angle, clockwise in degrees, which can be either positive and negative and any multiple of 90.  Use 0 in case of special pattern usage for the PageRange property.")

  public Integer getRotationAngle() {
    return rotationAngle;
  }


  public void setRotationAngle(Integer rotationAngle) {
    this.rotationAngle = rotationAngle;
  }


  public PdfRotatePageStandardParameters flipHorizontally(Boolean flipHorizontally) {
    
    this.flipHorizontally = flipHorizontally;
    return this;
  }

   /**
   * Specifies whether the page(s) shall be flipped horizontally.  This parameter is ignored if PageRange start with \&quot;M:\&quot;.
   * @return flipHorizontally
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the page(s) shall be flipped horizontally.  This parameter is ignored if PageRange start with \"M:\".")

  public Boolean getFlipHorizontally() {
    return flipHorizontally;
  }


  public void setFlipHorizontally(Boolean flipHorizontally) {
    this.flipHorizontally = flipHorizontally;
  }


  public PdfRotatePageStandardParameters flipVertically(Boolean flipVertically) {
    
    this.flipVertically = flipVertically;
    return this;
  }

   /**
   * Specifies whether the page(s) shall be flipped vertically.  This parameter is ignored if PageRange start with \&quot;M:\&quot;.
   * @return flipVertically
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies whether the page(s) shall be flipped vertically.  This parameter is ignored if PageRange start with \"M:\".")

  public Boolean getFlipVertically() {
    return flipVertically;
  }


  public void setFlipVertically(Boolean flipVertically) {
    this.flipVertically = flipVertically;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PdfRotatePageStandardParameters pdfRotatePageStandardParameters = (PdfRotatePageStandardParameters) o;
    return Objects.equals(this.fileId, pdfRotatePageStandardParameters.fileId) &&
        Objects.equals(this.pageRange, pdfRotatePageStandardParameters.pageRange) &&
        Objects.equals(this.rotationAngle, pdfRotatePageStandardParameters.rotationAngle) &&
        Objects.equals(this.flipHorizontally, pdfRotatePageStandardParameters.flipHorizontally) &&
        Objects.equals(this.flipVertically, pdfRotatePageStandardParameters.flipVertically);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fileId, pageRange, rotationAngle, flipHorizontally, flipVertically);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PdfRotatePageStandardParameters {\n");
    sb.append("    fileId: ").append(toIndentedString(fileId)).append("\n");
    sb.append("    pageRange: ").append(toIndentedString(pageRange)).append("\n");
    sb.append("    rotationAngle: ").append(toIndentedString(rotationAngle)).append("\n");
    sb.append("    flipHorizontally: ").append(toIndentedString(flipHorizontally)).append("\n");
    sb.append("    flipVertically: ").append(toIndentedString(flipVertically)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


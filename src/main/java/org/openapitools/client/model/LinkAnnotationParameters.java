/*
 * PassportPDF API
 * Another brick in the cloud
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.DrawableContentLayoutParameters;
import org.openapitools.client.model.LinkAnnotationType;

/**
 * Represents information about the Link Annotation.
 */
@ApiModel(description = "Represents information about the Link Annotation.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-04-27T13:23:36.328+02:00[Europe/Paris]")
public class LinkAnnotationParameters {
  public static final String SERIALIZED_NAME_ANNOTATION_LAYOUT = "AnnotationLayout";
  @SerializedName(SERIALIZED_NAME_ANNOTATION_LAYOUT)
  private DrawableContentLayoutParameters annotationLayout;

  public static final String SERIALIZED_NAME_LINK_TYPE = "LinkType";
  @SerializedName(SERIALIZED_NAME_LINK_TYPE)
  private LinkAnnotationType linkType;

  public static final String SERIALIZED_NAME_LINK_PAGE = "LinkPage";
  @SerializedName(SERIALIZED_NAME_LINK_PAGE)
  private Integer linkPage;

  public static final String SERIALIZED_NAME_LINK_URI = "LinkUri";
  @SerializedName(SERIALIZED_NAME_LINK_URI)
  private String linkUri;

  public static final String SERIALIZED_NAME_SHOW_BORDER = "ShowBorder";
  @SerializedName(SERIALIZED_NAME_SHOW_BORDER)
  private Boolean showBorder;

  public static final String SERIALIZED_NAME_COLOR = "Color";
  @SerializedName(SERIALIZED_NAME_COLOR)
  private String color = "red";


  public LinkAnnotationParameters annotationLayout(DrawableContentLayoutParameters annotationLayout) {
    
    this.annotationLayout = annotationLayout;
    return this;
  }

   /**
   * Get annotationLayout
   * @return annotationLayout
  **/
  @ApiModelProperty(required = true, value = "")

  public DrawableContentLayoutParameters getAnnotationLayout() {
    return annotationLayout;
  }


  public void setAnnotationLayout(DrawableContentLayoutParameters annotationLayout) {
    this.annotationLayout = annotationLayout;
  }


  public LinkAnnotationParameters linkType(LinkAnnotationType linkType) {
    
    this.linkType = linkType;
    return this;
  }

   /**
   * Get linkType
   * @return linkType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LinkAnnotationType getLinkType() {
    return linkType;
  }


  public void setLinkType(LinkAnnotationType linkType) {
    this.linkType = linkType;
  }


  public LinkAnnotationParameters linkPage(Integer linkPage) {
    
    this.linkPage = linkPage;
    return this;
  }

   /**
   * Specifies the link annotation destination page if the Page type is specified.
   * @return linkPage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the link annotation destination page if the Page type is specified.")

  public Integer getLinkPage() {
    return linkPage;
  }


  public void setLinkPage(Integer linkPage) {
    this.linkPage = linkPage;
  }


  public LinkAnnotationParameters linkUri(String linkUri) {
    
    this.linkUri = linkUri;
    return this;
  }

   /**
   * Specifies the link annotation destination URI if the Web type is specified.
   * @return linkUri
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the link annotation destination URI if the Web type is specified.")

  public String getLinkUri() {
    return linkUri;
  }


  public void setLinkUri(String linkUri) {
    this.linkUri = linkUri;
  }


  public LinkAnnotationParameters showBorder(Boolean showBorder) {
    
    this.showBorder = showBorder;
    return this;
  }

   /**
   * Specifies if the annotation border shall be drawn.
   * @return showBorder
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies if the annotation border shall be drawn.")

  public Boolean getShowBorder() {
    return showBorder;
  }


  public void setShowBorder(Boolean showBorder) {
    this.showBorder = showBorder;
  }


  public LinkAnnotationParameters color(String color) {
    
    this.color = color;
    return this;
  }

   /**
   * Specifies the color of the annotation, using the color name (ie: \&quot;red\&quot;) or its RGBa code (ie: \&quot;rgba(255,0,0,1)\&quot;).
   * @return color
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the color of the annotation, using the color name (ie: \"red\") or its RGBa code (ie: \"rgba(255,0,0,1)\").")

  public String getColor() {
    return color;
  }


  public void setColor(String color) {
    this.color = color;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LinkAnnotationParameters linkAnnotationParameters = (LinkAnnotationParameters) o;
    return Objects.equals(this.annotationLayout, linkAnnotationParameters.annotationLayout) &&
        Objects.equals(this.linkType, linkAnnotationParameters.linkType) &&
        Objects.equals(this.linkPage, linkAnnotationParameters.linkPage) &&
        Objects.equals(this.linkUri, linkAnnotationParameters.linkUri) &&
        Objects.equals(this.showBorder, linkAnnotationParameters.showBorder) &&
        Objects.equals(this.color, linkAnnotationParameters.color);
  }

  @Override
  public int hashCode() {
    return Objects.hash(annotationLayout, linkType, linkPage, linkUri, showBorder, color);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LinkAnnotationParameters {\n");
    sb.append("    annotationLayout: ").append(toIndentedString(annotationLayout)).append("\n");
    sb.append("    linkType: ").append(toIndentedString(linkType)).append("\n");
    sb.append("    linkPage: ").append(toIndentedString(linkPage)).append("\n");
    sb.append("    linkUri: ").append(toIndentedString(linkUri)).append("\n");
    sb.append("    showBorder: ").append(toIndentedString(showBorder)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


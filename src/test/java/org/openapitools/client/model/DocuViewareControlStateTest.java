/*
 * PassportPDF API
 * Another brick in the cloud
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.DocuViewareCertificate;
import org.openapitools.client.model.DocuViewareLocale;
import org.openapitools.client.model.DocumentAlignment;
import org.openapitools.client.model.DocumentPosition;
import org.openapitools.client.model.LinkAnnotationClickBehaviour;
import org.openapitools.client.model.PageViewMode;
import org.openapitools.client.model.PrintQuality;
import org.openapitools.client.model.RotateFlip;
import org.openapitools.client.model.RotateMode;
import org.openapitools.client.model.ToolbarStyle;
import org.openapitools.client.model.ViewerZoomMode;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


/**
 * Model tests for DocuViewareControlState
 */
public class DocuViewareControlStateTest {
    private final DocuViewareControlState model = new DocuViewareControlState();

    /**
     * Model tests for DocuViewareControlState
     */
    @Test
    public void testDocuViewareControlState() {
        // TODO: test DocuViewareControlState
    }

    /**
     * Test the property 'timeout'
     */
    @Test
    public void timeoutTest() {
        // TODO: test timeout
    }

    /**
     * Test the property 'controlID'
     */
    @Test
    public void controlIDTest() {
        // TODO: test controlID
    }

    /**
     * Test the property 'showLogo'
     */
    @Test
    public void showLogoTest() {
        // TODO: test showLogo
    }

    /**
     * Test the property 'remoteIP'
     */
    @Test
    public void remoteIPTest() {
        // TODO: test remoteIP
    }

    /**
     * Test the property 'fileHostingURI'
     */
    @Test
    public void fileHostingURITest() {
        // TODO: test fileHostingURI
    }

    /**
     * Test the property 'documentURI'
     */
    @Test
    public void documentURITest() {
        // TODO: test documentURI
    }

    /**
     * Test the property 'documentFileName'
     */
    @Test
    public void documentFileNameTest() {
        // TODO: test documentFileName
    }

    /**
     * Test the property 'disableDownloadProgress'
     */
    @Test
    public void disableDownloadProgressTest() {
        // TODO: test disableDownloadProgress
    }

    /**
     * Test the property 'documentAlignment'
     */
    @Test
    public void documentAlignmentTest() {
        // TODO: test documentAlignment
    }

    /**
     * Test the property 'documentPosition'
     */
    @Test
    public void documentPositionTest() {
        // TODO: test documentPosition
    }

    /**
     * Test the property 'enableGdPictureAnnotations'
     */
    @Test
    public void enableGdPictureAnnotationsTest() {
        // TODO: test enableGdPictureAnnotations
    }

    /**
     * Test the property 'disableAnnotationPrinting'
     */
    @Test
    public void disableAnnotationPrintingTest() {
        // TODO: test disableAnnotationPrinting
    }

    /**
     * Test the property 'enableFormFieldsEdition'
     */
    @Test
    public void enableFormFieldsEditionTest() {
        // TODO: test enableFormFieldsEdition
    }

    /**
     * Test the property 'annotationEditorMode'
     */
    @Test
    public void annotationEditorModeTest() {
        // TODO: test annotationEditorMode
    }

    /**
     * Test the property 'linkAnnotationClickBehaviour'
     */
    @Test
    public void linkAnnotationClickBehaviourTest() {
        // TODO: test linkAnnotationClickBehaviour
    }

    /**
     * Test the property 'zoom'
     */
    @Test
    public void zoomTest() {
        // TODO: test zoom
    }

    /**
     * Test the property 'zoomMode'
     */
    @Test
    public void zoomModeTest() {
        // TODO: test zoomMode
    }

    /**
     * Test the property 'openZoomMode'
     */
    @Test
    public void openZoomModeTest() {
        // TODO: test openZoomMode
    }

    /**
     * Test the property 'viewRotation'
     */
    @Test
    public void viewRotationTest() {
        // TODO: test viewRotation
    }

    /**
     * Test the property 'pageRotation'
     */
    @Test
    public void pageRotationTest() {
        // TODO: test pageRotation
    }

    /**
     * Test the property 'zoomStep'
     */
    @Test
    public void zoomStepTest() {
        // TODO: test zoomStep
    }

    /**
     * Test the property 'scrollBars'
     */
    @Test
    public void scrollBarsTest() {
        // TODO: test scrollBars
    }

    /**
     * Test the property 'forceScrollBars'
     */
    @Test
    public void forceScrollBarsTest() {
        // TODO: test forceScrollBars
    }

    /**
     * Test the property 'pageViewMode'
     */
    @Test
    public void pageViewModeTest() {
        // TODO: test pageViewMode
    }

    /**
     * Test the property 'enableTextSelection'
     */
    @Test
    public void enableTextSelectionTest() {
        // TODO: test enableTextSelection
    }

    /**
     * Test the property 'enableTextSelectionAnnotation'
     */
    @Test
    public void enableTextSelectionAnnotationTest() {
        // TODO: test enableTextSelectionAnnotation
    }

    /**
     * Test the property 'locale'
     */
    @Test
    public void localeTest() {
        // TODO: test locale
    }

    /**
     * Test the property 'userLanguages'
     */
    @Test
    public void userLanguagesTest() {
        // TODO: test userLanguages
    }

    /**
     * Test the property 'controlWidth'
     */
    @Test
    public void controlWidthTest() {
        // TODO: test controlWidth
    }

    /**
     * Test the property 'controlHeight'
     */
    @Test
    public void controlHeightTest() {
        // TODO: test controlHeight
    }

    /**
     * Test the property 'annotationDropShadow'
     */
    @Test
    public void annotationDropShadowTest() {
        // TODO: test annotationDropShadow
    }

    /**
     * Test the property 'allowPrint'
     */
    @Test
    public void allowPrintTest() {
        // TODO: test allowPrint
    }

    /**
     * Test the property 'allowUpload'
     */
    @Test
    public void allowUploadTest() {
        // TODO: test allowUpload
    }

    /**
     * Test the property 'enableMultipleThumbnailSelection'
     */
    @Test
    public void enableMultipleThumbnailSelectionTest() {
        // TODO: test enableMultipleThumbnailSelection
    }

    /**
     * Test the property 'enableThumbnailDragDrop'
     */
    @Test
    public void enableThumbnailDragDropTest() {
        // TODO: test enableThumbnailDragDrop
    }

    /**
     * Test the property 'enableFileUploadButton'
     */
    @Test
    public void enableFileUploadButtonTest() {
        // TODO: test enableFileUploadButton
    }

    /**
     * Test the property 'enableLoadFromUriButton'
     */
    @Test
    public void enableLoadFromUriButtonTest() {
        // TODO: test enableLoadFromUriButton
    }

    /**
     * Test the property 'enableSaveButton'
     */
    @Test
    public void enableSaveButtonTest() {
        // TODO: test enableSaveButton
    }

    /**
     * Test the property 'enablePagesNavigationButtons'
     */
    @Test
    public void enablePagesNavigationButtonsTest() {
        // TODO: test enablePagesNavigationButtons
    }

    /**
     * Test the property 'enablePrintButton'
     */
    @Test
    public void enablePrintButtonTest() {
        // TODO: test enablePrintButton
    }

    /**
     * Test the property 'enablePrintToPDF'
     */
    @Test
    public void enablePrintToPDFTest() {
        // TODO: test enablePrintToPDF
    }

    /**
     * Test the property 'enableFitWidthButton'
     */
    @Test
    public void enableFitWidthButtonTest() {
        // TODO: test enableFitWidthButton
    }

    /**
     * Test the property 'enableZoom100Button'
     */
    @Test
    public void enableZoom100ButtonTest() {
        // TODO: test enableZoom100Button
    }

    /**
     * Test the property 'enableMouseModeButtons'
     */
    @Test
    public void enableMouseModeButtonsTest() {
        // TODO: test enableMouseModeButtons
    }

    /**
     * Test the property 'enablePanModeButton'
     */
    @Test
    public void enablePanModeButtonTest() {
        // TODO: test enablePanModeButton
    }

    /**
     * Test the property 'enableSelectModeButton'
     */
    @Test
    public void enableSelectModeButtonTest() {
        // TODO: test enableSelectModeButton
    }

    /**
     * Test the property 'enableMarqueeZoomModeButton'
     */
    @Test
    public void enableMarqueeZoomModeButtonTest() {
        // TODO: test enableMarqueeZoomModeButton
    }

    /**
     * Test the property 'enableFullScreenButton'
     */
    @Test
    public void enableFullScreenButtonTest() {
        // TODO: test enableFullScreenButton
    }

    /**
     * Test the property 'enableFitPageButton'
     */
    @Test
    public void enableFitPageButtonTest() {
        // TODO: test enableFitPageButton
    }

    /**
     * Test the property 'enableZoomButtons'
     */
    @Test
    public void enableZoomButtonsTest() {
        // TODO: test enableZoomButtons
    }

    /**
     * Test the property 'enablePageViewButtons'
     */
    @Test
    public void enablePageViewButtonsTest() {
        // TODO: test enablePageViewButtons
    }

    /**
     * Test the property 'rotateButtonsMode'
     */
    @Test
    public void rotateButtonsModeTest() {
        // TODO: test rotateButtonsMode
    }

    /**
     * Test the property 'enableRotateButtons'
     */
    @Test
    public void enableRotateButtonsTest() {
        // TODO: test enableRotateButtons
    }

    /**
     * Test the property 'enableAnnotationActionButtons'
     */
    @Test
    public void enableAnnotationActionButtonsTest() {
        // TODO: test enableAnnotationActionButtons
    }

    /**
     * Test the property 'enableSelectedTextAnnotationEdition'
     */
    @Test
    public void enableSelectedTextAnnotationEditionTest() {
        // TODO: test enableSelectedTextAnnotationEdition
    }

    /**
     * Test the property 'enableRectangleHighlighterAnnotationButton'
     */
    @Test
    public void enableRectangleHighlighterAnnotationButtonTest() {
        // TODO: test enableRectangleHighlighterAnnotationButton
    }

    /**
     * Test the property 'enableFreehandHighlighterAnnotationButton'
     */
    @Test
    public void enableFreehandHighlighterAnnotationButtonTest() {
        // TODO: test enableFreehandHighlighterAnnotationButton
    }

    /**
     * Test the property 'enableRubberStampAnnotationButton'
     */
    @Test
    public void enableRubberStampAnnotationButtonTest() {
        // TODO: test enableRubberStampAnnotationButton
    }

    /**
     * Test the property 'enableRectangleAnnotationButton'
     */
    @Test
    public void enableRectangleAnnotationButtonTest() {
        // TODO: test enableRectangleAnnotationButton
    }

    /**
     * Test the property 'enableEllipseAnnotationButton'
     */
    @Test
    public void enableEllipseAnnotationButtonTest() {
        // TODO: test enableEllipseAnnotationButton
    }

    /**
     * Test the property 'enableLineAnnotationButton'
     */
    @Test
    public void enableLineAnnotationButtonTest() {
        // TODO: test enableLineAnnotationButton
    }

    /**
     * Test the property 'enableConnectedLineAnnotationButton'
     */
    @Test
    public void enableConnectedLineAnnotationButtonTest() {
        // TODO: test enableConnectedLineAnnotationButton
    }

    /**
     * Test the property 'enableFreehandAnnotationButton'
     */
    @Test
    public void enableFreehandAnnotationButtonTest() {
        // TODO: test enableFreehandAnnotationButton
    }

    /**
     * Test the property 'enableLineArrowAnnotationButton'
     */
    @Test
    public void enableLineArrowAnnotationButtonTest() {
        // TODO: test enableLineArrowAnnotationButton
    }

    /**
     * Test the property 'enableLinkAnnotationButton'
     */
    @Test
    public void enableLinkAnnotationButtonTest() {
        // TODO: test enableLinkAnnotationButton
    }

    /**
     * Test the property 'enableRulerAnnotationButton'
     */
    @Test
    public void enableRulerAnnotationButtonTest() {
        // TODO: test enableRulerAnnotationButton
    }

    /**
     * Test the property 'enablePolyRulerAnnotationButton'
     */
    @Test
    public void enablePolyRulerAnnotationButtonTest() {
        // TODO: test enablePolyRulerAnnotationButton
    }

    /**
     * Test the property 'enableTextAnnotationButton'
     */
    @Test
    public void enableTextAnnotationButtonTest() {
        // TODO: test enableTextAnnotationButton
    }

    /**
     * Test the property 'enableStickyNoteAnnotationButton'
     */
    @Test
    public void enableStickyNoteAnnotationButtonTest() {
        // TODO: test enableStickyNoteAnnotationButton
    }

    /**
     * Test the property 'enableTwainAcquisitionButton'
     */
    @Test
    public void enableTwainAcquisitionButtonTest() {
        // TODO: test enableTwainAcquisitionButton
    }

    /**
     * Test the property 'twainSourceEnableCustomConfiguration'
     */
    @Test
    public void twainSourceEnableCustomConfigurationTest() {
        // TODO: test twainSourceEnableCustomConfiguration
    }

    /**
     * Test the property 'twainSourceSelectFeeder'
     */
    @Test
    public void twainSourceSelectFeederTest() {
        // TODO: test twainSourceSelectFeeder
    }

    /**
     * Test the property 'twainSourceBitDepth'
     */
    @Test
    public void twainSourceBitDepthTest() {
        // TODO: test twainSourceBitDepth
    }

    /**
     * Test the property 'twainSourceResolution'
     */
    @Test
    public void twainSourceResolutionTest() {
        // TODO: test twainSourceResolution
    }

    /**
     * Test the property 'twainSourceEnableDuplex'
     */
    @Test
    public void twainSourceEnableDuplexTest() {
        // TODO: test twainSourceEnableDuplex
    }

    /**
     * Test the property 'twainSourceHideUI'
     */
    @Test
    public void twainSourceHideUITest() {
        // TODO: test twainSourceHideUI
    }

    /**
     * Test the property 'freeHandContinuousDrawingMode'
     */
    @Test
    public void freeHandContinuousDrawingModeTest() {
        // TODO: test freeHandContinuousDrawingMode
    }

    /**
     * Test the property 'showTextSearchSnapIn'
     */
    @Test
    public void showTextSearchSnapInTest() {
        // TODO: test showTextSearchSnapIn
    }

    /**
     * Test the property 'showThumbnailsSnapIn'
     */
    @Test
    public void showThumbnailsSnapInTest() {
        // TODO: test showThumbnailsSnapIn
    }

    /**
     * Test the property 'showBookmarksSnapIn'
     */
    @Test
    public void showBookmarksSnapInTest() {
        // TODO: test showBookmarksSnapIn
    }

    /**
     * Test the property 'showAnnotationsSnapIn'
     */
    @Test
    public void showAnnotationsSnapInTest() {
        // TODO: test showAnnotationsSnapIn
    }

    /**
     * Test the property 'showAnnotationsCommentsSnapIn'
     */
    @Test
    public void showAnnotationsCommentsSnapInTest() {
        // TODO: test showAnnotationsCommentsSnapIn
    }

    /**
     * Test the property 'showRedactionSnapIn'
     */
    @Test
    public void showRedactionSnapInTest() {
        // TODO: test showRedactionSnapIn
    }

    /**
     * Test the property 'showDigitalSignatureSnapIn'
     */
    @Test
    public void showDigitalSignatureSnapInTest() {
        // TODO: test showDigitalSignatureSnapIn
    }

    /**
     * Test the property 'thumbnailWidth'
     */
    @Test
    public void thumbnailWidthTest() {
        // TODO: test thumbnailWidth
    }

    /**
     * Test the property 'thumbnailHeight'
     */
    @Test
    public void thumbnailHeightTest() {
        // TODO: test thumbnailHeight
    }

    /**
     * Test the property 'snapInPanelDefaultWidth'
     */
    @Test
    public void snapInPanelDefaultWidthTest() {
        // TODO: test snapInPanelDefaultWidth
    }

    /**
     * Test the property 'collapsedSnapIn'
     */
    @Test
    public void collapsedSnapInTest() {
        // TODO: test collapsedSnapIn
    }

    /**
     * Test the property 'collapseSnapinOnDocumentClosed'
     */
    @Test
    public void collapseSnapinOnDocumentClosedTest() {
        // TODO: test collapseSnapinOnDocumentClosed
    }

    /**
     * Test the property 'showSnapInCollapseButton'
     */
    @Test
    public void showSnapInCollapseButtonTest() {
        // TODO: test showSnapInCollapseButton
    }

    /**
     * Test the property 'showSnapInPanelHeader'
     */
    @Test
    public void showSnapInPanelHeaderTest() {
        // TODO: test showSnapInPanelHeader
    }

    /**
     * Test the property 'showSnapInButtonStrip'
     */
    @Test
    public void showSnapInButtonStripTest() {
        // TODO: test showSnapInButtonStrip
    }

    /**
     * Test the property 'showToolbar'
     */
    @Test
    public void showToolbarTest() {
        // TODO: test showToolbar
    }

    /**
     * Test the property 'toolbarStyle'
     */
    @Test
    public void toolbarStyleTest() {
        // TODO: test toolbarStyle
    }

    /**
     * Test the property 'toolbarButtonsSpacing'
     */
    @Test
    public void toolbarButtonsSpacingTest() {
        // TODO: test toolbarButtonsSpacing
    }

    /**
     * Test the property 'toolbarHeight'
     */
    @Test
    public void toolbarHeightTest() {
        // TODO: test toolbarHeight
    }

    /**
     * Test the property 'strokeColor'
     */
    @Test
    public void strokeColorTest() {
        // TODO: test strokeColor
    }

    /**
     * Test the property 'miscBorderColor'
     */
    @Test
    public void miscBorderColorTest() {
        // TODO: test miscBorderColor
    }

    /**
     * Test the property 'headerColor'
     */
    @Test
    public void headerColorTest() {
        // TODO: test headerColor
    }

    /**
     * Test the property 'panelBackColor'
     */
    @Test
    public void panelBackColorTest() {
        // TODO: test panelBackColor
    }

    /**
     * Test the property 'viewerBackColor'
     */
    @Test
    public void viewerBackColorTest() {
        // TODO: test viewerBackColor
    }

    /**
     * Test the property 'activeSelectedColor'
     */
    @Test
    public void activeSelectedColorTest() {
        // TODO: test activeSelectedColor
    }

    /**
     * Test the property 'toolbarBackColor'
     */
    @Test
    public void toolbarBackColorTest() {
        // TODO: test toolbarBackColor
    }

    /**
     * Test the property 'customNotificationIconError'
     */
    @Test
    public void customNotificationIconErrorTest() {
        // TODO: test customNotificationIconError
    }

    /**
     * Test the property 'customNotificationIconQuestion'
     */
    @Test
    public void customNotificationIconQuestionTest() {
        // TODO: test customNotificationIconQuestion
    }

    /**
     * Test the property 'customNotificationIconWarning'
     */
    @Test
    public void customNotificationIconWarningTest() {
        // TODO: test customNotificationIconWarning
    }

    /**
     * Test the property 'customNotificationIconInfo'
     */
    @Test
    public void customNotificationIconInfoTest() {
        // TODO: test customNotificationIconInfo
    }

    /**
     * Test the property 'customNotificationIconOk'
     */
    @Test
    public void customNotificationIconOkTest() {
        // TODO: test customNotificationIconOk
    }

    /**
     * Test the property 'allowedExportFormats'
     */
    @Test
    public void allowedExportFormatsTest() {
        // TODO: test allowedExportFormats
    }

    /**
     * Test the property 'disableAnnotationDrawingModePanel'
     */
    @Test
    public void disableAnnotationDrawingModePanelTest() {
        // TODO: test disableAnnotationDrawingModePanel
    }

    /**
     * Test the property 'imageQuality'
     */
    @Test
    public void imageQualityTest() {
        // TODO: test imageQuality
    }

    /**
     * Test the property 'printQuality'
     */
    @Test
    public void printQualityTest() {
        // TODO: test printQuality
    }

    /**
     * Test the property 'enableDocumentsDrop'
     */
    @Test
    public void enableDocumentsDropTest() {
        // TODO: test enableDocumentsDrop
    }

    /**
     * Test the property 'ajaxCustomHeaders'
     */
    @Test
    public void ajaxCustomHeadersTest() {
        // TODO: test ajaxCustomHeaders
    }

    /**
     * Test the property 'fileDownloadCustomHeaders'
     */
    @Test
    public void fileDownloadCustomHeadersTest() {
        // TODO: test fileDownloadCustomHeaders
    }

    /**
     * Test the property 'textSearchMaxResults'
     */
    @Test
    public void textSearchMaxResultsTest() {
        // TODO: test textSearchMaxResults
    }

    /**
     * Test the property 'maxUploadSize'
     */
    @Test
    public void maxUploadSizeTest() {
        // TODO: test maxUploadSize
    }

    /**
     * Test the property 'maxDownloadSize'
     */
    @Test
    public void maxDownloadSizeTest() {
        // TODO: test maxDownloadSize
    }

    /**
     * Test the property 'maxPages'
     */
    @Test
    public void maxPagesTest() {
        // TODO: test maxPages
    }

    /**
     * Test the property 'certificates'
     */
    @Test
    public void certificatesTest() {
        // TODO: test certificates
    }

    /**
     * Test the property 'extraFeatures'
     */
    @Test
    public void extraFeaturesTest() {
        // TODO: test extraFeatures
    }

}
